import /.at.collections.java.vector;
import /.at.collections.java.linkedlist;
import /.at.collections.java.hashmap;


def open(tag, attributes) {
	def res := "<" + tag;
	attributes.each: { |k, v|
		res := res + " " + (print: k) + "=" + (print: v);
	};
	res + ">";
};

def close(tag) {
	"</" + tag + ">"	
};

def htmlString(tag, clo) {
	def res := clo();
	open(tag) + res + close(tag);
};

import /.at.lang.dynvars;

def dHTMLParent := dynamicVariable: nil;

def createHTMLObjectMirror(base, tag) {
	extend: defaultMirror.new(base) with: {
		def print() {
			def childrenText := self.base.toTable();
			childrenText := (childrenText.map: { |c| 
				if: (is: c taggedAs: /.at.lang.types.Text) then: {
					c;
				} else: { 
					(print: c);
				}
			}).join("");
			open(tag, self.base.attributes) + childrenText + close(tag);
		};
	};
};

def htmlNode(tag, clo, attributes) {
	// create html node
	def htmlObject := extend: Vector.new() with: {
		// with tag name
		def name := tag;
		// attributes
		def attributes := attributes;
		// utility functions
		def getElementById(id) {
			def queue := LinkedList.new();
			queue.addAll(self);
			def currentNode;
			{ |return|
				while: {!queue.isEmpty()} do: {
					currentNode := queue.removeFirst();
					if: (currentNode.id == id) then: {
						return(currentNode);
					};
					queue.addAll(currentNode);
				};
			}.escape();
		};
	} mirroredBy: { |base| createHTMLObjectMirror(base, tag) };
	// if there is a parent node, add this node as a child
	if: ((?dHTMLParent) != nil) then: {
		(?dHTMLParent).add(htmlObject);
	};
	// wrap closure
	def extendedScope := object: { 
		def attributes := htmlObject.attributes;
		def parent := (?dHTMLParent);
		import tagModule;
	};
	def wrappedClo := { clo.applyInScope([], extendedScope) };
	def result := with: dHTMLParent is: htmlObject do: wrappedClo;
	if: ((result != nil).and: { !(htmlObject.contains(result)) }) then: {
		htmlObject.add(result);
	};
	htmlObject;
};

def tagModule := object: {
		[`html, `head, `body, `div, `title, `p].each: { |t|
		def sym := jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(t.text() + ":");
		def symId := jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(t.text() + ":id:");
		def symCl := jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(t.text() + ":class:");
		def symIdCl := jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(t.text() + ":id:class:");
		def symAttrs := jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(t.text() + ":withAttributes:");
		def scope := (reflect: self);
		scope.defineField(symAttrs, { |clo, attrs| 
			if: !(is: attrs taggedAs: HashMapT) then: {
				attrs := HashMap: attrs in: self;
			};
			htmlNode(t.text(), clo, attrs)
		});
		scope.defineField(sym, { |clo| 
			htmlNode(t.text(), clo, HashMap.new());
		});
		scope.defineField(symId, { |clo, id| 
			htmlNode(t.text(), clo, HashMap: {`id => id});
		});
		scope.defineField(symCl, { |clo, class| 
			htmlNode(t.text(), clo, HashMap: {`class => class});
		});
		scope.defineField(symIdCl, { |clo, id, class| 
			htmlNode(t.text(), clo, HashMap: {`id => id; `class => class});
		});
	};
};


def HTMLModule := object: {
	
	import tagModule;
	
	def HTMLConvertor := jlobby.frameworks.html.HTMLConvertor;
	
	def parseHTML: text { 
		eval: (read: HTMLConvertor.convert(text)) in: (object: {});
	};

};


HTMLModule;
