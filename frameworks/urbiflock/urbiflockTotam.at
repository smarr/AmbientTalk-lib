/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Authors: Soft Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
 /**
 *  Module wrapping TOTAM for Urbiflock framework. 
 *  It basically contains some facilities for flock communication.
 *  used by Urbiflcok and by Urbiflock programers by means of the flock abstraction. 
 */
 
 
import /.at.lang.totam;

def FutureMessage := /.at.lang.futures.FutureMessage;

def urbiflockTotamModule := object:{

  deftype FlockMessageT;
          
  def makeTotam(aFlockr) {
     def ts := makeTupleSpace(aFlockr.getUsername());
     
     def discoveryListener := object: {
         //TODO: this map wouldn't be necessary if it we would use the property map instead and get notified
        // for change on connectivity.
        def totamsMap := jlobby.java.util.HashMap.new();
  
      	def notifyJoined(profile) {
      	  def flockrTotam := totamsMap.get(profile.username);
      	  if: (flockrTotam == nil) then: { 
      	    def flockrRef := aFlockr.getFlockrWithUid(profile.username);
      	    // only notify the discoveries, not reconnections!
      	    /.at.lang.futures.when: flockrRef<-getTotam()@FutureMessage becomes: { |remoteTs|
      	      totamsMap.put(profile.username, remoteTs);
		      ts.notifyTSDiscovered(remoteTs, profile.username)
		    };
		  };
		};
   	 	//invoked whenever a flockr becomes disconnected
    	def notifyLeft(profile) {
			//do not do anything for now.
	  	};		
	 };
	 aFlockr.registerDiscoveryListener(discoveryListener);
     //adding the private flockrTuple used to calculate who should receive the guanote
	 ts.out(tuple:["Flockr", aFlockr]);
	 ts;
  };
  
  // it is a protocol which gives you access to the localFlockr by means of getLocalFlockr() so 
  // that programmers don't compute it themselves.
  def getDefaultUrbiflockProtocol() {
    propagationProtocol: {
      def localTS;
      def localFlockr := nil;
	  def decideDie(ts) { localTS := ts; super^decideDie(ts)};
	  def decideEnter(ts) { localTS := ts; super^decideEnter(ts)}; 
	  def getLocalFlockr() {
	    if: (localFlockr == nil) then:{
	      def localFlockrTuple := localTS.rdp(/.at.lang.totam.tuple: ["Flockr", /.at.lang.totam.var: `flockr]);
	      if: (localFlockrTuple != nil) then:{
	        localFlockr := localFlockrTuple.getField(2);
	      };
	    };
	    localFlockr;
	  };
	  // set localFlockr so that it is recomputed at each flock.
	  def receiveTuple() {
	    localFlockr := nil;
	    self;
	  };
	};
  };
  
  def flockProtocol() {
    extendPropagationProtocol: getDefaultUrbiflockProtocol()  with: {
      def inScope(senderDescriptor, receiverDescriptor) { 
        def isInScope := false;
        // this Flockr tuple wouldn't it be necessary if totam will have access to flockr.
        def localFlockr := self.getLocalFlockr();
	    if: ( localFlockr != nil) then: {
	      def target := self.getField(3);
	      if: (target.isFlock()) then:{ // this should be always the case for flockProtocol
	        def targetFlock := localFlockr.getFlock(@target.getTargetFlockrs());
	        if: (targetFlock != nil) then:{ 
	        system.println("flockProtocol:InScope:from: " +senderDescriptor+ " target is " + target.getTargetFlockrs() + " including " + targetFlock.getSnapshot());
	          isInScope := targetFlock.getSnapshot().contains(receiverDescriptor);
	        }; 
	      };
	    };
	    system.println("flockProtocol:InScope:from: " +senderDescriptor+ " to " + receiverDescriptor + " : " + isInScope);
	    isInScope;
	  }; //end-inScope
	};
  };
  
  def currentContentsProtocol(){
    extendPropagationProtocol: getDefaultUrbiflockProtocol()  with: { 
       def hops := 0;
       def die := false;
       def listenersNotified := false;
	   def inScope(senderDescriptor, receiverDescriptor) {
	     def isInScope := false;
	     if: (hops == 0) then: {   
	       // check similar to flockProtocol BUT it only sends to currenlty connected flocks.
	       // this Flockr tuple wouldn't it be necessary if totam will have access to flockr.
	       def localFlockr := self.getLocalFlockr();
	       if: (localFlockr != nil) then: {
	         def target := self.getField(3);
	         if: (!target.isFlock()) then: { // this should be always the case for currentContentsProtocol
	           def connectedFlockrs := localFlockr.getFlock("NearbyFlock").getSnapshot();
	           def targetFlockrs := target.getTargetFlockrs();
               if: (targetFlockrs != nil) then:{ 
	             // TODO: to check if the flockrs are connected we should maybe use the property map.
	             isInScope := (targetFlockrs.contains(receiverDescriptor)).and: { connectedFlockrs.contains(receiverDescriptor)};
	             if: isInScope then: { 
	               target.removeTarget(receiverDescriptor); 
	             };
	           } else: {
	             die := true;
	             isInScope := false;
	           };
	         };
	       };
	     };
         system.println("currentContentsProtocol:InScope:from: " +senderDescriptor+ " to " + receiverDescriptor + " : " + isInScope);
	     isInScope;
	   };
   
	   def receiveTuple() {
	     hops := hops + 1; 
	     self;
	   };
	   // Tuple dies after one hop because you only send it to current contents of the flock.
	   def decideDie(ts) {
	     def res := false;
	     if: ( hops == 0 ) then: { 
	       res := die; 
	     } else: {
	       res := listenersNotified;
	       listenersNotified := true;
	     };
	     (super^decideDie(ts)).and: {res};
	   }; 
    }; 
  };
      
 def makeMessageTarget(isFlockReceiver, @idList) {
   isolate: { |isFlockReceiver, idList|
    def isFlock() { isFlockReceiver};
    def getTargetFlockrs() {idList};
    def removeTarget(id) { idList := idList.filter: { |el| el != id }};
   };					
 };
     

}; //end-urbiflockTotamModule
