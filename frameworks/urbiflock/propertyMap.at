/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/** 
/* operation mayhem 
 * The property list, but it's implemented as an isolate object.
 */ 
def makePropertyMap() {
	def thePropertyMap := isolate: {
		/** 
		 * Add a field to the profile. If the slot with name propName
		 * already exists, there is already such a profile property.
		 * If this is the case, raise a XDuplicateField exception.
		 */
		def addField(propName, propVal := nil ) {
			if: (reflect: self).respondsTo(propName) then: {
				raise: XDuplicateField.new("PropertyMap already has property: " + propName);
			} else: {
				(reflect: self).defineField(propName, propVal);
			}
		};
		
		
		/** 
		 * Remove a field from the profile. If the property with name propName
		 * is a mandatory field, raise a XMandatoryFieldRemoval exception.
		 */
		def removeField(propName) {
			(reflect: self).removeSlot(propName);
		};
		
	};
	
	thePropertyMap;
};


// the module object of this file
object: {
	def makePropertyMap := &makePropertyMap;
};