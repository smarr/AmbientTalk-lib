/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def HashMap := jlobby.java.util.HashMap;
def Vector := /.at.collections.vector.Vector;
def Rete := /.frameworks.urbiflock.rete.makeRete({|profile| profile.username});

// a proximity is an object wrapping a rete node 
// + the behaviour for storing and notifying observers of changes in the rete.
def makeProximity(reteNode) {
	object: {
		def listeners := Vector.new();
	
		def getReteNode(){ reteNode };
		
		def notifyFromNode(Token) {
				if: Token.getSign then: {
						listeners.each: {|listener| 
							listener.addFlockr(Token.getFlockr); };				
					} else: {
						listeners.each: {|listener| listener.removeFlockr(Token.getFlockr); };					 
				};
		};
		def connect() {
			reteNode.pass := {|Token| self.notifyFromNode(Token) };
		};	
		
		//public interface
		
		/*register a listener with a proximity that gets notified when a flockr matches or doesn't matches the
		proximity fucntion, i.e notifies the addition/removal of a flockr in the output set.
		 listener should understand:
		  def addFlockr(profile);
		    invoked whenever a new flockr matches the proximity function.
	    def removeFlockr(profile);
	      invoked whenever a new flockr does not match the proximity function anymore.
	  */
		def register(listener) { 
			listeners.add(listener);
			object: {
				def cancel() {listeners.remove(listener)};
			} 
		};
		
		connect();
	};
};

// default proximities offered by the framework
// encodes the friendship relationships based on the buddy list
def makeIsFriendProximity(flockr) {
	// isFriendProximity registers itself as a buddy list listener to be 
	// notified when a buddy gets added or removed.
	def isFriendProximity := extend: makeProximity(Rete.makeFilterNode(Rete.makeFilter({|RI| true}))) with: {
		//  invoked whenever a buddy was manually added to this flockr's buddy list
		def notifyBuddyAdded(profile) {
			super^getReteNode().insert(profile);
		};
    //invoked whenever a buddy was manually removed from this flockr's buddy list
    def notifyBuddyRemoved(profile) {
			super^getReteNode().remove(profile);
		};
	};
	flockr.registerBuddyListListener(isFriendProximity);
	isFriendProximity;
};

// encodes physical proximity function based on the AT service discovery (currently)
def makeIsNearbyProximity(flockr) {
	// isNearbyProximity registers itself as a service discovery listener to be 
	// notified when a buddy gets connects or disconnects the network.
	def isNearbyProximity := extend: makeProximity(Rete.makeFilterNode(Rete.makeFilter({|RI| true}))) with: {
		//  invoked whenever a buddy comes nearby
		def notifyJoined(profile) {
			super^getReteNode().insert(profile);
		};
    //invoked whenever a flockr comes nearby
    def notifyLeft(profile) {
			super^getReteNode().remove(profile);
	  };		
	};
	flockr.registerDiscoveryListener(isNearbyProximity);
	isNearbyProximity;
};

// encodes a proximity function that test an attribute of a flockr profile. 
def makeDoesProfileMatchProximity(flockr, block) {
	  // profileChangedProximity registers itsels as listener to track changes on the profile.
		def profileChangedProximity := extend: makeProximity(Rete.makeChangeNode( Rete.makeFilter( block ) )) with: {
			//invoked whenever the profile of the flockr changes.
			def notifyProfileChanged(farref, profile) {
				super^getReteNode().changeEvent(profile);
			};		
			super^connect();
		};
		flockr.registerProfileChangedListener(profileChangedProximity);
		profileChangedProximity;
};
// encodes a proximity function implementing the and operator on two given proximities.
def makeAndProximity(leftP, rightP) {
	makeProximity( Rete.makeAndJoinNode(leftP.getReteNode , rightP.getReteNode ) );
};

// encodes a proximity function implementing the or operator on two given proximities.
def makeOrProximity(leftP, rightP) {
	makeProximity( Rete.makeOrJoinNode(leftP.getReteNode , rightP.getReteNode ) );
};

// the module object of this file
def ProximityModule := object: {
	// public interface
	
	/* Proximities are filter objects which determine whether a user is proximate or not.
	   There are several predefined proximities functions:
	   -isFriend (encodes the friendship relationships based on the buddy list)
	   -doesProfileMatch (test an attribute of a flockr profile)
	   -isNearby (encodes physical proximity relationship)
	   Other proximities can be constructed as combination of existing proximities with andProximity and orProximity.
	   
	   Proximities issues addFlockr/removeFlockr events which can be caught by registering a listener as follows:
	   proximity.register( object: {
		  def addFlockr(profile) {  ... };
		  def removeFlockr(profile) {  ... };
		 }); 
	   In Urbiflock, flocks get registered to proximities. See flock.at for more info.
	*/
	
	def makeIsFriendProximity := &makeIsFriendProximity;
	def makeDoesProfileMatchProximity := &makeDoesProfileMatchProximity;
	def makeIsNearbyProximity := &makeIsNearbyProximity;	
	def makeAndProximity := &makeAndProximity;
	def makeOrProximity := &makeOrProximity;

	def ProximityTest := extend: /.at.unit.test.UnitTest.new("ProximityTest", false) with: {
		def waitTime := 2;
		import /.at.support.timer;
		import /.at.lang.futures exclude seconds, minutes, millisec;
		enableFutures(false);
		
		def actorF2;
		def flockr1;
		def profile2;
		
		def setUp() {
			// create two new flockrs, one in this actor, the other in a new actor
			// and a profile for flockr2 in this actor.
			def profile1 := /.frameworks.urbiflock.profile.makeProfile();
			profile1.username := "flockr1";
			profile1.sex := "MALE";
		  flockr1 := /.frameworks.urbiflock.flockr.makeFlockr(profile1);
			profile2 := /.frameworks.urbiflock.profile.makeProfile();
			profile2.username := "flockr2";
			
		  actorF2 := actor: {
			  import /.at.support.timer;
			  // adding this field for testAsyncFriendsFlock, so that
			  // we do not take offline an object which was never put online.
				def active := true; 
				def profile2 := /.frameworks.urbiflock.profile.makeProfile();
				profile2.username := "flockr2";
				profile2.sex := "MALE"; 
			  def flockr2 := /.frameworks.urbiflock.flockr.makeFlockr(profile2);
			  def goOffline() { if: (active) then: {flockr2.goOffline(); active := false}; `ok };
			  // adding this method for testAsyncFriendsFlock
			  def stop() { active := false };
			  // adding this method for testAsyncFilterFriendFlock
			  def setSex(newSex) { profile2.sex := newSex};
			  // adding this method for testAsyncFriendsOrFilterFlock
				def sexChange() {
					setSex("FEMALE");
					network.offline();
					when: seconds(waitTime) elapsed: {
						network.online();
						flockr2.goOffline();
						flockr2 := /.frameworks.urbiflock.flockr.makeFlockr(profile2);
					};
				};
		  }
		};
		
		def tearDown() {
			// clean up the flockrs created for each test
			flockr1.goOffline();
			actorF2<-goOffline()@FutureMessage;
			// because we return a future, tearDown will wait
			// until the second flock has been taken offline before
			// starting the next test
		};
				
		def testAsyncFriendsFlock(){	
			// stopping the actor sinc it is not used in this test
			actorF2<-stop();
			flockr1.addBuddy(profile2); 
			def friendFlock := flockr1.getFlock("FriendsFlock");
			when: seconds(waitTime) elapsedWithFuture: {
			  self.assertEquals(1, friendFlock.getFlockrList.length);	
			};			
		};
		
		def testAsyncFriendsOrFilterFlock(){
			def femaleProximity := makeDoesProfileMatchProximity(flockr1 , { |profile| profile.sex == "MALE" });
			def friendProximity := makeIsFriendProximity(flockr1);
			def friendAndFemaleProximity := makeOrProximity(femaleProximity, friendProximity);
			def FriendsAndFemaleFlock := /.frameworks.urbiflock.flock.makeFlock("FriendsAndFemaleFlock", friendAndFemaleProximity, flockr1);

			flockr1.addFlock(FriendsAndFemaleFlock);
			flockr1.addBuddy(profile2);

			when: seconds(waitTime) elapsedWithFuture: {
			  self.assertEquals(1, FriendsAndFemaleFlock.getFlockrList.length);	
				flockr1.removeBuddy(profile2);
				when: seconds(waitTime) elapsedWithFuture: {
					self.assertEquals(1, FriendsAndFemaleFlock.getFlockrList.length);
					when:	actorF2<-sexChange()@FutureMessage becomes: { |val|
						when: seconds(waitTime*3) elapsedWithFuture: {
							self.assertEquals(0, FriendsAndFemaleFlock.getFlockrList.length);
						};
					};
				};
			};		
		}; 
		
		def testAsyncFriendsAndFilterFlock(){				
			def femaleProximity := makeDoesProfileMatchProximity(flockr1 , { |profile| profile.sex == "MALE" });
			def friendProximity := makeIsFriendProximity(flockr1);
			def friendAndFemaleProximity := makeAndProximity(femaleProximity, friendProximity);
			def FriendsAndFemaleFlock2 := /.frameworks.urbiflock.flock.makeFlock("FriendsAndFemaleFlock2", friendAndFemaleProximity, flockr1);
			
			flockr1.addFlock(FriendsAndFemaleFlock2);
			flockr1.addBuddy(profile2);
					
			when: seconds(waitTime) elapsedWithFuture: {
			  self.assertEquals(1, FriendsAndFemaleFlock2.getFlockrList.length);	
				flockr1.removeBuddy(profile2);
				when: seconds(waitTime) elapsedWithFuture: {
					self.assertEquals(0, FriendsAndFemaleFlock2.getFlockrList.length);
					flockr1.addBuddy(profile2);
					when: seconds(waitTime*3) elapsedWithFuture: {
					  self.assertEquals(1, FriendsAndFemaleFlock2.getFlockrList.length);
					};
				};
			};		
		};
		
		def testAsyncFilterFriendFlock(){		
			def b := actor: {
				def profile3 := /.frameworks.urbiflock.profile.makeProfile();
				profile3.username := "flockr3";
				profile3.sex := "FEMALE";  
				def flockr43 := /.frameworks.urbiflock.flockr.makeFlockr(profile3);
				def stopFlockrs(){
					flockr43.goOffline();
				};
			};
			
			when: actorF2<-setSex("FEMALE")@FutureMessage becomes: { |val|
			  // Adding predefined flocks
			  def matchingProfile := /.frameworks.urbiflock.profile.makeProfile();
			  matchingProfile.sex := "FEMALE";
			  flockr1.addFlock(/.frameworks.urbiflock.flock.makeFlock("GirlFriends", makeDoesProfileMatchProximity(flockr1 , { |profile| profile.sex == matchingProfile.sex }), flockr1));
			  def girlFriendFlock := flockr1.getFlock("GirlFriends");
			
			  when: seconds(waitTime*2) elapsedWithFuture: {
			    self.assertEquals(2, girlFriendFlock.getFlockrList.length);	
				  when: b<-stopFlockrs()@FutureMessage becomes: {|ack| 
					   // resolving when:elapsedWithFuture: future;
					  `ok; 
				  }; 
			  };
			};
		}; 
		
		def testAsyncNearbyFlock(){			
			def nearbyFlock := flockr1.getFlock("NearbyFlock");
			when: seconds(waitTime*2) elapsedWithFuture: {
			  self.assertEquals(1, nearbyFlock.getFlockrList.length);	
				when: actorF2<-goOffline()@FutureMessage becomes: { |ack|
					when: seconds(waitTime) elapsedWithFuture: {
						self.assertEquals(0, nearbyFlock.getFlockrList.length);	
		      };
				};
			};		
		};		
			
	};
};