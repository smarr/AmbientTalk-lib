/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Authors: Soft Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author eline.philips
 */
 

def initModule := lobby.frameworks.workflow.WFinit;
def environmentModule := lobby.frameworks.workflow.environment;
def activityModule := lobby.frameworks.workflow.activity;
def standardPatternsModule := lobby.frameworks.workflow.standardPatterns;
def compensatingActionsModule := lobby.frameworks.workflow.compensatingActions;
def failuresModule := lobby.frameworks.workflow.failures;
def groupInteractionsModule := lobby.frameworks.workflow.CRIMEgroupInteractions;
def groupPatternsModule := lobby.frameworks.workflow.groupPatterns;
def intensionalModule := lobby.frameworks.workflow.intensional;
def crimeModule := lobby.bridges.crime.CrimeConnection;


import initModule;
import environmentModule;
import activityModule;
import standardPatternsModule;
import compensatingActionsModule;
import failuresModule;
import groupInteractionsModule;
import groupPatternsModule;
import intensionalModule;
import crimeModule;
 
import lobby.at.unit.test;
import /.at.lang.values;
import /.at.lang.futures;
enableFutures(false);
network.online();

deftype UnitTestMsg;

deftype ExceptionService;
deftype TimeoutService;

def asw := defService(`AService);
def bsw := defService(`BService);
def csw := defService(`CService);
def dsw := defService(`DService);
def esw := defService(`EService);
def timeoutsw := defService(`TimeoutService);
def disconnectionsw := defService(`DisconnectionService);
def foundsw := defService(`FoundService);
def exceptionsw := defService(`ExceptionService);


def testMsg := object: {
	def array := [];

	def add(msg) {
		array := array + [msg];
	};
	
	def count(msg) {
		def nbr := 0;
		array.map: { |e| if: (e == msg) then: { nbr := nbr + 1; } };
		nbr; 
	};
	
	def verifyOrder(msg1, msg2) {
		def idx1 := array.find: { |e| e == msg1; };
		def idx2 := array.find: { |e| e == msg2; };
		idx1 < idx2;
	};
	
	def reset() {
		array := [];
	};
};
export: testMsg as: UnitTestMsg;



def nowUnitTest := extend: UnitTest.new("NOW unit test", false) with: {
	import lobby.ME.test.nowIntensionalServices;
	services<-makeStandardActors();
	services<-makeExceptionActor();
	services<-makeTimeoutActor();
	def ServiceDB := ServiceDatabase.new();
	
	def AtestAsyncGroupSequence() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), bsw.b()@Output(Env.b), csw.c()@Output(Env.c) );
  		def group := SnapshotGroup( Service, `member, g_sequence);
  		def sequence := Sequence( group, dsw.d()@Output(Env.d) );
  		def f := when: sequence.start(env) becomes: { |nEnv|
  			system.println(testMsg.array);
  			self.assertEquals(nEnv.find(`a)[1], 1);
  			self.assertEquals(nEnv.find(`a).length, 7);
  			self.assertEquals(nEnv.find(`b)[1], 2);
  			self.assertEquals(nEnv.find(`b).length, 7);
    		self.assertEquals(nEnv.find(`c)[1], 3);
    		self.assertEquals(nEnv.find(`c).length, 7);
    		self.assertEquals(nEnv.find(`d), 4);
			def nbr := testMsg.count("ServiceA");
			self.assertEquals(nbr,7);
			nbr := testMsg.count("ServiceB");
			self.assertEquals(nbr,7);
			nbr := testMsg.count("ServiceC");
			self.assertEquals(nbr,7);
			nbr := testMsg.count("ServiceD");
			self.assertEquals(nbr,1);
		};
    	f;
 	};
 	
 	def AtestAsyncGroupSequenceWithCancellingBarrier() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), CancellingBarrier(amount(2)), bsw.b()@Output(Env.b), csw.c()@Output(Env.c) );
  		def group := SnapshotGroup( Service, `member, g_sequence);
  		def sequence := Sequence( group, dsw.d()@Output(Env.d) );
  		def f := when: sequence.start(env) becomes: { |nEnv|
  			nEnv.print();
  			system.println(testMsg.array);
  			self.assertEquals(nEnv.find(`a)[1], 1);
  			self.assertEquals(nEnv.find(`a).length, 2);
  			self.assertEquals(nEnv.find(`b)[1], 2);
  			self.assertEquals(nEnv.find(`b).length, 2);
    		self.assertEquals(nEnv.find(`c)[1], 3);
    		self.assertEquals(nEnv.find(`c).length, 2);
    		self.assertEquals(nEnv.find(`d), 4);
			def nbr := testMsg.count("ServiceA");
			self.assertEquals(nbr,7);
			nbr := testMsg.count("ServiceB");
			self.assertEquals(nbr,2);
			nbr := testMsg.count("ServiceC");
			self.assertEquals(nbr,2);
			nbr := testMsg.count("ServiceD");
			self.assertEquals(nbr,1);
		};
    	f;
 	};
 	
 	def AtestAsyncFailureSurroundingGroupActivityWithExceptionAndComponent() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def group := SnapshotGroup( Service, `member, exceptionsw.exc()@Output(Env.exc) ); 
  		def failure := Failure( group, [ [ParticipantException(), Component(esw.e()@Output(Env.e)) ] ] );
  		def sequence := Sequence( failure, dsw.d()@Output(Env.d) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: sequence.start(env) becomes: { |nEnv|
  					try: { 
  						system.println(testMsg.array);
    					self.assertEquals(nEnv.find(`d), 4);
    					self.assertEquals(nEnv.find(`e), 5);
    					self.assertEquals(nEnv.find(`exc), nil);
						def nbr := testMsg.count("ExceptionService");
						self.assertEquals(nbr,7);
						nbr := testMsg.count("ServiceE");
						self.assertEquals(nbr,2);
						nbr := testMsg.count("ServiceD");
						self.assertEquals(nbr,1);
						resolver.resolve(true);
					} catch: lobby.at.lang.types.Exception using: { |e|
 						resolver.ruin(e);
					};
				};
			};
		};
    	result;
 	};
 	 	
 	def AtestAsyncGroupSurroundingFailureSequenceWithExceptionAndComponent() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), exceptionsw.exc()@Output(Env.exc), bsw.b()@Output(Env.b) );
  		def failure := Failure( g_sequence, [ [ParticipantException(), Component(esw.e()@Output(Env.e)) ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, csw.c()@Output(Env.c) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: sequence.start(env) becomes: { |nEnv|
  					try: { 
  						system.println(testMsg.array);
  						self.assertEquals(nEnv.find(`a)[1], 1);
  						self.assertEquals(nEnv.find(`a).length, 7);
  						self.assertEquals(nEnv.find(`b)[1], 2);
  						self.assertEquals(nEnv.find(`b).length, 5);
  						self.assertEquals(nEnv.find(`c), 3);
  						self.assertEquals(nEnv.find(`e)[1], 5);
  						self.assertEquals(nEnv.find(`e).length, 2);
  						self.assertEquals(nEnv.find(`exc)[1], 999);
  						self.assertEquals(nEnv.find(`exc).length, 5);
						def nbr := testMsg.count("ServiceA");
						self.assertEquals(nbr,7);
						nbr := testMsg.count("ServiceB");
						self.assertEquals(nbr,5);
						nbr := testMsg.count("ServiceC");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ServiceE");
						self.assertEquals(nbr,2);
						nbr := testMsg.count("ExceptionService");
						self.assertEquals(nbr,7);
						resolver.resolve(true);
					} catch: lobby.at.lang.types.Exception using: { |e|
 						resolver.ruin(e);
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def AtestAsyncGroupSurroundingFailureSequenceWithParticipantExceptionAndAlternative() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), Env.member.test()@Output(Env.test), bsw.b()@Output(Env.b) );
  		def failure := Failure( g_sequence, [ [ParticipantException(), Alternative(esw.e()@Output(Env.e)) ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, csw.c()@Output(Env.c) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: sequence.start(env) becomes: { |nEnv|
  					try: { 
  						system.println(testMsg.array);
  						self.assertEquals(nEnv.find(`a)[1], 1);
  						self.assertEquals(nEnv.find(`a).length, 6);
  						self.assertEquals(nEnv.find(`b)[1], 2);
  						self.assertEquals(nEnv.find(`b).length, 6);
  						self.assertEquals(nEnv.find(`c), 3);
  						self.assertEquals(nEnv.find(`d), nil);
  						self.assertEquals(nEnv.find(`e), nil);
  						self.assertEquals(nEnv.find(`exc), nil);
    					self.assertEquals(nEnv.find(`test).length, 6);
						def nbr := testMsg.count("ServiceA");
						self.assertEquals(nbr,8);
						nbr := testMsg.count("ServiceB");
						self.assertEquals(nbr,7);
						nbr := testMsg.count("ServiceC");
						self.assertEquals(nbr,2);
						nbr := testMsg.count("ServiceD");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ServiceE");
						self.assertEquals(nbr,2);
						nbr := testMsg.count("ExceptionService");
						self.assertEquals(nbr,1);
						resolver.resolve(true);
					} catch: lobby.at.lang.types.Exception using: { |e|
 						resolver.ruin(e);
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def AtestAsyncGroupSurroundingFailureSequenceWithParticipantExceptionAndDrop() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), exceptionsw.exc()@Output(Env.exc), bsw.b()@Output(Env.b) );
  		def failure := Failure( g_sequence, [ [ParticipantException(), Drop() ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, csw.c()@Output(Env.c) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: sequence.start(env) becomes: { |nEnv|
  					try: { 
  						system.println(testMsg.array);
  						self.assertEquals(nEnv.find(`a)[1], 1);
  						self.assertEquals(nEnv.find(`a).length, 5);
  						self.assertEquals(nEnv.find(`b)[1], 2);
  						self.assertEquals(nEnv.find(`b).length, 5);
  						self.assertEquals(nEnv.find(`c), 3);
  						self.assertEquals(nEnv.find(`d), nil);
  						self.assertEquals(nEnv.find(`e), nil);
  						self.assertEquals(nEnv.find(`exc)[1], 999);
  						self.assertEquals(nEnv.find(`exc).length, 5);
						def nbr := testMsg.count("ServiceA");
						self.assertEquals(nbr,7);
						nbr := testMsg.count("ServiceB");
						self.assertEquals(nbr,5);
						nbr := testMsg.count("ServiceC");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ServiceD");
						self.assertEquals(nbr,0);
						nbr := testMsg.count("ServiceE");
						self.assertEquals(nbr,0);
						nbr := testMsg.count("ExceptionService");
						self.assertEquals(nbr,7);
						resolver.resolve(true);
					} catch: lobby.at.lang.types.Exception using: { |e|
 						resolver.ruin(e);
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def AtestAsyncGroupWithExceptionAndDrop() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), 
  									exceptionsw.exc()@Output(Env.exc), 
  									bsw.b()@Output(Env.b), 
  									timeoutsw.ti()@Output(Env.ti), 
  									csw.c()@Output(Env.c) );
  		def failure := Failure( g_sequence, [ [ ParticipantException(), Drop() ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, dsw.d()@Output(Env.d) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: sequence.start(env) becomes: { |nEnv|
  					try: { 
  						system.println(testMsg.array);
  						self.assertEquals(nEnv.find(`a)[1], 1);
  						self.assertEquals(nEnv.find(`a).length, 5);
  						self.assertEquals(nEnv.find(`b)[1], 2);
  						self.assertEquals(nEnv.find(`b).length, 5);
  						self.assertEquals(nEnv.find(`c)[1], 3);
  						self.assertEquals(nEnv.find(`c).length, 5);
  						self.assertEquals(nEnv.find(`d), 4);
  						self.assertEquals(nEnv.find(`e), nil);
  						self.assertEquals(nEnv.find(`exc)[1], 999);
  						self.assertEquals(nEnv.find(`exc).length, 5);
						def nbr := testMsg.count("ServiceA");
						self.assertEquals(nbr,7);
						nbr := testMsg.count("ServiceB");
						self.assertEquals(nbr,5);
						nbr := testMsg.count("ServiceC");
						self.assertEquals(nbr,5);
						nbr := testMsg.count("ServiceD");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ServiceE");
						self.assertEquals(nbr,0);
						nbr := testMsg.count("ExceptionService");
						self.assertEquals(nbr,7);
						nbr := testMsg.count("TimeoutService");
						self.assertEquals(nbr,5);
						resolver.resolve(true);
					} catch: lobby.at.lang.types.Exception using: { |e|
 						resolver.ruin(e);
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def AtestAsyncGroupWithCombinerOfExceptionAndDrop() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), 
  									exceptionsw.exc()@Output(Env.exc), 
  									bsw.b()@Output(Env.b), 
  									timeoutsw.ti()@Output(Env.ti), 
  									csw.c()@Output(Env.c) );
  		def failure := Failure( g_sequence, [ [ Combiner( { |a, b| a.and: {b} },
  														  [ Times(1, ParticipantException()) ],
  														  `all), 
  												 Drop() ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, dsw.d()@Output(Env.d) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: TimeoutService discovered: { |ts|
  					when: ts<-reset()@FutureMessage becomes: { |tr|
  						when: sequence.start(env) becomes: { |nEnv|
  							try: { 
  								system.println(testMsg.array);
  								self.assertEquals(nEnv.find(`a)[1], 1);
  								self.assertEquals(nEnv.find(`a).length, 5);
  								self.assertEquals(nEnv.find(`b)[1], 2);
  								self.assertEquals(nEnv.find(`b).length, 5);
  								self.assertEquals(nEnv.find(`c)[1], 3);
  								self.assertEquals(nEnv.find(`c).length, 5);
 		 						self.assertEquals(nEnv.find(`d), 4);
  								self.assertEquals(nEnv.find(`e), nil);
  								self.assertEquals(nEnv.find(`exc)[1], 999);
  								self.assertEquals(nEnv.find(`exc).length, 5);
  								self.assertEquals(nEnv.find(`ti).length, 5);
								def nbr := testMsg.count("ServiceA");
								self.assertEquals(nbr,7);
								nbr := testMsg.count("ServiceB");
								self.assertEquals(nbr,5);
								nbr := testMsg.count("ServiceC");
								self.assertEquals(nbr,5);
								nbr := testMsg.count("ServiceD");
								self.assertEquals(nbr,1);
								nbr := testMsg.count("ServiceE");
								self.assertEquals(nbr,0);
								nbr := testMsg.count("ExceptionService");
								self.assertEquals(nbr,7);
								nbr := testMsg.count("TimeoutService");
								self.assertEquals(nbr,4);
								resolver.resolve(true);
							} catch: lobby.at.lang.types.Exception using: { |e|
 								resolver.ruin(e);
 							};
 						};
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def AtestAsyncGroupWithCombinerAndTimeout() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), 
  									bsw.b()@Output(Env.b), 
  									timeoutsw.ti()@Output(Env.ti), 
  									csw.c()@Output(Env.c) );
  		def failure := Failure( g_sequence, [ [ Combiner( { |a, b| a.and: {b} }, 
  												 		 [ Times(1, ParticipantTimeout(10)) ], 
  												 		 `all), 
  											    Drop() ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, dsw.d()@Output(Env.d) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: TimeoutService discovered: { |ts|
  					when: ts<-reset()@FutureMessage becomes: { |tr|
  						when: sequence.start(env) becomes: { |nEnv|
  							try: { 
  								system.println(testMsg.array);
  								self.assertEquals(nEnv.find(`a)[1], 1);
  								self.assertEquals(nEnv.find(`a).length, 4);
  								self.assertEquals(nEnv.find(`b)[1], 2);
  								self.assertEquals(nEnv.find(`b).length, 4);
  								self.assertEquals(nEnv.find(`c)[1], 3);
 		 						self.assertEquals(nEnv.find(`c).length, 4);
  								self.assertEquals(nEnv.find(`d), 4);
  								self.assertEquals(nEnv.find(`e), nil);
  								self.assertEquals(nEnv.find(`exc), nil);
  								self.assertEquals(nEnv.find(`ti)[1], 666);
  								self.assertEquals(nEnv.find(`ti).length, 4);
								def nbr := testMsg.count("ServiceA");
								self.assertEquals(nbr,7);
								nbr := testMsg.count("ServiceB");
								self.assertEquals(nbr,7);
								nbr := testMsg.count("ServiceC");
								self.assertEquals(nbr,4);
								nbr := testMsg.count("ServiceD");
								self.assertEquals(nbr,1);
								nbr := testMsg.count("ServiceE");
								self.assertEquals(nbr,0);
								nbr := testMsg.count("ExceptionService");
								self.assertEquals(nbr,0);
								nbr := testMsg.count("TimeoutService");
								self.assertEquals(nbr,4);
								resolver.resolve(true);
							} catch: lobby.at.lang.types.Exception using: { |e|
 								resolver.ruin(e);
 							};
 						};
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def AtestAsyncGroupWithCombinerOfExceptionAndTimeout() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def g_sequence := Sequence( asw.a(Env.gps)@Output(Env.a), 
  									exceptionsw.exc()@Output(Env.exc), 
  									bsw.b()@Output(Env.b), 
  									timeoutsw.ti()@Output(Env.ti), 
  									csw.c()@Output(Env.c) );
  		def failure := Failure( g_sequence, [ [ Combiner( { |a, b| a.and: {b} }, 
  												 		 [ Times(1, ParticipantException()), 
  												 		   Times(1, ParticipantTimeout(10)) ], 
  												 		 `all), 
  											    Drop() ] ] );
  		def group := SnapshotGroup( Service, `member, failure );
  		def sequence := Sequence( group, dsw.d()@Output(Env.d) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: TimeoutService discovered: { |ts|
  					when: ts<-reset()@FutureMessage becomes: { |tr|
  						when: sequence.start(env) becomes: { |nEnv|
  							try: { 
  								system.println(testMsg.array);
  								self.assertEquals(nEnv.find(`a)[1], 1);
  								self.assertEquals(nEnv.find(`a).length, 4);
  								self.assertEquals(nEnv.find(`b)[1], 2);
  								self.assertEquals(nEnv.find(`b).length, 4);
  								self.assertEquals(nEnv.find(`c)[1], 3);
  								self.assertEquals(nEnv.find(`c).length, 4);
  								self.assertEquals(nEnv.find(`d), 4);
  								self.assertEquals(nEnv.find(`e), nil);
  								self.assertEquals(nEnv.find(`exc)[1], 999);
 		 						self.assertEquals(nEnv.find(`exc).length, 4);
 		 						self.assertEquals(nEnv.find(`ti)[1], 666);
  								self.assertEquals(nEnv.find(`ti).length, 4);
								def nbr := testMsg.count("ServiceA");
								self.assertEquals(nbr,7);
								nbr := testMsg.count("ServiceB");
								self.assertEquals(nbr,5);
								nbr := testMsg.count("ServiceC");
								self.assertEquals(nbr,4);
								nbr := testMsg.count("ServiceD");
								self.assertEquals(nbr,1);
								nbr := testMsg.count("ServiceE");
								self.assertEquals(nbr,0);
								nbr := testMsg.count("ExceptionService");
								self.assertEquals(nbr,7);
								nbr := testMsg.count("TimeoutService");
								self.assertEquals(nbr,4);
								resolver.resolve(true);
							} catch: lobby.at.lang.types.Exception using: { |e|
 								resolver.ruin(e);
 							};
 						};
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	
 	
 	def AtestAsyncGroupFailures() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def group := SnapshotGroup( Service, `member, Env.member.test()@Output(Env.test), amount(2) );
 		def f_sequence := Sequence( group, asw.a(222)@Output(Env.a) );
  		def failure := Failure( f_sequence, [ [ParticipantException(), Component(esw.e()@Output(Env.e)) ] ] );
  		def sequence := Sequence( failure, bsw.b()@Output(Env.b) );
  		def [result, resolver] := makeFuture();
  		when: ExceptionService discovered: { |s| 
  			when: s<-reset()@FutureMessage becomes: { |r|
  				when: sequence.start(env) becomes: { |nEnv|
  					try: { 
  						nEnv.print();
  						system.println(testMsg.array);
  						self.assertEquals(nEnv.find(`a), 1);
  						self.assertEquals(nEnv.find(`b), 2);
  						self.assertEquals(nEnv.find(`c), nil);
  						self.assertEquals(nEnv.find(`d), nil);
  						self.assertEquals(nEnv.find(`e), nil);
  						self.assertEquals(nEnv.find(`exc), nil);
    					self.assertEquals(nEnv.find(`test).length, 2);
						def nbr := testMsg.count("ServiceA");
						self.assertEquals(nbr,2);
						nbr := testMsg.count("ServiceB");
						self.assertEquals(nbr,2);
						nbr := testMsg.count("ServiceC");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ServiceD");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ServiceE");
						self.assertEquals(nbr,1);
						nbr := testMsg.count("ExceptionService");
						self.assertEquals(nbr,0);
						resolver.resolve(true);
					} catch: lobby.at.lang.types.Exception using: { |e|
 						resolver.ruin(e);
 					};
 				};
 			};
		};
    	result;
 	};
 	
 	def testAsyncGroupWithIntensionalDescription() { 
		testMsg.reset();
  		def env := SystemEnvironment.new();
  		env.serviceDB := ServiceDB;
  		env.group := Group();
  		env.insert(`gps, 99);
  		def rule := makeRule( makeTemplate("service", var: `id, var: `name), makeTemplate("function", var: `id, "Intensional") );
  		def group := SnapshotGroup( rule, `member, Env.member.test()@Output(Env.test) );
  		def [result, resolver] := makeFuture();
  		when: group.start(env) becomes: { |nEnv|
  			try: { 
  				nEnv.print();
  				system.println(testMsg.array);
  				self.assertEquals(nEnv.find(`a), nil);
  				self.assertEquals(nEnv.find(`b), nil);
  				self.assertEquals(nEnv.find(`c), nil);
  				self.assertEquals(nEnv.find(`d), nil);
  				self.assertEquals(nEnv.find(`e), nil);
  				self.assertEquals(nEnv.find(`exc), nil);
    			self.assertEquals(nEnv.find(`test).length, 3);
				def nbr := testMsg.count("ServiceA");
				self.assertEquals(nbr,1);
				nbr := testMsg.count("ServiceB");
				self.assertEquals(nbr,1);
				nbr := testMsg.count("ServiceC");
				self.assertEquals(nbr,1);
				nbr := testMsg.count("ServiceD");
				self.assertEquals(nbr,0);
				nbr := testMsg.count("ServiceE");
				self.assertEquals(nbr,0);
				nbr := testMsg.count("ExceptionService");
				self.assertEquals(nbr,0);
				resolver.resolve(true);
			} catch: lobby.at.lang.types.Exception using: { |e|
 				resolver.ruin(e);
 			};
 		};
    	result;
 	};
};



//nowUnitTest.runTest();
