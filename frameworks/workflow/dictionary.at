/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Authors: Soft Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author eline.philips
 */
 
 
def initModule := lobby.frameworks.workflow.WFinit;
import initModule;

 
/**
* A dictionary object which contains key value pairs.
*/
 def Dictionary := object: {
    def dictionary := [];

	/**
	* Insert a key value pair in the dictionary.
	* @param key
	* @param value
	* @param merging: when false inserting a key that is already in the dictionary results in a replacement
	*                 when true, the values are merged in a table
	*/
    def insert(key, value, merging := false) {
        def idx := dictionary.find: { |keyValuePair|  (keyValuePair[1] == key) };
        if: idx == nil then: {
            dictionary := dictionary + [[key, value]];
        } else: {
        	if: merging then: {
        		def oldValue := dictionary.at(idx)[2];
        		def newValue := if: (is: oldValue taggedAs: Table) then: { oldValue + [value]; } else: { [oldValue] + [value]; };
        		dictionary[idx] := [key, newValue]; 
        	} else: {
            	dictionary[idx] := [key, value];
            };
        };
    };
    
    /**
    * Replace the value of a certain key.
    * @param key
    * @param value
    */
    def replace(key, value) {
        def idx := dictionary.find: { |keyValuePair|  (keyValuePair[1] == key) };
        if: idx == nil then: {
            dictionary := dictionary + [[key, value]];
        } else: {
            dictionary[idx] := [key, value];
        };
    };
    
    /**
    * Delete the key-value pair from the dictionary.
	* @param key
    */
    def delete(key) {
        def idx := dictionary.find: { |keyValuePair|  (keyValuePair[1] == key) };
        if: idx != nil then: {
            dictionary[idx] := [];
            dictionary := dictionary.filter: { |e| ! e.isEmpty() };
        };
    };
    
    /**
    * Retrieve the value of a certain key.
    * @param key
    */
    def find(key) {
        def idx := dictionary.find: { |keyValuePair|  (keyValuePair[1] == key) };
        if: idx == nil then: {
            nil;
        } else: {
            dictionary[idx][2];
        };
    };
    
    /**
    * Bind arguments to their corresponding value in the dictionary.
    * @param arguments
    * @output the values of these arguments 
    */
    def bind(arguments) { 
        arguments.map: { |arg| if: (is: arg taggedAs: Variable) then: { 
        							// For Variable Activities (Env.varName) : look up the value in the dictionary
        							find(arg.variable); 
        						} else: { 
        							if: arg.freeVariables.isEmpty() then: {
        								// For instance for numbers : is already a value
        							 	arg;
        							} else: {
        								// For variables (for instance from a block [test of an exclusive choice]) : look up the value in the dictionary
        								find(arg); 
        							};
        						}; };  
    };
    
    /**
    * Check whether the dictionary is empty.
    * @output true when empty, false otherwise
    */
    def isEmpty() {
        dictionary.isEmpty();
    };
    
    /**
    * Insert the values of several dictionaries into the dictionary.
    * @param dictionaries
    * @param merging: when true the values of identicals key are merged in a teble
    *                 when false inserting an identical key results in replacing the value of that key in the dctionary with the new one
    */
    def merge(dictionaries, merging := false) {
        dictionaries.each: { |dict| dict.dictionary.each: { |pair| insert(pair[1], pair[2], merging); }; };
    };
    
    /**
    * Print the dictionary (for debugging purposes).
    */
    def print() {
        system.println(dictionary);
    };
};

 
def dictionaryModule := object: {
    def Dictionary := Dictionary;
};

