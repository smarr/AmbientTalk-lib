def initModule := lobby.frameworks.workflow.WFinit;
import initModule;


deftype TriggerP;

def TriggerPattern := object: {
    def listenerType;
    def selector;
    def params;
    
    def init(serviceWrapper, sel, pars) {  
        listenerType    := createTypeTag(serviceWrapper.tag.typeName.text + "Listener");
        selector            := sel;
        params              := pars;
    };
    
    def makeListener(env, res) {
        def listener := object: { 
            def environment := env; 
            def resolver        := res;
            def parameters  := params;
            def subscription;
        };
        
        (reflect: listener).addMethod(createMethod(selector, `[@values], `{
            1.to: parameters.length do: { | idx | self.environment.insert(self.parameters[idx], values[idx]) };
            self.subscription.cancel();
            self.resolver.resolve(values)
        }, []));
        
        listener
    };
    
    def start(env) {
        def [fut,res] := makeFuture();
        def listener    := makeListener(env, res);

        listener.subscription := export: listener as: listenerType;
        
        fut
    }
} taggedAs: [TriggerP];


