/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, Vrije Universiteit Brussel, 2006 - 2011
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * Two-phase commit in AmbientTalk.
 * Credit in designing this protocol also goes to Mark S. Miller.
 *
 * Two-phase commit is typically used to implement distributed transactions:
 * each local transaction votes "commit" or "abort". A central coordinator
 * collects the votes, and then tells all the participants about the global
 * outcome: "commit" if everyone voted "commit", "abort" otherwise.
 *
 * The protocol implementation is as follows: each participant is sent a
 * "decide" message that returns a future. The participant votes "commit" if
 * it resolves that future, or "abort" if it ruins the future. The "decide"
 * method takes a single argument, also a future, that will be resolved only
 * if _all_ participants voted "commit", and will be ruined if _any_
 * participant voted "abort".
 * 
 * A timeout is used to guard against permanent failures where one or more
 * participants do not submit a vote. In that case, the outcome will be to
 * "abort".
 *
 * The main reason this protocol is so trivial to express in AmbientTalk is
 * because, by default, AmbientTalk provides guaranteed eventual message
 * delivery (the AT VM tries to resend messages until acknowledged). So as
 * long as all participants eventually reconnect, the below code works in the
 * presence of arbitrary network failures. This code does not deal with
 * persistence though, so it cannot deal with device failures.
 *
 * @author Tom Van Cutsem
 */

import /.at.lang.futures;

// equivalent to /.at.lang.futures.group: [futures]
/*
def promiseAllFulfilled(answers) {
  def countDown := answers.length;
  if: (countDown == 0) then: {
    []
  } else: {
    def [result, resolver] := makeFuture();
    def resolutions[countDown] { nil };
    def idx := 0;
    answers.each: { |answer|
      idx := idx + 1;
      def myIdx := idx;
      when: answer becomes: { |value|
        resolutions[myIdx] := value;
        countDown := countDown - 1;
        if: (countDown == 0) then: {
          resolver.resolve(resolutions);
        };
      } catch: { |ex|
        resolver.ruin(ex);
      };
    };
    result;
  }
};
*/

// a particpant votes "commit" by having its 'decide'
// method return a value (any value, just serves as an
// acknowledgement). It votes "abort" by throwing
// an exception.
def makeParticipant(name, decision) {
  actor: { |name, decision|
    import /.at.lang.futures;
    
    def decide(outcomeF) {
      when: outcomeF becomes: { |ack|
        system.println(name + " knows global decision: commit");
      } catch: { |ex|
        system.println(name + " knows global decision: abort");
      };

      system.println(name + " votes: "+decision);      
      if: decision then: {
        "commit"
      } else: {
        /.at.lang.exceptions.error("abort");
      };
    }
  }
};

def twopc(participants, timeout) {
  def [globalF, globalR] := makeFuture();
  def answersF :=
    group: participants.map: { |p| p<-decide(globalF)@Due(timeout) };
  globalR.resolve(answersF);
  globalF;
};

def alice := makeParticipant("Alice", true);
def bob := makeParticipant("Bob", true);
def outcome := twopc([alice, bob], 10.seconds);