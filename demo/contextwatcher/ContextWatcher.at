/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * A 'context-sensitive' buddy list, loosely based on the ContextWatcher application
 * http://portals.telin.nl/contextwatcher/ContextWatcher.html
 *
 * The context-sensitiveness is currently nothing more than a simple status line
 * below each user's name. System components like a GPS logger could update this
 * status line with the user's current location, or they could be used to
 * display e.g. the song they're currently listening to. Users can also start
 * votes and collect the results of a vote.
 *
 * @author tvcutsem
 */

import /.at.lang.futures exclude seconds, minutes, millisec;
import /.at.support.timer;
enableFutures(false);

def RESPONSE_TIME := seconds(10);
def VOTE_TIME := seconds(20);

// interface from ContextWatcher to GUI
/*def GUI := object: {
	def flagDiscovered(name, status);
	def flagOffline(name);
	def flagOnline(name);
	def showTextMessage(from, msg);
	def notifySent(to,text);
	def updateStatus(clientName, status);
	def showVoteResults(receivedVotes);
	def askVote(from, choices); => vote
};*/

deftype ContextWatcherClient;

def makeContextWatcher(GUI,nickname) {
	def gui;
	
	def buddyList := jlobby.java.util.HashMap.new();
	def buddyList.each: clo {
		def keyit := buddyList.keySet().iterator();
		def valit := buddyList.values().iterator();
		while: { keyit.hasNext() } do: {
			clo(keyit.next(), valit.next());
		};
	};
	
	def status := "";
	def online := true;
	
	// interface from GUI to ContextWatcher
	def localInterface := object: {
		
		def changeStatus(newstatus) {
			status := newstatus;
			buddyList.each: { |name,buddy|
				// this message should have an expiration deadline, but
				// this is not possible to express in standard AT
				buddy<-notifyStatusChanged(nickname, newstatus)@[OneWayMessage];
			}
		};
		
		def toggleOnline() {
			online.ifTrue: { network.offline } ifFalse: { network.online };
			online := !online;
		};
		
		def sendMessage(receivers, text) {
			receivers.each: { |to|
				def buddy := buddyList.get(to);
				when: buddy<-receiveMessage(nickname, text)@FutureMessage becomes: { |ack|
					gui<-notifySent(to,text);
				}
			};
		};
		
		def vote(poll) {
			def receivedVotes := [];
			
			def retrieveVote(name, buddy, timeLeft) {
				when: buddy<-getVote(nickname, poll)@[FutureMessage,Due(timeLeft)] becomes: { |vote|
					receivedVotes := receivedVotes + [name + " -> " + vote];
				}
			};
			
			buddyList.each: { |name,buddy|
				retrieveVote(name, buddy, VOTE_TIME);
			};
			
			def startOfVote := now();
			
			// necessary in order to ensure that every subsequently discovered
			// buddy also receives the vote
			def tempdiscovery := whenever: ContextWatcherClient discovered: { |newClient|
				when: (newClient<-getInfo()@FutureMessage) becomes: { |reply|
					def [name,status] := reply;
					if: !buddyList.containsKey(name) then: {
						retrieveVote(name, newClient, VOTE_TIME - (now() - startOfVote));
					}
				}
			};
			
			when: VOTE_TIME elapsed: {
				tempdiscovery.cancel();
				gui<-showVoteResults(poll, print: receivedVotes);
			};
		};
	};
	
	// interface from ContextWatcher to ContextWatcher
	def remoteInterface := object: {
		def getInfo() { [nickname, status] };
		def receiveMessage(from, msg) {
			gui<-showTextMessage(from, msg);
			"ok"; // acknowledge receipt
		};
		def notifyStatusChanged(from, status) {
			gui<-updateStatus(from, status);
		};
		def getVote(from, choices) {
			gui.askVote(from, choices);
		};
	};
	
	export: remoteInterface as: ContextWatcherClient;
	
	whenever: ContextWatcherClient discovered: { |client|
		when: client<-getInfo()@[FutureMessage,Due(RESPONSE_TIME)] becomes: { |reply|
			def [buddyname, buddystatus] := reply;
		  if: !buddyList.containsKey(buddyname) then: {
				buddyList.put(buddyname, client);
			  gui<-flagDiscovered(buddyname, buddystatus);
				whenever: client disconnected: {
				  gui<-flagOffline(buddyname);
				};
				whenever: client reconnected: {
					gui<-flagOnline(buddyname);
				};
		  }
		};
	};
	
	gui := GUI.new(localInterface, nickname);
	
	localInterface;
};

network.online;
def cw := makeContextWatcher(jlobby.demo.contextwatcher.CWGUI, "Tom"+now());