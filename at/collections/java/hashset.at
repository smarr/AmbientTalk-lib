/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def HashSet := object: {

	def hs := nil;

	def each: clo {
		def it := hs.iterator();
		while: { it.hasNext() } do: {
			clo(it.next());
		};
	};
	
	def map: clo {
		def collect := [];
		def it := hs.iterator();
		while: { it.hasNext() } do: {
			collect := collect + [clo(it.next())];
		};
		collect;
	};
	
	def first() {
		def it := hs.iterator();
		if: it.hasNext() then: {
			it.next();
		} else: {
			nil;
		};
	};
	
	def to_array() {
		map: { |x| x }
	};
	
	def add(o) {
		hs.add(o);
	};
	
	def clear() {
		hs.clear();
	};
	
	def contains(o) {
		hs.contains(o);
	};
	
	def isEmpty() {
		hs.isEmpty();
	};
	
	def notEmpty() {
		!isEmpty();
	};
	
	def remove(o) {
		hs.remove(o);
	};
	
	def clone() {
		Set.new(hs.clone());
	};
	
	def clone_internal() {
		hs.clone();
	};

	def size() {
		hs.size;
	};

	def init(ihs := jlobby.java.util.HashSet.new()) {
		hs := ihs;
	};
};

self;