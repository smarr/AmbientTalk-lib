/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Provides unittests for AT wrapper for java.util.HashMap
 *
 */

import ~.<<.hashmap;
import ~.traits.util;

def HashMapTestModule := object: {


	def HashMapTest := extend: /.at.unit.test.UnitTest.new("HashMapTest") with: {
	
		def [a, b, c] := [nil, nil, nil];
		
		def setUp() {
			def vt[3] { HashMap.new() };
			[a, b, c] := vt;
		};
		
		def tearDown() {
			[a, b, c].each: { |v| v.clear() };
		};
		
		def testAtPut() {
			def r := a.atPut("ftytwo", 42);
			self.assertEquals(r, 42);
			a["ftythree"] := 43;
			self.assertTrue(a.containsKey("ftytwo"));
			self.assertTrue(a.containsKey("ftythree"));
			self.assertTrue(a.containsValue(42));
			self.assertTrue(a.containsValue(43));
			self.assertEquals(a["ftytwo"], 42);
		};
		
		def testAt() {
			def r := a.atPut("ftytwo", 42);
			self.assertEquals(a.at("ftytwo"), 42);
			self.assertEquals(a["ftytwo"], 42);
		};
		
		def testEach() {
			def kt := [];
			def vt := [];
			def st := [];
			[1,2,3,4,5,6,7,8,9].each: { |n|
				a[n] := 10-n;
			};
			a.each: { |k, v|
				kt := kt + [k];
				vt := vt + [v];
				st := st + [k+v];
			};
			self.assertTrue(sameElements(kt, [1,2,3,4,5,6,7,8,9]));
			self.assertTrue(sameElements(vt, [1,2,3,4,5,6,7,8,9]));
			def cst[9] { 10 };
			self.assertTrue(sameElements(st, cst));
		};
		
		def testEachKey() {
			def kt := [];
			[1,2,3,4,5,6,7,8,9].each: { |n|
				a[n] := 10-n;
			};
			a.eachKey: { |k|
				kt := kt + [k];
			};
			self.assertTrue(sameElements(kt, [1,2,3,4,5,6,7,8,9]));
		};
		
		def testToTable() {
			def t := [[1,2], [3,4], [5,6]];
			a.putAll(t);
			def rt := a.toTable();
			self.assertEquals(rt.length(), 3);
			self.assertTrue(sameElementsInOrder([2,2,2], rt.map: { |e| e.length() }));
		};
		
		def testLiteral() {
			def o := object: {};
			def t := [[1,2], [3,4], [5,6], ["k" + "ey", o]];
			a.addFromTable(t);
			b := HashMap: {1=>2;3=>4;5=>6;("k" + "ey") => o};
			self.assertEquals(a[1], b[1]);
			self.assertEquals(a[3], b[3]);
			self.assertEquals(a[5], b[5]);
			self.assertEquals(a["key"], b["key"]);
		};
		
	
	};

};

HashMapTestModule;