/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Provides unittests for AT wrapper for java.util.LinkedList
 *
 */



import ~.<<.linkedlist;
import ~.traits.util;


def LinkedListTestModule := object: {


	def LinkedListTest := extend: /.at.unit.test.UnitTest.new("LinkedListTest") with: {
	
		def [a, b, c] := [nil, nil, nil];
		
		def setUp() {
			def vt[3] { LinkedList.new() };
			[a, b, c] := vt;
		};
		
		def tearDown() {
			[a, b, c].each: { |v| v.clear() };
		};
		
		def testGetFirst() {
			a.addAll([1,2,3,4]);
			self.assertEquals(a.getFirst(), 1);
		};
		
		def testGetLast() {
			a.addAll([1,2,3,4]);
			self.assertEquals(a.getLast(), 4);
		};
		
		def testRemoveFirst() {
			a.addAll([1,2,3,4]);
			def r := a.removeFirst();
			self.assertEquals(r, 1);
			self.assertEquals(a.getFirst(), 2);
			self.assertEquals(a.size(), 3);
		};
		
		def testRemoveLast() {
			a.addAll([1,2,3,4]);
			def r := a.removeLast();
			self.assertEquals(r, 4);
			self.assertEquals(a.getLast(), 3);
			self.assertEquals(a.size(), 3);
		};
		
		def testAddFirst() {
			a.addAll([1,2,3,4]);
			a.addFirst(42);
			self.assertEquals(a.getFirst(), 42);
			self.assertEquals(a.size(), 5);
		};
		
		def testAddLast() {
			a.addAll([1,2,3,4]);
			a.addLast(42);
			self.assertEquals(a.getLast(), 42);
			self.assertEquals(a.size(), 5);
		};

	
	};

};

LinkedListTestModule;