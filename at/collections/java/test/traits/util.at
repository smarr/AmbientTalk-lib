/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Provides utility functions used in unittests
 *
 */

// element per element comparison
def sameElementsInOrder(t1, t2) {
	{ |return|
		def i := 1;
		t1.each: { |e|
			if: !(e == t2[i]) then: {
				return(false);
			};
			i := i + 1;
		};
		return(true);
	}.escape();
};

// checks if two tables contain the same
// elements, possibly in a different order
def sameElements(t1, t2) {
	{ |return|
		def foundMatch := false;
		def keep;
		t1.each: { |e1|
			foundMatch := false;
			t2 := t2.filter: { |e2|
				// filter out first occurence
				if: (e1 == e2) then: {
					// found match
					if: foundMatch then: {
						// not first occurence
						true;
					} else: {
						foundMatch := true;
						false;
					};
				} else: {
					true;
				};
			};
			if: !foundMatch then: { return(false) };
		};
		return(t2.isEmpty());
	}.escape();
};

self;
