/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Provides unittests for AT wrapper trait for java.util.List
 *
 */

import ~.<<.<<.linkedlist;
import ~.util;

def ListTestModule := object: {

	def ListTest := extend: /.at.unit.test.UnitTest.new("ListTest") with: {
	
		def [a, b, c, d, e] := [nil, nil, nil, nil, nil];
		
		def setUp() {
			def vt[5] { LinkedList.new() };
			[a, b, c, d, e] := vt;
		};
		
		def tearDown() {
			[a, b, c, d, e].each: { |v| v.clear() };
		};
			
		def testGet() {
			a.addAll([42,43,44]);
			self.assertEquals(a.get(1), 43);
		};
		
		def testSet() {
			a.addAll([42,43,44]);
			self.assertEquals(a.set(1, 69), 43);
			self.assertEquals(a.get(1), 69);
			self.assertEquals(a.size(), 3);
		};
		
		def testAddAt() {
			a.addAll([2,3,4]);
			a.addAt(1, 42);
			self.assertEquals(a.get(1), 42);
			self.assertEquals(a.size(), 4);
		};
		
		def testRemoveAt() {
			a.addAll([42,43,44,45]);
			self.assertEquals(a.removeAt(2), 44);
			self.assertEquals(a.size(), 3);
		};
		
		def testIndexOf() {
			a.addAll([2,3,42,4,5,42,6,7]);
			self.assertEquals(a.indexOf(42), 2);
		};
		
		def testLastIndexOf() {
			a.addAll([2,3,42,4,5,42,6,7]);
			self.assertEquals(a.lastIndexOf(42), 5);
		};
		
		def testListIterator() {
			a.addAll(["a", "b", "c", "d", "e"]);
			def lit := a.listIterator();
			lit.next();
			lit.next();
			self.assertEquals(lit.next(), "c");
		};
		
		def testListIteratorAt() {
			a.addAll(["a", "b", "c", "d", "e"]);
			def lit := a.listIteratorAt(2);
			lit.next();
			self.assertEquals(lit.next(), "d");
		};
		
		def testSubList() {
			a.addAll([2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
			def t := [5,6,7,8,9,10];
			def sl := a.subList(3, 9);
			self.assertTrue(sameElementsInOrder(t, sl.toTable()));
		};
		
		
	};
	
};

ListTestModule;
