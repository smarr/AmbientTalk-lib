/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * wrapper for Java Vector
 * serializable using asCode:
 */

def VectorMirror := mirror: {
	
	def asCode() {
		def elements := asCode: (self.base.toTable());
		def source := "{ def v := Vector.new() ; ";
		source := source + "def elements := " + elements + "; ";
		source := source + "v.addFromTable(elements); v }()";
		source;
	};
	
};

def Vector := object: {

	def vc := nil;

	def each: clo {
		def it := vc.iterator();
		while: { it.hasNext() } do: {
			clo(it.next());
		};
	};

	
	def add(o) {
		vc.add(o);
	};
	
	def elementAt(i) {
		vc.elementAt(i);
	};
	
	def removeElementAt(i) {
		vc.removeElementAt(i);
	};
	
	def add_at(i, o) {
		vc.add(i, o);
	};

	def get(i) {
		vc.get(i);
	};
	
	def at(i) {
		vc.get(i);
	};
	
	def set(i, o) {
		vc.set(i, o);
	};

	def clear() {
		vc.clear();
	};
	
	def contains(o) {
		vc.contains(o);
	};
	
	def index_of(o) {
		vc.indexOf(o);
	};
	
	def isEmpty() {
		vc.isEmpty();
	};
	
	def notEmpty() {
		!vc.isEmpty();
	};
	
	def first() {
		vc.firstElement() ;
	};
	
	def remove(o) {
		vc.removeElement(o);
	};
	
	def remove_at(i) {
		vc.removeElementAt(i);
	};
	
	def clone() {
		Vector.new(vc.clone());
	};
	
	def remove_all(coll) {
		vc.removeAll(coll.clone_internal());
	};
	
	def retain_all(coll) {
		vc.retainAll(coll.clone_internal());
	};
	
	def clone_internal() {
		vc.clone();
	};

	def size() {
		vc.size;
	};

	def init(ivc := jlobby.java.util.Vector.new()) {
		vc := ivc;
	};
	
	def addFromTable(t) {
		t.each: { |e|
			self.add(e);
		};
	};
	
	def toTable() {
		def t := [];
		self.each: {|e|
			t := t + [e];
		};
		t;
	};
	
} mirroredBy: VectorMirror;

self;