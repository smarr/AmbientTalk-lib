/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * AmbientTalk wrapper for java.util.Vector
 * supports interface of java.util.Vector
 * supports interface of AmbientTalk table
 * supports (de)serialization using asCode: and fromCode:
 *
 */

import ~.traits.list;
import ~.traits.table;

def JVector := jlobby.java.util.Vector;

def VectorModule := object: {

	deftype VectorT;
	
	def VectorMirror := mirror: {
		
		def print() {
			"<vector:" + (print: self.base.toTable()) + ">";
		};

		
		def asCode() {
			def elements := asCode: (self.base.toTable());
			"{ def elements := " + elements + " ; Vector.new(elements) }()";
		};
		
	};
	
	def Vector := object: {
	
		def type := VectorT;
		
		// wrapped java vector
		def jvector := JVector.new();
		
		// initialization
		def init(collection := []) { 
			// a collection that supports .each: {|e| ... }
			self.jvector := JVector.new();
			collection.each: { |e| self.add(e) };
			self;
		};
		
		def getList() {
			self.jvector;
		};
		
		def setList(list) {
			self.jvector := list;
		};
		
		import ListTrait;
		import TableListTrait;
		
		// java vector interface
		
		def addElement(object) {
			self.add(object); // returns bool instead of void
		};
		
		def capacity() {
			self.jvector.capacity;
		};
	
		def clone() {
			def vectorclone := Vector.new();
			vectorclone.addAll(self);
			vectorclone;
		};
		
		def copyInto(table) {
			def index := 0;
			self.each: { |e|
				index := index + 1;
				table[index] := e;
			};
			table; // returns table instead of void
		};
		
		def elementAt(index) {
			self.jvector.elementAt(index);
		};
		
		def elements() {
			createEnumerationWith(self.jvector.elements());
		};
		
		def ensureCapacity(minCapacity) {
			self.jvector.ensureCapacity(minCapacity);
		};
	
		def firstElement() {
			self.elementAt(0);
		};
		
		def indexOfFrom(object, index) {
			self.jvector.indexOf(object, index);
		};
		
		def insertElementAt(object, index) {
			self.addAt(index, object); // return bool instead of void
		};
		
		def lastElement() {
			self.jvector.lastElement();
		};
		
		def lastIndexOfBefore(object, index) {
			self.jvector.lastIndexOf(object, index);
		};
	
		def removeAllElements() {
			self.jvector.removeAllElements();
		};
		
		def removeElement(object) {
			self.jvector.removeElement(object);
		};
		
		def removeElementAt(index) {
			self.removeAt(index); // returns removed obj instead of void
		};
		
		def setElementAt(object, index) {
			self.jvector.setElementAt(object, index);
		};
		
		def setSize(newSize) {
			self.jvector.setSize(newSize);
		};
		
		def trimToSize() {
			self.jvector.trimToSize();
		};

		
	} taggedAs: [VectorT] mirroredBy: VectorMirror;
	
	deftype EnumerationT;
	
	def createEnumerationWith(javaEnum) {
		object: {
			def enum := javaEnum;
			
			def hasMoreElements() {
				self.enum.hasMoreElements();
			};
			
			def nextElement() {
				self.enum.nextElement()
			};
			
			def each: clo {
				while: { self.hasMoreElements() } do: {
					clo(self.nextElement());
				};
			};
			
		} taggedAs: [EnumerationT] mirroredBy: { |base|
			extend: defaultMirror.new(base) with: {
				def print() {
					"<enumeration:" + (print: self.base.toTable()) + ">";
				};
			};
		};
	};

};

VectorModule;