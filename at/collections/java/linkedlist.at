/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * AmbientTalk wrapper for java.util.LinkedList
 * supports interface of java.util.LinkedList
 * supports interface of AmbientTalk table
 * supports (de)serialization using asCode: and fromCode:
 *
 */

import ~.traits.list;
import ~.traits.table;

def JLinkedList := jlobby.java.util.LinkedList;

def LinkedListModule := object: {
	
	def LinkedListMirror := mirror: {
		
		def print() {
			"<linkedlist:" + (print: self.base.toTable()) + ">";
		};
		
		def asCode() {
			def elements := asCode: (self.base.toTable());
			"{ def elements := " + elements + " ; LinkedList.new(elements) }()";
		};
		
	};
	
	def LinkedList := object: {
		
		// wrapped java vector
		def jll := JLinkedList.new();
		
		// initialization
		def init(collection := []) { 
			// a collection that supports .each: {|e| ... }
			self.jll := JLinkedList.new();
			collection.each: { |e| self.add(e) };
			self;
		};
		
		def getList() {
			self.jll;
		};
		
		def setList(list) {
			self.jll := list;
		};
		
		import ListTrait;
		import TableListTrait;
		
		// java linkedlist interface
		
		def getFirst() {
			self.jll.getFirst();
		};
		
		def getLast() {
			self.jll.getLast();
		};
		
		def removeFirst() {
			self.jll.removeFirst();
		};
		
		def removeLast() {
			self.jll.removeLast();
		};
		
		def addFirst(object) {
			self.jll.addFirst(object);
		};
		
		def addLast(object) {
			self.jll.addLast(object);
		};
		
	} mirroredBy: LinkedListMirror;

};

LinkedListModule;