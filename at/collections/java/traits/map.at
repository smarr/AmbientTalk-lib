/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * AmbientTalk wrapper trait for java.util.Map
 * this trait requires a getMap() and setMap() method
 * getMap() should return an object implementing the java.util.Map Interface
 *
 */

import /.at.lang.types;
import ~.collection;
import ~.list;

def MapTraitModule := object: {

	def MapTrait := object: {

		def getMap() @Required;
		def setMap() @Required;
	
		def clear() {
			self.getMap().clear();
		};
		
		def containsKey(key) {
			self.getMap().containsKey(key);
		};
		
		def containsValue(val) {
			self.getMap().containsValue(val);
		};
		
		def entrySet() {
			createCollectionWith(self.getMap().entrySet());
		};
		
		def get(key) {
			self.getMap().get(key);
		};
		
		def isEmpty() {
			self.getMap().isEmpty();
		};
		
		def keySet() {
			createCollectionWith(self.getMap().keySet());
		};
		
		def put(key, val) {
			self.getMap().put(key, val);
		};
		
		def putAll(map) {
			if: (is: map taggedAs: /.at.lang.types.Table) then: {
				map.each: { |pair|
					self.put(pair[1], pair[2]);
				};
			} else: {
				def keyIt := map.keySet().iterator();
				def valIt := map.values().iterator();
				while: { keyIt.hasNext() } do: {
					self.put(keyIt.next(), valIt.next());
				};
			};
			nil;
		};
		
		def remove(key) {
			self.getMap().remove(key);
		};
		
		def size() {
			self.getMap().size();
		};
		
		def values() {
			createCollectionWith(self.getMap().values());
		};
	
	};
	
	def createMapWith(javaMap) {
		object: {
			def jmap := javaMap;
			def getMap()  { self.jmap };
			def setMap(m) { self.jmap := m };
			import MapTrait;
		} mirroredBy: { |base|
			extend: defaultMirror.new(base) with: {
				def print() {
					"<map:{" + (self.base.toTable().map: { |entry|
						(print: entry[1]) + "=>" + (print: entry[2]);
					}).join(", ") + "}>";
				};
			};
		};
	};

};

MapTraitModule;