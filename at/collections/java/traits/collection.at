/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * AmbientTalk wrapper trait for java.util.Collection
 * this trait requires a getCollection() and setCollection() method
 * getCollection() should return an object implementing the java.util.Collection Interface
 *
 */

import /.at.lang.types;
import ~.table;

def CollectionTraitModule := object: {

	deftype CollectionT;

	def CollectionTrait := isolate: {
			
		def getCollection() @Required;
		def setCollection() @Required;
	
		def add(object) {
			self.getCollection().add(object);
		};
		
		def addAll(collection) {
			def changed := false;
			collection.each: { |e|
				changed := (self.add(e)).or: { changed };
			};
			changed;
		};
		
		def clear() {
			self.getCollection().clear();
		};
		
		def contains(object) {
			self.getCollection().contains(object);
		};
		
		def containsAll(collection) {
			collection.inject: true into: { |total, next| 
				total.and: { self.contains(next) };
			};
		};
		
		def equals(other) {
			self == other;
		};
		
		def hashCode() {
			self.getCollection().hashCode();
		};
		
		def isEmpty() {
			self.getCollection().isEmpty();
		};
		
		def iterator() {
			self.getCollection().iterator();
		};
		
		def remove(object) {
			def remove := self.getCollection().&remove;
			try: {
				remove.cast(jlobby.java.lang.Object)(object);
			} catch: /.at.lang.types.SelectorNotFound using: { |e|
				self.getCollection().remove(object);
			};
		};
		
		def removeAll(collection) {
			def changed := false;
			collection.each: { |e|
				changed := (self.remove(e)).or: { changed };
			};
			changed;
		};
		
		def retainAll(collection) {
			def copy := self.new(collection);
			self.getCollection().retainAll(copy);
		};
		
		def size() {
			self.getCollection().size();
		};
		
		def toTable() {
			def result := [];
			def it := self.iterator();
			while: { it.hasNext() } do: {
				result := result + [it.next()];
			};
			result;
		};
		
		def asTable() {
			self.toTable();
		};
		
	};
	
	def CollectionMirror := mirror: {
		def print() {
			"<collection:" + (print: self.base.toTable()) + ">";
		};
	};
	
	def createCollectionWith(javaCollection) {
		isolate: {
			def jcollection := javaCollection;
			def getCollection()  { self.jcollection };
			def setCollection(c) { self.jcollection := c };
			import CollectionTrait;
			import TableTrait;
		} taggedAs: [CollectionT] mirroredBy: CollectionMirror
	};

};

CollectionTraitModule;