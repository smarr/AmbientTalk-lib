/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * AmbientTalk trait for a table
 * TableTrait expects interface of java.util.Collection
 * TableListTrait expects interface of java.util.Collection and java.util.List
 *
 */

import /.at.lang.types;

def TableTraitModule := object: {

	deftype TableT;
	deftype TableListT;

	def TableTrait := isolate: {

		def toTable() @Required;
		def size() @Required;
		def add() @Required;
		def addAll() @Required;
		def iterator() @Required;
		def contains() @Required;
	
		def +(other) {
			def result := self.new(self);
			result.addAll(other);
			result;
		};
	
		def each: clo {
			def it := self.iterator();
			while: { it.hasNext() } do: {
				clo(it.next());
			};
		};
		
		def filter: clo {
			def result := self.new();
			self.each: { |e|
				if: clo(e) then: {
					result.add(e);
				};
			};
			result;
		};
		
		def inject: init into: clo {
			def acc := init;
			self.each: { |e|
				acc := clo(acc, e);
			};
			acc;
		};
		
		def length() {
			self.size();
		};
		
		def map: clo {
			def result := self.new();
			self.each: { |e|
				result.add(clo(e));
			};
			result;
		};
		
	};
	
	def TableListTrait := isolate: {
		
		def get() @Required;
		def set() @Required;
		def subList() @Required;
		
		import TableTrait;
		
		def at(index) {
			self.get(index);
		};
		
		def atPut(index, object) {
			self.set(index, object);
			object;
		};
		
		def eachWithIndex: clo {
			def index := 0;
			def it := self.iterator();
			while: { it.hasNext() } do: {
				clo(it.next(), index);
				index := index + 1;
			};
		};
		
		def find: clo {
			{ |return|
				self.eachWithIndex: { |e, i|
					if: clo(e) then: {
						return(i);
					};
				};
				return(nil);
			}.escape();
		};
		
		def implode() {
			self.toTable().implode();
		};
		
		def join(sep) {
			self.toTable().join(sep);
		};
			
		def select(start, stop) {
			def result := self.new(self.subList(start, stop));
		};
		
	};

};

TableTraitModule;