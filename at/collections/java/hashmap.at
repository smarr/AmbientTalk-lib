/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * when manually using the Java hashmaps
 * we need to define .each for each instance
 * and when the hashmap is overwritten
 * the .each method is gone
 * this wrapper does away with that problem
 */
def HashMap := object: {

	def hm := nil;

	def each: clo {
		def keyit := hm.keySet().iterator();
		def valit := hm.values().iterator();
		while: { keyit.hasNext() } do: {
			clo(keyit.next(), valit.next());
		};
	};
	
	def put_soft(k, v) {
		if: (nil == hm.get(k)) then: {
			hm.put(k, v);
		};
	};

	def put(k, v) {
		hm.put(k, v);
	};

	def get(k) {
		hm.get(k);
	};
	
	def remove(k) {
		if: (!(nil == hm.get(k))) then: {
			hm.remove(k);
		};
	};
	
	def clone() {
		HashMap.new(hm.clone());
	};
	
	def clone_internal() {
		hm.clone();
	};

	def size() {
		hm.size;
	};

	def contains(k) {
		(!(nil == hm.get(k)));
	};
	
	def printme() {
	    system.println("{");
	    self.each: {|key, val|
	        system.println("  " + (print: key) + " -> " + (print: val));
        };
        system.println("}");
	};

	def init(ihm := jlobby.java.util.HashMap.new()) {
		hm := ihm;
	};
};

self;