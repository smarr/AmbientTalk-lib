/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* Implementation of a small vector class (cfr. java.util.Vector)
 * with abundant higher-order methods. A unit test is included.
 * @author tvcutsem
 */
def DEFAULTCAPACITY := 10;
def DEFAULTCOMPARATOR := {|e1,e2| e1 == e2};

def XIndexOutOfBounds := /.at.lang.exceptions.XIndexOutOfBounds;
deftype StackUnderflow <: /.at.lang.types.Exception;
def XStackUnderflow := /.at.lang.exceptions.createException(StackUnderflow).new("Cannot pop empty stack");

deftype EmptyVector <: /.at.lang.types.Exception;
def XEmptyVector := /.at.lang.exceptions.createException(EmptyVector).new("Cannot pick element from empty vector");

def VectorPrototype := object: {
	
  // the next free position in the vector
	def free := 1;
	
	// the vector its state represented as a table
	def elements[DEFAULTCAPACITY] { nil };
	
	// the default comparator for elements
	def comparator := DEFAULTCOMPARATOR;
	
	def init(cap := DEFAULTCAPACITY, comp := DEFAULTCOMPARATOR) {
		def newelts[cap] { nil };
		elements := newelts;
		free := 1;
		comparator := comp;
	};
	
	def newFromTable(tbl, cmp := DEFAULTCOMPARATOR) {
		def newVec := super^new(tbl.length, cmp);
		1.to: tbl.length do: { |i|
			newVec.add(tbl[i]);
		};
		newVec;
	};
	
	def grow() {
		def newelements[elements.length * 2] { nil };
		1.to: free do: { |i| newelements[i] := elements[i] };
		elements := newelements;
	};
	
	def growIfNecessary() {
		do: { grow() } if: self.atMaxCapacity();
	};
	
	def checkBounds(min, max, idx) {
		if: ((idx < min).or: { idx > max }) then: {
			raise: XIndexOutOfBounds.new(min, max, idx);
		}
	};
	
	// public interface
	
	def length() { free - 1 };
	def isEmpty() { free == 1 };
	def atMaxCapacity() { free > elements.length };
	
	def at(idx) {
		checkBounds(1,free-1,idx);
		elements[idx];
	};
	
	def atPut(idx, val) {
		checkBounds(1,free-1,idx);
		elements[idx] := val;
	};

	def each: iterator {
		1.to: free do: { |i| iterator(elements[i]) };
		self
	};
	
	def eachWithIndex: iterator {
		1.to: free do: { |i| iterator(i, elements[i]) };
		self
	};
	
	def map: fun {
		def cloned := self.new(elements.length, comparator);
		cloned.free := free;
		1.to: free do: { |i| cloned.atPut(i, fun(elements[i])) };
        cloned
	};
	
	def inject: init into: accum {
		def result := init;
		1.to: free do: { |i| result := accum(result, elements[i]) };
		result
	};
	
	def filter: cond {
		def newvec := self.new(elements.length, comparator);
		self.each: { |v|
			do: { newvec.add(v) } if: cond(v);
		};
		newvec;
	};
	
	def contains(elt, cmp := comparator) {
		{ |return|
		  self.each: { |e| if: cmp(elt, e) then: { return(true) } };
		  false
		}.escape()
	};
	
	def implode() {
		elements.select(1,free).implode()
	};
	
	def join(txt) {
		elements.select(1,free).join(txt)
	};

  def select(start, stop) {
	  checkBounds(1,stop,start);
	  checkBounds(start,free,stop);
	  elements.select(start, stop);
  };

  // appends an element to the back of the vector
  // returns the vector itself
  def add(element) {
	  self.growIfNecessary();
		elements[free] := element;
		free := free + 1;
		self
  };

  def <<(element) { self.add(element) };
  
  // insert an element at a given position
  // causes subsequent elements to shift one pos to the right
  // returns this vector
  def insert(atPos, element) {
	  checkBounds(1,free,atPos);
		self.growIfNecessary();
		free.to: atPos do: {|i|
			elements[i] := elements[i-1]
		};
		elements[atPos] := element;
		free := free+1;
		self
  };

  // delete the element at the given position
  // shifts all following elements one pos to the left
  // returns the value of the element at the deleted position
  def delete(atPos) {
	  checkBounds(1,free-1,atPos);
		def tmp := elements[atPos];
		atPos.to: (free-1) do: { |i|
			elements[i] := elements[i+1]
		};
		free := free - 1;
		tmp
  };

    // push adds elements to the back of the vector
    def push(element) { add(element) };
    
    // pop deletes elements from the back of the vector
    def pop() {
	  if: (self.isEmpty()) then: { raise: XStackUnderflow };
	  delete(free-1);
	};
	
	// return the index of the first matching element, or nil if none is found
	def find: filter {
		def idx := 1;
		{ |return|
			while: { idx < free } do: {
			  if: filter(elements[idx]) then: {
				  return(idx);
			  } else: {
				  idx := idx + 1;
			  };
		  };
		  nil; // if not found, return nil
		}.escape()
	};
	
	def indexOf(elt, cmp := comparator) {
		find: { |e| cmp(elt,e) };
	};
	
	// remove the given element from the vector, return true if the element
	// was actually found and deleted, false otherwise
	def remove(elt, cmp := comparator) {
		def idx := indexOf(elt, cmp);
		if: !(nil == idx) then: {
			self.delete(idx);
			true;
		} else: {
			false;
		}
	};
	
	// remove all objects for which filter(elt) returns true
	def removeAll: filter {
		if: !(self.isEmpty()) then: {
			def visitElementAt(pos) {
			  if: (pos < free) then: {
				  if: filter(elements[pos]) then: {
			      self.delete(pos);
			      visitElementAt(pos)
				  } else: {
					  visitElementAt(pos+1)
				  }
				}
		  };
		  visitElementAt(1);
		};
		self;
	};
	
	// destructively appends otherVector to self
	// returns this vector
	def addAll(otherVector) {
		otherVector.each: { |elt| self.add(elt) };
		self;
	};
	
	// empties the vector
	def clear() {
		free := 1;
	};
	
	def union(otherVector, cmp := comparator) {
		def theUnion := self.new(elements.length, comparator);
		theUnion.addAll(self); // copy elements from this vector into union
		otherVector.each: { |elt|
			do: { theUnion.add(elt) } unless: self.contains(elt, cmp);
		};
		theUnion;
	};
	
	def intersection(otherVector, cmp := comparator) {
		def theIntersection := self.new(elements.length, comparator);
		self.each: { |elt|
		  if: (otherVector.contains(elt, cmp)) then: {
			  theIntersection.add(elt)
		  };
		};
		theIntersection;
	};
	
	def difference(otherVector, cmp := comparator) {
		def theDifference := self.new(elements.length, comparator);
		self.each: { |elt|
			do: { theDifference.add(elt) } unless: otherVector.contains(elt, cmp);
		};
		theDifference;
	};
	
	// comparator defines the ordering among elements
	def sort(cmp := { |e1,e2| e1 < e2 }) {
		def quickSort(table, low, high) {
	    def left := low;
	    def right := high;
	    def pivot := table[(left+right) /- 2];
	    def save := nil;
	    while: { left <= right } do: {
		    while: { cmp(table[left], pivot) } do: { left := left + 1 };
		    while: { cmp(pivot, table[right]) } do: { right := right - 1 };
		    if: (left <= right) then: {
			    // swap elements
			    save := table[left];
					table[left] := table[right];
					table[right] := save;
					left := left + 1;
					right := right - 1;
		    };
	   };
	   if: (low<right) then: { quickSort(table,low,right) };
	   if: (high>left) then: { quickSort(table,left,high) };
	  };

	  quickSort(elements, 1, free - 1);
	  self;
	};
	
	// turn the vector into a set without duplicates
	// runtime O(nlogn + n)
	// the vector's ordering is lost (it becomes sorted)
	def uniq(cmp := comparator, ordercmp := {|e1,e2| e1 < e2 }) {
		if: (self.isEmpty()) then: {
			self
		} else: {
			// sort the vector, then remove the duplicates
		  self.sort(ordercmp);
		
		  // remove subsequent duplicates
		  def removeDuplicates(pos, prev) {
			  if: (pos < free) then: {
				  if: cmp(prev,elements[pos]) then: {
			      self.delete(pos);
			      removeDuplicates(pos, prev)
				  } else: {
					  removeDuplicates(pos+1, elements[pos])
				  }
				}
		  };
		  // this object equals none in the vector
		  removeDuplicates(2, elements[1]);
		  self;
		}
	};
	
	def random() {
		if: (self.isEmpty) then: {
			raise: XEmptyVector;
		} else: {
			elements[(1??(free-1)).round]
		}
	};
	
	def asTable() {
		elements.select(1,free);
	};
	
} taggedAs: [/.at.lang.types.Table];

def VectorModule := object: {

	def Vector := VectorPrototype;
	
	def StackUnderflow := StackUnderflow;
	
	// unit test for the vector prototype
	def VectorTest() {
	   extend: /.at.unit.test.UnitTest.new("VectorTest") with: {
			def v;
			def setUp() { v := VectorPrototype.new() };
			
			def testSize() { self.assertTrue(v.isEmpty(), "new vector not empty!") };
			def testAdd() { v.add("foo"); self.assertFalse(v.isEmpty()) };
			def testLength() { v.add(1).add(2); self.assertEquals(2, v.length()); };
			def testClear() {
				v.add(1).add(2);
				v.clear();
				self.assertTrue(v.isEmpty());
			};
			def testMaxCap() {
				v := VectorPrototype.new(1);
				self.assertFalse(v.atMaxCapacity());
				v.add(1);
				self.assertTrue(v.atMaxCapacity());
			};
			def testIndexing() {
				v.add("foo");
				self.assertEquals("foo", v[1]);
				v[1] := "bar";
				self.assertEquals("bar", v[1]);
			};
			def testEach() {
				v.add("foo").add("bar");
				def contained := [];
				v.each: { |e|
					contained := contained + [e];
				};
				self.assertEquals(2, contained.length);
				self.assertEquals(contained[1], "foo");
				self.assertEquals(contained[2], "bar");
			};
			def testMap() {
				v.add("foo").add("foozle");
				def mapped := v.map: { |e| e.explode().length };
				self.assertEquals(mapped[1], 3);
				self.assertEquals(mapped[2], 6);
			};
			def testInject() {
				v.add(1).add(2).add(3);
				self.assertEquals(6, v.inject: 0 into: { |sum,next| sum + next });
			};
			def testFilter() {
				v.add(1).add(2).add(3);
				def filtered := v.filter: { |e| e >= 2 };
			  self.assertEquals(2, filtered.length());
			  self.assertEquals(3, filtered.at(2));
			};
			def testContains() {
				v.add("foo").add("bar");
				self.assertTrue(v.contains("bar"));
				self.assertFalse(v.contains("baz"));
				// test using a comparator that only considers the first letter of a word
				self.assertTrue(v.contains("flaz", { |e1,e2| e1.explode()[1]==e2.explode()[1] } ));
			};
			def testImplode() {
				self.assertEquals("foobar", v.add("foo").add("bar").implode());
			};
			def testJoin() {
				self.assertEquals("foo,bar", v.add("foo").add("bar").join(","));				
			};
			def testSelect() {
				v.add(1).add(2).add(3).add(4);
				def t := v.select(2,4);
				self.assertEquals(2, t.length);
				self.assertEquals(2,t[1]);
				self.assertEquals(3,t[2]);
			};
			def testOverFlow() {
				v := VectorPrototype.new(2);
				v.add(1).add(2);
				self.assertTrue(v.atMaxCapacity());
				v.add(3);
				self.assertFalse(v.atMaxCapacity());
				v.add(4);
				self.assertEquals(4, v.at(4));
			};
			def testInsert() {
				v.add("a").add("c");
				v.insert(2,"b");
				self.assertEquals("abc", v.implode());
			};
			def testPush() {
				v.add("a").add("b");
				v.push("c");
				self.assertEquals("abc", v.implode());
			};
			def testDelete() {
				v.add("a").add("b").add("c");
				self.assertEquals("b", v.delete(2));
				self.assertEquals("ac", v.implode());
				self.assertEquals(2, v.length());
			};
			def testDeleteSingle() {
				def v := Vector.new(1);
			  v.add(2);
			  v.remove(2);
			  self.assertTrue(v.isEmpty);
			};
			def testPop() {
				v.add("b").add("a");
				self.assertEquals("a", v.pop());
				self.assertEquals(1, v.length());
				self.assertEquals("b", v.at(1));
			};
			def testFind() {
				v.add("a").add("bb").add("ccc");
				self.assertEquals(2, v.find: { |e| e.explode().length == 2 });
			};
			def testIndexOf() {
				v.add("a").add("bb").add("ccc");
				self.assertEquals(2, v.indexOf("bb"));
			};
			def testRemove() {
				v.add("a").add("b").add("c");
				self.assertTrue(v.remove("b"));
				self.assertEquals("ac", v.implode());
				self.assertEquals(2, v.length());
				self.assertFalse(v.remove("lala"));
			};
			def testAddAll() {
				v.add("a");
				def v2 := VectorPrototype.new();
				v2.add("b").add("c");
				self.assertEquals("abc", v.addAll(v2).implode());
			};
			def testUnion() {
				v.add("a").add("b");
				def v2 := VectorPrototype.new();
				v2.add("b").add("c");
				self.assertEquals("abc", v.union(v2).implode());
			};
			def testIntersection() {
				v.add("a").add("b");
				def v2 := VectorPrototype.new();
				v2.add("b").add("c");
				self.assertEquals("b", v.intersection(v2).implode());
			};
			def testDifference() {
				v.add("a").add("b");
				def v2 := VectorPrototype.new();
				v2.add("b").add("c");
				self.assertEquals("a", v.difference(v2).implode());
			};
			def testSort() {
				v.addAll([5,1,2,7,3,6,9]);
				v.sort();
				self.assertEquals(7, v.length());
				def prev := 0;
				v.each: { |elt| self.assertLessThan(prev, elt); prev := elt; };
				v.clear();
				v.addAll(["4444", "1", "22", "333"]);
				v.sort({|e1,e2| e1.explode().length < e2.explode().length });
				self.assertEquals("1223334444", v.implode());
			};
			def testUniq() {
				v.addAll([5,1,1,5,6]);
				v.uniq();
				self.assertEquals(3, v.length());
				self.assertTrue(v.contains(1));
				self.assertTrue(v.contains(5));
				self.assertTrue(v.contains(6));
			};
			def testRemoveAll() {
				v.addAll([1,2,3,4,5]);
				v.removeAll: { |elt| elt > 3 };
				self.assertEquals(3, v.length());
				self.assertTrue(v.contains(1));
				self.assertTrue(v.contains(2));
				self.assertTrue(v.contains(3));
				self.assertFalse(v.contains(4));
				self.assertFalse(v.contains(5));
			};
	  };
	};
}