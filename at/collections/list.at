/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* Implementation of Scheme-like lists.
 *
 * @author tvcutsem
 */

def DEFAULTCOMPARATOR := {|e1,e2| e1 == e2};

deftype EmptyList <: /.at.types.Exception;
def XEmptyList := /.at.exceptions.createException(EmptyList);

// An object-oriented implementation of Scheme-like lists

// the empty list
def NIL := object: {
	def car() { raise: XEmptyList.new("Cannot car the empty list") };
	def cdr() { raise: XEmptyList.new("Cannot cdr the empty list") };
	def length := 0;
	def isEmpty := true;
	def nth(n) { raise: XEmptyList.new("Cannot index into the empty list") };
	def each: fun { nil };
	def eachWithIndex: fun { nil };
	def eachWithIndex: n do: fun { nil };
	def map: fun { self };
	def inject: init into: accum { init };
	def filter: cond { self };
	def contains(elt, cmp := DEFAULTCOMPARATOR) { false };
	def implode() { "" };
	def join(txt) { txt };
	def select(start, stop) {
		if: (start == stop) then: { 
			self
		} else: {
			raise: XEmptyList.new("Cannot select empty list from "+start+" to "+stop);
		}
	};
	def add(elt) { Cons.new(elt, self) };
  def insert(atPos, element) {
	  if: (atPos == 1) then: { Cons.new(elt,self) } else: {
		  raise: XEmptyList.new("Cannot insert into the empty list: " + element);
	  };
  };
  def delete(atPos) { raise: XEmptyList.new("cannot delete from empty list at pos "+atPos) };
  def append(aList) { aList };
	// return the index of the first matching element, or nil if none is found
	def find: filter { nil };
	def find: filter startingFrom: n { nil };
	
	def indexOf(elt, cmp := DEFAULTCOMPARATOR) {
		find: { |e| cmp(elt,e) };
	};
	// return a list where the given element is removed
	def remove(elt, cmp := DEFAULTCOMPARATOR) { self };
	// remove all objects for which filter(elt) returns true
	def removeAll: filter { self };
	def asTable() { [] };
};

// lists are represented as sequences of cons-cells
def Cons := object: {
	def car := NIL;
	def cdr := NIL;
	
	def init(ca,cd) {
		car := ca;
		cdr := cd;
	};
	
	def length() { 1 + cdr.length };
	def isEmpty := false;
	def nth(n) { if: (n==1) then: { car } else: { cdr.nth(n-1) } };
	def each: fun { fun(car); cdr.each: fun };
	def eachWithIndex: fun { fun(1,car); cdr.eachWithIndex: 2 do: fun };
	def eachWithIndex: n do: fun { fun(n,car); cdr.eachWithIndex: n+1 do: fun };
	def map: fun { Cons.new(fun(car), cdr.map: fun) };
	def inject: init into: accum { def res := cdr.inject: init into: accum; accum(res,car) };
	def filter: cond {
		if: cond(car) then: {
			Cons.new(car, cdr.filter: cond)
		} else: {
			cdr.filter: cond
		}
	};
	def contains(elt, cmp := DEFAULTCOMPARATOR) {
		if: cmp(elt,car) then: {
			true
		} else: {
			cdr.contains(elt, cmp);
		}
	};
	def implode() { car + cdr.implode };
	def select(start, stop) {
		if: (start == stop) then: { 
			self
		} else: {
			raise: XEmptyList.new("Cannot select empty list from "+start+" to "+stop);
		}
	};
	def add(elt) { Cons.new(elt, self) };
	def append(aList) { Cons.new(car, cdr.append(aList)) };
  
  def insert(atPos, element) {
	  if: (atPos == 1) then: { Cons.new(element,self) } else: {
		  Cons.new(car, cdr.insert(atPos-1, element))
	  };
  };
  def delete(atPos) {
	  if: (atPos == 1) then: { cdr } else: {
		  Cons.new(car, cdr.delete(atPos-1))
	  }
  };
	// return the index of the first matching element, or nil if none is found
	def find: filter {
		if: filter(car) then: { 1 } else: { cdr.find: filter startingFrom: 2 };
	};
	def find: filter startingFrom: n {
		if: filter(car) then: { n } else: { cdr.find: filter startingFrom: n+1 };
	};
	def indexOf(elt, cmp := DEFAULTCOMPARATOR) {
		find: { |e| cmp(elt,e) };
	};
	// return a list where the given element is removed
	def remove(elt, cmp := DEFAULTCOMPARATOR) {
		if: cmp(elt,car) then: {
			cdr
		} else: {
			Cons.new(car, cdr.remove(elt, cmp))
		}
	};
	// remove all objects for which filter(elt) returns true
	def removeAll: filter {
		if: filter(car) then: {
			cdr.removeAll: filter
		} else: {
			Cons.new(car, cdr.removeAll: filter)
		}
	};
	def asTable() { [car] + cdr.asTable };
};

def makeListOf(items) {
	if: (items == []) then: {
		NIL
	} else: {
		def [first,@rest] := items;
		Cons.new(first, makeListOf(rest))
	}
};

// public interface
def ListModule := object: {

  def EmptyList := EmptyList;

  def NIL := NIL;

  def cons(car,cdr) { Cons.new(car,cdr) };
  def car(cons) { cons.car };
  def cdr(cons) { cons.cdr };

  def list(@items) { makeListOf(items) };

	// unit test for the list prototype
	def ListTest() {
	   extend: /.at.unit.test.UnitTest.new("ListTest") with: {
			def testSize() { self.assertTrue(list().isEmpty(), "new list not empty!") };
			def testAdd() { self.assertFalse(list("foo").isEmpty()) };
			def testLength() { self.assertEquals(2, list(1,2).length()); };
			def testIndexing() {
				self.assertEquals("foo", list("foo").nth(1));
			};
			def testEach() {
				def contained := [];
				list("foo","bar").each: { |e|
					contained := contained + [e];
				};
				self.assertEquals(2, contained.length);
				self.assertEquals(contained[1], "foo");
				self.assertEquals(contained[2], "bar");
			};
			def testMap() {
			  def mapped := list("foo","foozle").map: { |e| e.explode().length };
				self.assertEquals(mapped.nth(1), 3);
				self.assertEquals(mapped.nth(2), 6);
			};
			def testInject() {
				self.assertEquals(6, list(1,2,3).inject: 0 into: { |sum,next| sum + next });
			};
			def testFilter() {
				def filtered := list(1,2,3).filter: { |e| e >= 2 };
			  self.assertEquals(2, filtered.length());
			  self.assertEquals(3, filtered.nth(2));
			};
			def testContains() {
				self.assertTrue(list("foo","bar").contains("bar"));
				self.assertFalse(list("foo","bar").contains("baz"));
				// test using a comparator that only considers the first letter of a word
				self.assertTrue(list("foo","bar").contains("flaz", { |e1,e2| e1.explode()[1]==e2.explode()[1] } ));
			};
			def testImplode() {
				self.assertEquals("foobar", list("foo","bar").implode());
			};
			def testInsert() {
				self.assertEquals("abc", list("a","c").insert(2,"b").implode());
			};
			def testDelete() {
				def l := list("a","b","c");
				self.assertEquals("ac", l.delete(2).implode());
			};
			def testFind() {
				self.assertEquals(2, list("a","bb","ccc").find: { |e| e.explode().length == 2 });
			};
			def testIndexOf() {
				self.assertEquals(2, list("a","bb","ccc").indexOf("bb"));
			};
			def testRemove() {
				self.assertEquals("ac", list("a","b","c").remove("b").implode());
				self.assertEquals("abc", list("a","b","c").remove("lala").implode());
			};
			def testRemoveAll() {
				self.assertEquals("ac", (list("a","b","c","b").removeAll: { |e| e == "b" }).implode());
			};
	  };
	}; // end ListTest
} // end ListModule