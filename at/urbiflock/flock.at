/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
def Vector := /.at.collections.vector.Vector;

def makeFlock(theName, theProximity) {
	def flockrList := Vector.new(10, { |prof1, prof2| prof1.username == prof2.username });
	def name := theName;
	def proximity := theProximity;

	def theFlock := object: {
		
		def addFlockr(profile) {
			if: !(flockrList.contains(profile)) then: {
				flockrList.add(profile);
			};
		};
		def removeFlockr(profile) { flockrList.remove(profile) };
		def getName() { name };
		def getFlockrList() {
			flockrList.asTable.map:{|profile| profile.username};
		};
		def getProfile(uid) {
			flockrList.at(flockrList.find: { |p| p.username == uid });
		};
		def setProximity(newProximity) {
			subscription.cancel();
			proximity := newProximity;
			subscription := proximity.register(self);
		};
	};
	
	def subscription := proximity.register(theFlock);
	
	theFlock;
};

// the module object of this file
object: {
	def makeFlock := &makeFlock;
	
	def FlockTest := extend: /.at.unit.test.UnitTest.new("FlockTest") with: {
	 
		
	};
	
};