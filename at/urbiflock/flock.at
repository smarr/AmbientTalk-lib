/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
def Vector := /.at.collections.vector.Vector;
def makeFlockrList(){
	Vector.new(10, { |prof1, prof2| prof1.username == prof2.username });
};

def makeFlock(theName, theProximity) {
	
	def flockrList := makeFlockrList;
	def name := theName;
	def proximity := theProximity;
	def listeners := Vector.new();
	def defaultFlock := false;

  def proximityListener := object: {
	  def addFlockr(profile) {
		  if: !(flockrList.contains(profile)) then: {
			  flockrList.add(profile);
			  listeners.each: { |listener| listener<-notifyFlockrAdded(profile) };
		  };
	  };
	  def removeFlockr(profile) {
		  flockrList.remove(profile);
		  listeners.each: { |listener| listener<-notifyFlockrRemoved(profile) }; 
	  };
	};
	
	def theFlock := object: {
		def addListener(aListener) {
			listeners.add(aListener);
			object: { def cancel() { listeners.remove(aListener) } };
		};
		def getName() { name };
		def getFlockrList() {
		    flockrList.asTable.map:{|profile| profile.username};
		};
		def getProfile(uid) {
			def idx := flockrList.find: { |p| p.username == uid };
			if: (nil != idx) then: {
				flockrList.at(idx);				
			}
		};
		def setProximity(newProximity) {
			def oldFlockList := flockrList;
			def flatlist := oldFlockList.asTable.map:{|profile| profile.username};
			system.println("oldFlockrlist " + flatlist);
			flockrList := makeFlockrList;
			subscription.cancel();
			proximity := newProximity;
			subscription := proximity.register(proximityListener);
			oldFlockList.each: { |profile| 
				system.println("feeding network with profile " + profile.username);
				// passing nil as far reference. 
				// Save because the rete engine doesn't use flockr but profiles.
				proximity<-notifyProfileChanged(nil, profile);
			};
		};
		
		def makeDefaultFlock() {
			defaultFlock := true;
		};
		
		def isDefaultFlock() {
			defaultFlock
		};
		
	};
		
	def subscription := proximity.register(proximityListener);
	
	theFlock;
};

// the module object of this file
object: {
	def makeFlock := &makeFlock;
	
	def FlockTest := extend: /.at.unit.test.UnitTest.new("FlockTest") with: {
	 
		
	};
	
};