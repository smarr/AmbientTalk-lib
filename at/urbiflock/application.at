/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// All Urbiflock applications have:
// - a name (String)
// - an owner (Flockr)
def makeApplication(initName, initOwner) {
	def exportPublication;
	
	def remoteInterface := object: {
		def getOwnerAndProfile() { [initOwner, initOwner.getProfile ] }
	};
	
	object: {
		def name() { initName };
		def owner() { initOwner };
		
		def start(atFlockr);
		def pause();
		def unpause();
		def stop() {
			(exportPublication != nil).ifTrue: {
				exportPublication.cancel();
				exportPublication := nil;
				takeOffline: remoteInterface;
			};
		};
		
		def export(asType) {
			exportPublication := export: remoteInterface as: asType;
		}
	}
};

// returns a table of the applications installed by default into the framework
def makeFrameworkApplications(forFlockr) {
	[
	// "My Profile" editor application
	extend: makeApplication("My Profile", forFlockr) with: {
		def start(atFlockr) { // atFlockr should be a 'local interface' to a flockr
			jlobby.at.urbiflock.ui.ProfileViewer.new(atFlockr, atFlockr.getProfile, true) })
		}
	}
	,
	// "Flocks" flock list viewer application
	extend: makeApplication("Flocks", forFlockr) with: {
		def start(atFlockr) { // atFlockr should be a 'local interface' to a flockr
			jlobby.at.urbiflock.ui.FlockListViewer.new(atFlockr) })
		}
	}
	,
	// "Profile matcher" doesProfileMatch proximity editor application
	extend: makeApplication("Profile matcher", forFlockr) with: {
		def start(atFlockr) { // atFlockr should be a 'local interface' to a flockr
		  // TODO: where should I get matchingProfile?
		  jlobby.at.urbiflock.ui.DoesProfileMatchProximityEditor.new(atFlockr, atFlockr.getMatchingProfile)
	  }
	}
	]
};

// the module object of this file
object: {
	
	def makeApplication := &makeApplication;
	def makeFrameworkApplications := &makeFrameworkApplications;
	
	def ApplicationTest := extend: /.at.unit.test.UnitTest.new("ApplicationTest") with: {
		
		// unit tests go here
		
	};
	
};