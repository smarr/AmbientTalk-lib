/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

import /.at.lang.futures;

// All Urbiflock applications have:
// - a name (String)
// - an owner (Flockr)
def makeApplication(initName, localOwnerInterface) {
	def exportPublication;
	
	def remoteApplicationInterface := object: {
		def name() { initName };
		def getOwnerAndProfile() {
			[localOwnerInterface.remoteInterface, localOwnerInterface.getProfile ]
		}
	};
	
	object: {
		def name() { initName };
		def owner() { localOwnerInterface.remoteInterface };
		
		def start();
		def pause();
		def unpause();
		def stop() {
			(exportPublication != nil).ifTrue: {
				exportPublication.cancel();
				exportPublication := nil;
				takeOffline: remoteApplicationInterface;
			};
		};
		
		def export(asType) {
			exportPublication := export: remoteApplicationInterface as: asType;
		}
	}
};

// returns a table of the applications installed by default into the framework
// localFlockrI should be a 'local interface' to a flockr
def makeFrameworkApplications(localFlockrI) {
	[
	// "My Profile" editor application
	extend: makeApplication("My Profile", localFlockrI) with: {
		def start() {
			jlobby.at.urbiflock.ui.ProfileViewer.new(localFlockrI, localFlockrI.getProfile, true)
		}
	}
	,
	// "Flocks" flock list viewer application
	extend: makeApplication("Flocks", localFlockrI) with: {
		def start() {
			jlobby.at.urbiflock.ui.FlockListViewer.new(localFlockrI)
		}
	}
	,
	// "Profile matcher" doesProfileMatch proximity editor application
	extend: makeApplication("Profile matcher", localFlockrI) with: {
		def start() {
		  jlobby.at.urbiflock.ui.DoesProfileMatchProximityEditor.new(localFlockrI, localFlockrI.getMatchingProfile)
	  }
	}
	]
};

// the module object of this file
object: {
	
	def makeApplication := &makeApplication;
	def makeFrameworkApplications := &makeFrameworkApplications;
	
	def ApplicationTest := extend: /.at.unit.test.UnitTest.new("ApplicationTest") with: {
		
		// unit tests go here
		
		def testAsyncDiscoverApplication() {			
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "uid1";
			def flockr1 := /.at.urbiflock.flockr.makeFlockr(profile1);
						
			actor: {
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "uid2";
				def flockr2 := /.at.urbiflock.flockr.makeFlockr(profile2);
				
				deftype TestApp1;
				def testApp := /.at.urbiflock.application.makeApplication("testApp", flockr2);
				testApp.export(TestApp1);
				flockr2.registerApplication(testApp);
		  };
			
			deftype TestApp1;
			def testApp := makeApplication("testApp", flockr1);
			flockr1.registerApplication(testApp);
			
			def test := self;
			
		  future: { |return|
				flockr1.registerApplicationListener(TestApp1, object: {
					def notifyApplicationJoined(flockr, profile, app) {
						test.assertEquals("uid2", /.at.urbiflock.flockr.uidOf(flockr), "flockr does not match");
						test.assertEquals("uid2", profile.username, "profile does not match");
						when: app<-name()@FutureMessage becomes: { |nam|
							test.assertEquals("testApp", nam, "app does not match");
							return(`ok);
						}
					}
				});
			}			
		};
		
	};
	
};