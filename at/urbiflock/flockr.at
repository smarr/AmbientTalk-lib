/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def Vector := /.at.collections.vector.Vector;
import /.at.lang.futures;

// type identifying remote Flockr Users
deftype FlockrT;

def makeFlockr(profile) {
	def username := profile.username;
	
	def profileChangedListeners := Vector.new();
	def discoveryListeners := Vector.new();
	
	def buddyList := /.at.urbiflock.buddylist.makeBuddyList();
	
	def notifyListeners: listeners with: message {
		listeners.each: { |l| l <+ message };
	};
	
	def localInterface := object: {
		def registerProfileChangedListener(l) { profileChangedListeners.add(l) };
    	def registerDiscoveryListener(l) { discoveryListeners.add(l) };
		def getBuddyList() { buddyList };
	};
		
	def remoteInterface := object: {
		def getProfile() { profile };
		def profileChanged(flockr, newProfile) {
			notifyListeners: profileChangedListeners with: <-notifyProfileChanged(flockr, newProfile);
		};
	} taggedAs: [ extend: FlockrT with: { |username| }];
	
	localInterface.registerProfileChangedListener(buddyList);
	
	export: remoteInterface as: FlockrT;
	
	// whenever a new Flockr is discovered:
	// 1) all discovery listeners get a notifyJoined event
	// 2) all profile changed listeners get a notifyProfileChanged event
	whenever: FlockrT discovered: { |flockr|		
		notifyListeners: discoveryListeners with: <-notifyJoined(flockr);
		
		when: flockr<-getProfile()@Due(seconds(10)) becomes: { |newProfile|
			notifyListeners: profileChangedListeners with: <-notifyProfileChanged(flockr, newProfile);
		} catch: TimeoutException using: { |e|
		};
		
		/*
		Problem? What if a flockr disconnects, then reconnects and the addFlockr event
		is signalled before the removeFlockr event
		*/
		
		when: flockr disconnected: {
			notifyListeners: discoveryListeners with: <-notifyLeft(flockr);
		};
				
	};
	
	localInterface;
	
};


// the module object of this file
object: {
	
	// makeFlockr(profile) -> returns a Flockr object
	def makeFlockr := &makeFlockr;
	
	def uidOf(flockr) {
		(/.at.support.util.getAnnotationOfType(flockr, FlockrT)).username;
	};
	
	def Test := extend: /.at.unit.test.UnitTest.new("FlockrTest") with: {
		
		// unit tests go here
		
		def testAsyncProfileExchange() {
			def [fut,res] := makeFuture(seconds(10));
			
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "flockr1";
		  def flockr1 := makeFlockr(profile1);
			flockr1.registerProfileChangedListener(object: {
				def notifyProfileChanged(flockr, newProfile) {
					res.resolve(newProfile.username);
				};
			});
			
			actor: {
				import /.at.urbiflock.flockr;
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "flockr2";
			  def flockr2 := makeFlockr(profile2);
			};
			
			when: fut becomes: { |uname|
				self.assertEquals("flockr2", uname);
			};
			
		};
		
		def testAsyncUpdateProfileInBuddyList() {
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "flockr1";
			def flockr1 := makeFlockr(profile1);
			def bl := flockr1.getBuddyList();
			def profile2 := /.at.urbiflock.profile.makeProfile();
			profile2.username := "flockr2";
			profile2.firstname := "Jef";
			bl.addProfile(profile2);
			self.assertEquals((bl.getProfile("flockr2")).firstname, "Jef");
			
			// We wait 10 seconds for the event to be delivered and the profile to be updated.
			// If this test fails, maybe the update did not happen within 10 seconds.
			def [fut, res] := makeFuture(seconds(11));
			/.at.support.timer.when: seconds(10) elapsed: {
				res.resolve(`ok);
			};
	
			actor: {
				import /.at.urbiflock.flockr;
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "flockr2";
				profile2.firstname := "Marcel";
			  	makeFlockr(profile2);
			};
						
			when: fut becomes: { |signal|
				self.assertEquals((bl.getProfile("flockr2")).firstname, "Marcel");	
			};
		};
		
	};
	
};