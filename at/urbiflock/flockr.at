/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def Vector := /.at.collections.vector.Vector;
import /.at.lang.futures;

def ProximityModule := /.at.urbiflock.proximity;
def FlockModule := /.at.urbiflock.flock;

// type identifying remote Flockr Users
deftype FlockrT;

// given a Flockr near or far reference, returns its username (a string)
def uidOf(flockr) {
	/.at.support.util.getAnnotationOfType(flockr, FlockrT).username;
};


def makeFlockr(profile) {
	def myProfile := profile;
	def username := profile.username;
	def publication; // the pub object by which I am exported
	def discSubscription; // the sub object by which I discover the rest of flockrs.
	
	// map UID -> Far ref to flockr
	def uidFlockrMap := jlobby.java.util.HashMap.new();
	
	def profileChangedListeners := Vector.new();
	def discoveryListeners := Vector.new();
	def buddyListListeners := Vector.new();
	def flocksListeners := Vector.new();
	
	def applications := Vector.new();
	def flocks := Vector.new();
	def proximities := Vector.new();
	
	def buddyList := /.at.urbiflock.buddylist.makeBuddyList();
	
	def matchingProfile := /.at.urbiflock.profile.makeProfile();
	def profileMatchesProximity := nil;
	def profileMatchingProximities := Vector.new();
	
	def notifyListeners: listeners with: message {
		listeners.each: { |l| l <+ message };
	};
	
	def localInterface := object: {
		/* l should understand:
		     notifyProfileChanged(flockr : farref, newProfile : profile)
		       invoked whenever a nearby flockr's profile has changed
		*/
		def registerProfileChangedListener(l) { profileChangedListeners.add(l) };
		def removeProfileChangedListener(l) { profileChangedListeners.remove(l) };
		/* l should understand:
		     notifyJoined(profile : profile)
		       invoked whenever a new flockr has joined the ad hoc network
		     notifyLeft(profile : profile)
		       invoked whenever an existing flockr has left the ad hoc network
		*/
    def registerDiscoveryListener(l) { discoveryListeners.add(l) };
		def removeDiscoveryListener(l) { discoveryListeners.remove(l) };
		/* l should understand:
		     notifyBuddyAdded(flockr : flockr, buddyProfile : profile)
		       invoked whenever a buddy was manually added to this flockr's buddy list
		     notifyBuddyRemoved(flockr : flockr, buddyProfile: profile)
		       invoked whenever a buddy was manually removed from this flockr's buddy list
		*/
		def registerBuddyListListener(l) { buddyListListeners.add(l) };
		def removeBuddyListListener(l) { buddyListListeners.remove(l) };
		
		/* l should understand:
		 	 notifyFlockAdded(flock: Flock)
				invoked whenever a new flock is added.
			notifyFlockRemoved(flock: Flock)
				invoked whenever a flock is removed.
		*/
		def registerFlocksListener(l) { flocksListeners.add(l) };
		def removeFlocksListener(l) { flocksListeners.remove(l) };
		
		def addApplication(app) { applications.add(app) };
		
		def getFlockrWithUid(uid) {
			uidFlockrMap.get(uid);
		};
		def updateFlockrWithUid(flockr, uid) {
			uidFlockrMap.put(uid, flockr);
		};
		def getProfile() { myProfile };
		def getMatchingProfile() { matchingProfile };
		def getUsername(){ username };
		def updateProfile() {
			notifyListeners: profileChangedListeners with: <-notifyProfileChanged(remoteInterface, myProfile);
			def connectedFlockrsIterator := uidFlockrMap.values.iterator();
			while: { connectedFlockrsIterator.hasNext() } do: {
				connectedFlockrsIterator.next()<-profileChanged(remoteInterface, myProfile);
			};
		};
		
		def addBuddy(profile) { 
			buddyList.addProfile(profile);
			notifyListeners: buddyListListeners with: <-notifyBuddyAdded(profile);
		};
		def removeBuddy(profile) { 
			buddyList.removeProfile(profile.username);
			notifyListeners: buddyListListeners with: <-notifyBuddyRemoved(profile); 
		};
		def isBuddy(uid) {
			buddyList.contains(uid);
		};
		def getBuddy(uid) {
			buddyList.getProfile(uid);
		};
		def getFlocks() { flocks.asTable };
		def getFlock(name) { 
			def flockIndex := flocks.find: { |flock| name == flock.getName};
			if: (nil != flockIndex) then: {
				flocks.at(flockIndex);
			}; // else return nil
		};
		def removeFlock(flock) {
			flocks.remove(flock, { |f1,f2| f1.getName() == f2.getName() });
			notifyListeners: flocksListeners with: <-notifyFlockRemoved(flock);
		};
		def addFlock(flock) { 
			flocks.add(flock);
			notifyListeners: flocksListeners with: <-notifyFlockAdded(flock);
		};
		def getProximities() { proximities.asTable };
		def addProximity(proximity) { proximities.add(proximity) };
		def removeProximity(proximity) { proximities.remove(proximity) };
		
		def updateMatchingProfile(newProfile) {
			// Clean up old individual profile field matching proximities
			profileMatchingProximities.each: { |proximity| removeProfileChangedListener(proximity) };
			proximities.remove(profileMatchesProximity);
			matchingProfile := newProfile;
			// Create new individual profile field matching proximities
			profileMatchingProximities := /.at.urbiflock.profile.createProfileMatchingProximities(localInterface, matchingProfile);
			profileMatchesProximity := /.at.urbiflock.profile.constructProfileMatchingProximityFromProximities(localInterface, profileMatchingProximities);
			proximities.add(profileMatchesProximity);
			matchingProfilesFlock.setProximity(profileMatchesProximity);
			def connectedFlockrsIterator := uidFlockrMap.values.iterator();
			// For each connected flockr, signal a profileChanged event to all the 
			// individual profile field matching proximities.
			// This way, the global profile matcher proximity is recomputed and the flock
			// is updated.
			while: { connectedFlockrsIterator.hasNext() } do: {
				def flockrRef := connectedFlockrsIterator.next();
				when: flockrRef<-getProfile()@Due(seconds(10)) becomes: { |newProfile|
					profileMatchingProximities.each: { |proximity| 
						proximity<-notifyProfileChanged(flockrRef, newProfile);
					}
				} catch: TimeoutException using: { |e|
				};
			}
		};
		
		// takes a flockr offline: 
		// stops a flockr from being exported to the network
		// + from discovering other flockrs in the network
		// + removes it from the table of exported objects
		def goOffline() { 
			(publication != nil).ifTrue: { publication.cancel()}; 
		  (discSubscription != nil).ifTrue: { discSubscription.cancel()};  
			try: { 
	      takeOffline: self.remoteInterface;
	    } catch: /.at.types.IllegalOperation using: { |e| /*flockr used only locally*/ };
	    nil;
		};
		
		def remoteInterface := object: {
			def getProfile() { profile };
			def profileChanged(flockr, newProfile) {
				notifyListeners: profileChangedListeners with: <-notifyProfileChanged(flockr, newProfile);
			};
		} taggedAs: [ extend: FlockrT with: { |username| }];
		
		def openApplicationLauncher() { 
			jlobby.at.urbiflock.ui.ApplicationLauncher.new(applications.asTable()) 
		};
		
		def openFlockEditorOnNewFlock() {
			jlobby.at.urbiflock.ui.FlockEditor.new(/.at.urbiflock.flock.makeFlock(
					"new flock", 
					/.at.urbiflock.proximity.makeDoesProfileMatchProximity(localInterface, { |p| true })),
				localInterface);
		};
		
		// Create a new flock using:
		// flockName: the name of the flock.
		// fieldMatchersVector: a vector containing a representation of the profile properties from the GUI.
		// shouldBeFriend: should the flockr be in the buddy list?
		// shouldBeNearby: should the flockr be nearby?
		def createFlockFromFieldMatchers(flockName, fieldMatchersVector, shouldBeFriend, shouldBeNearby) {
			// The initial proximity matches with every flockr.
			def theChainedProximity := /.at.urbiflock.proximity.makeDoesProfileMatchProximity(localInterface, { |p| true });
			def iterator := fieldMatchersVector.iterator();
			// We keep the simple proximities to be able to notify them later on.
			def simpleProximities := Vector.new();
			simpleProximities.add(theChainedProximity);
			// A field matcher is a vector which contains a representation of the
			// profile properties that the user filled out in the GUI.
			// Here we iterate over each field matcher and create the corresponding proximity.
			while: { iterator.hasNext() } do: {
				def fieldMatcher := iterator.next();
				// The name of the profile field.
				def fieldName := fieldMatcher.get(0);
				// The type of the profile field.
				def fieldType := fieldMatcher.get(1);
				// The comparator (e.g. ==, <, >...).
				def comparatorSymbol := fieldMatcher.get(2);
				// The actual value of the profile field.
				def fieldValue := fieldMatcher.get(3);
				// Make the proximity for this field:
				def proximity := /.at.urbiflock.proximity.makeDoesProfileMatchProximity(
					localInterface, 
					{ |profile| 
						// If the flockr's profile doesn't have the field, do not match.
						if: (reflect: profile).respondsTo(fieldName) then: {
							// If it does, lookup the value and compare it with our value
							// using the comparator operator.
							def value := (reflect: profile).invokeField(profile, fieldName);
							(reflect: value).invoke(
								value, 
								object: { 
									def selector() { comparatorSymbol };
									def arguments() { [ fieldValue ] }; 
									});
						} else: {
							false;
						};
					});
				// We keep the simple proximities to be able to notify them later on.
				simpleProximities.add(proximity);
				// The resulting global proximity is a chained AND-proximity of all simple proximities.
				theChainedProximity := /.at.urbiflock.proximity.makeAndProximity(theChainedProximity, proximity);	
			};
			// Should the flockr be a friend?
			def isFriendProximity := nil;
			// Should the flockr be nearby?
			def isNearbyProximity := nil;
			// If so, add the corresponding proximity.
			if: shouldBeFriend then: {
				isFriendProximity := /.at.urbiflock.proximity.makeIsFriendProximity(localInterface);
				theChainedProximity := /.at.urbiflock.proximity.makeAndProximity(theChainedProximity, isFriendProximity);
			};
			// If so, add the corresponding proximity.
			if: shouldBeNearby then: {
				isNearbyProximity := /.at.urbiflock.proximity.makeIsNearbyProximity(localInterface);
				theChainedProximity := /.at.urbiflock.proximity.makeAndProximity(theChainedProximity, isNearbyProximity);
			};
			// Here the global proximity is ready, but the sub-proximities still 
			// have to be initialized (by notifying them).
			proximities.add(theChainedProximity);
			addFlock(/.at.urbiflock.flock.makeFlock(flockName, theChainedProximity));
			
			// Notify the isFriendProximity with all the existing buddies.
			if: (nil != isFriendProximity) then: {
				buddyList.listProfiles.each: { |profile|
					isFriendProximity<-notifyBuddyAdded(profile);
				};
			};
			// Notify the profile proximities and the isNearby proximity by iterating over all connected flockrs.
			def connectedFlockrsIterator := uidFlockrMap.values.iterator();
			while: { connectedFlockrsIterator.hasNext() } do: {
				def flockrRef := connectedFlockrsIterator.next();
				when: flockrRef<-getProfile()@Due(seconds(10)) becomes: { |newProfile|
					if: (nil != isNearbyProximity) then: {
						isNearbyProximity<-notifyJoined(newProfile);
					};
					simpleProximities.each: { |proximity| 
						proximity<-notifyProfileChanged(flockrRef, newProfile);
					};
				} catch: TimeoutException using: { |e|
				};
			}		
		};
	};
	
	// BuddyList is interested in Profile changes (update cached profiles)
	localInterface.registerProfileChangedListener(buddyList);
	
	// Adding predefined flocks
	def isFriendProximity := ProximityModule.makeIsFriendProximity(localInterface);
	proximities.add(isFriendProximity);
	def FriendsFlock := FlockModule.makeFlock("FriendsFlock", isFriendProximity);
	FriendsFlock.makeDefaultFlock();
	flocks.add(FriendsFlock);
	
	def isNearbyProximity := ProximityModule.makeIsNearbyProximity(localInterface);
	proximities.add(isNearbyProximity);
	def NearbyFlock := FlockModule.makeFlock("NearbyFlock", isNearbyProximity);
	NearbyFlock.makeDefaultFlock();
	flocks.add(NearbyFlock);
	

	/.at.urbiflock.application.makeFrameworkApplications(localInterface).each: { |application|
		applications.add(application);
	};

	publication := export: localInterface.remoteInterface as: FlockrT;
	
	// whenever a new Flockr is discovered:
	// 1) all discovery listeners get a notifyJoined event
	// 2) all profile changed listeners get a notifyProfileChanged event
	discSubscription := whenever: FlockrT discovered: { |flockr|
		
		when: flockr<-getProfile()@Due(seconds(10)) becomes: { |newProfile|
		//	system.println("DEBUG: Flockr: " + username + "discovered" + newProfile.username);

      // keep track of the flockr far reference via its UID
			uidFlockrMap.put(uidOf(flockr), flockr);
			
			notifyListeners: discoveryListeners with: <-notifyJoined(newProfile);
			notifyListeners: profileChangedListeners with: <-notifyProfileChanged(flockr, newProfile);
			
			/* FIXME: What if a flockr disconnects, then reconnects and the addFlockr event
			   is signalled before the removeFlockr event. Can this ever happen?
			*/
			when: flockr disconnected: {
			//	system.println("DEBUG: Flockr:" + username + "noticed a disconnection from " + flockr);
				uidFlockrMap.remove(uidOf(flockr));
				// Note: the 'newProfile' profile may be outdated by now, but it only serves
				// to remove all profiles with the same username from the RETE network
				notifyListeners: discoveryListeners with: <-notifyLeft(newProfile);
			};
			
		} catch: TimeoutException using: { |e|
			// ignore this Flockr
		};
		
	};
	
	localInterface;
	
};

// the module object of this file
object: {
	
	// makeFlockr(profile) -> returns a Flockr object
	def makeFlockr := &makeFlockr;
	def uidOf := &uidOf;
	
	// run these unit tests sequentially
	def FlockrTest := extend: /.at.unit.test.UnitTest.new("FlockrTest", false) with: {
		
		def flockr1;
		def actorHostingFlockr2;
		
		def setUp() {
			// create two new flockrs, one in this actor, the other in a new actor
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "flockr1";
		  flockr1 := makeFlockr(profile1);
		
		  actorHostingFlockr2 := actor: {
				import /.at.urbiflock.flockr;
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "flockr2";
				profile2.firstname := "Flockr 2 first name";
			  def flockr2 := makeFlockr(profile2);
			  
			  def getFlock() { flockr2.remoteInterface };
			  def setFlockr2Firstname(name) { 
				  profile2.firstname := name;
				  flockr2.updateProfile();
			  };
			  def goOffline() { flockr2.goOffline(); `ok };
		  }
		};
		
		def tearDown() {
			// clean up the flockrs created for each test
			flockr1.goOffline();
			actorHostingFlockr2<-goOffline()@FutureMessage;
			// because we return a future, tearDown will wait
			// until the second flock has been taken offline before
			// starting the next test
		};
		
		def testAsyncUidOf() {			
			when: actorHostingFlockr2<-getFlock()@FutureMessage becomes: { |remoteFlockr|
				self.assertEquals("flockr2", /.at.urbiflock.flockr.uidOf(remoteFlockr), "uidOf does not work");
			};
		};
		
		// test whether two flockrs can discover one another
		def testAsyncProfileExchange() {
			def [fut,res] := makeFuture(seconds(10));
			
			flockr1.registerProfileChangedListener(object: {
				def notifyProfileChanged(flockr, newProfile) {
					res.resolve(newProfile.username);
				};
			});

			when: fut becomes: { |uname|
				self.assertEquals("flockr2", uname);
			};
			
		};
		
		def testAsyncUpdateProfileInBuddyList() {
			def profile2 := /.at.urbiflock.profile.makeProfile();
			profile2.username := "flockr2";
			profile2.firstname := "Jef";
			flockr1.addBuddy(profile2);
			self.assertEquals((flockr1.getBuddy("flockr2")).firstname, "Jef");
						
			// We wait 5 seconds for the event to be delivered and the profile to be updated.
			// If this test fails, maybe the update did not happen within 5 seconds.			
			/.at.support.timer.when: seconds(5) elapsedWithFuture: {
				self.assertEquals((flockr1.getBuddy("flockr2")).firstname, "Flockr 2 first name");
			};
		};
		
		/* Test no longer required since "Matching Profiles" flock is no longer a predefined flock.
		
		def testAsyncMatchProfile() {
			// we assume that after 5 seconds, flockr1 and flockr2 will have discovered one another
			/.at.support.timer.when: seconds(5) elapsedWithFuture: {
				// flockr2 should be in flockr1's Flock of Matching Profiles (because no filter was set,
				// this flock matches everything)
				self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 1, "flockr2 not in expected flock");
				
				// let's create a new profile to be used as a filter
				def newMatchingProfile := /.at.urbiflock.profile.makeProfile();
				newMatchingProfile.setFieldShouldMatch(`firstname);
				newMatchingProfile.firstname := "bar"; // this won't match flockr2's current first name
				flockr1.updateMatchingProfile(newMatchingProfile);

				/.at.support.timer.when: seconds(5) elapsedWithFuture: {
					// now, flockr2 should no longer be in flockr1's list of matching profiles
					self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 0, "flockr2 still in expected flock");
					
					// now, let's adapt the filter such that it matches the name of flockr2
					newMatchingProfile.firstname := "Flockr 2 first name";
					flockr1.updateMatchingProfile(newMatchingProfile);
					/.at.support.timer.when: seconds(5) elapsedWithFuture: {
						// now, flockr2 should again be in flockr1's Matching Profiles flock
					  self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 1, "flockr2 not in expected flock after profile change");
					
					  // Should not match anymore, flock should be updated
					  //actorHostingFlockr2<-setFlockr2Firstname("bleh");
					newMatchingProfile.firstname := "bleh";
					flockr1.updateMatchingProfile(newMatchingProfile);
					//		newMatchingProfile.firstname := "bleh";
						//	flockr1.updateMatchingProfile(newMatchingProfile);
					  
					  /.at.support.timer.when: seconds(5) elapsedWithFuture: {
					    // now, flockr2 should not be in flockr1's Matching Profiles flock
					    self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 0, "flockr2 not expected in flock after profile change");
					  };
				  };
				};
			};
		};*/
	};
	
};