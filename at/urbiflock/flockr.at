/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def Vector := /.at.collections.vector.Vector;
import /.at.lang.futures;

def ProximityModule := /.at.urbiflock.proximity;
def FlockModule := /.at.urbiflock.flock;

// type identifying remote Flockr Users
deftype FlockrT;

// given a Flockr near or far reference, returns its username (a string)
def uidOf(flockr) {
	/.at.support.util.getAnnotationOfType(flockr, FlockrT).username;
};


def makeFlockr(profile) {
	def myProfile := profile;
	def username := profile.username;
	def publication; // the pub object by which I am exported
	def discSubscription; // the sub object by which I discover the rest of flockrs.
	
	// map UID -> Far ref to flockr
	def uidFlockrMap := jlobby.java.util.HashMap.new();
	
	def profileChangedListeners := Vector.new();
	def discoveryListeners := Vector.new();
	def buddyListListeners := Vector.new();
	
	def applications := Vector.new();
	def flocks := Vector.new();
	def proximities := Vector.new();
	
	def buddyList := /.at.urbiflock.buddylist.makeBuddyList();
	
	def matchingProfile := /.at.urbiflock.profile.makeProfile();
	def profileMatchesProximity := nil;
	def profileMatchingProximities := Vector.new();
	
	def notifyListeners: listeners with: message {
		listeners.each: { |l| l <+ message };
	};
	
	def localInterface := object: {
		/* l should understand:
		     notifyProfileChanged(flockr : farref, newProfile : profile)
		       invoked whenever a nearby flockr's profile has changed
		*/
		def registerProfileChangedListener(l) { profileChangedListeners.add(l) };
		def removeProfileChangedListener(l) { profileChangedListeners.remove(l) };
		/* l should understand:
		     notifyJoined(profile : profile)
		       invoked whenever a new flockr has joined the ad hoc network
		     notifyLeft(profile : profile)
		       invoked whenever an existing flockr has left the ad hoc network
		*/
    def registerDiscoveryListener(l) { discoveryListeners.add(l) };
		def removeDiscoveryListener(l) { discoveryListeners.remove(l) };
		/* l should understand:
		     notifyBuddyAdded(flockr : flockr, buddyProfile : profile)
		       invoked whenever a buddy was manually added to this flockr's buddy list
		     notifyBuddyRemoved(flockr : flockr, buddyProfile: profile)
		       invoked whenever a buddy was manually removed from this flockr's buddy list
		*/
		def registerBuddyListListener(l) { buddyListListeners.add(l) };
		def removeBuddyListListener(l) { buddyListListeners.remove(l) };
		def getFlockrWithUid(uid) {
			uidFlockrMap.get(uid);
		};
		def updateFlockrWithUid(flockr, uid) {
			uidFlockrMap.put(uid, flockr);
		};
		def getProfile() { myProfile };
		def addBuddy(profile) { 
			buddyList.addProfile(profile);
			notifyListeners: buddyListListeners with: <-notifyBuddyAdded(profile);
		};
		def removeBuddy(profile) { 
			buddyList.removeProfile(profile.username);
			notifyListeners: buddyListListeners with: <-notifyBuddyRemoved(profile); 
		};
		def isBuddy(uid) {
			buddyList.contains(uid);
		};
		def getBuddy(uid) {
			buddyList.getProfile(uid);
		};
		def getFlocks() { flocks.asTable };
		def getFlock(name) { 
			def flockIndex := flocks.find: { |flock| name == flock.getName};
			if: !(flockIndex == nil) then: {
				flocks.at(flockIndex);
			}; // else return nil
		};
		def removeFlock(flock) { flocks.remove(flock) };
		def addFlock(flock) { flocks.add(flock) };
		def getProximities() { proximities.asTable };
		def addProximity(proximity) { proximities.add(proximity) };
		def removeProximity(proximity) { proximities.remove(proximity) };
		
		def updateMatchingProfile(newProfile) {
			// Clean up old individual profile field matching proximities
			profileMatchingProximities.each: { |proximity| removeProfileChangedListener(proximity) };
			proximities.remove(profileMatchesProximity);
			matchingProfile := newProfile;
			// Create new individual profile field matching proximities
			profileMatchingProximities := /.at.urbiflock.profile.createProfileMatchingProximities(localInterface, matchingProfile);
			profileMatchesProximity := /.at.urbiflock.profile.constructProfileMatchingProximityFromProximities(localInterface, profileMatchingProximities);
			proximities.add(profileMatchesProximity);
			matchingProfilesFlock.setProximity(profileMatchesProximity);
			def connectedFlockrsIterator := uidFlockrMap.values.iterator();
			// For each connected flockr, signal a profileChanged event to all the 
			// individual profile field matching proximities.
			// This way, the global profile matcher proximity is recomputed and the flock
			// is updated.
			while: { connectedFlockrsIterator.hasNext() } do: {
				def flockrRef := connectedFlockrsIterator.next();
				when: flockrRef<-getProfile()@Due(seconds(10)) becomes: { |newProfile|
					profileMatchingProximities.each: { |proximity| 
						proximity<-notifyProfileChanged(flockrRef, newProfile);
					}
				} catch: TimeoutException using: { |e|
				};
			}
		};
		// puts a flockr offline: 
		// stops a flockr from being exported to the network
		// + from discovering other flockrs in the network
		// + from the table of exported objects
		def goOffline() { 
			(publication != nil).ifTrue: { publication.cancel()}; 
		  (discSubscription != nil).ifTrue: { discSubscription.cancel()};  
			try: { 
	      takeOffline: remoteInterface;
	    } catch: /.at.types.IllegalOperation using: { |e|
		  	system.println("[flockr.at] WARNING: flockr used only locally: "+e.message);
	  	};
	    nil;
		};
		def openApplicationLauncher() { jlobby.at.urbiflock.ui.ApplicationLauncher.new(applications.asTable()) };
	};
		
	def remoteInterface := object: {
		def getProfile() { profile };
		def profileChanged(flockr, newProfile) {
			notifyListeners: profileChangedListeners with: <-notifyProfileChanged(flockr, newProfile);
		};
	} taggedAs: [ extend: FlockrT with: { |username| }];
	
	// BuddyList is interested in Profile changes (update cached profiles)
	localInterface.registerProfileChangedListener(buddyList);
	
	// Adding predefined flocks
	def isFriendProximity := ProximityModule.makeIsFriendProximity(localInterface);
	proximities.add(isFriendProximity);
	def FriendsFlock := FlockModule.makeFlock("FriendsFlock", isFriendProximity);
	flocks.add(FriendsFlock);
	
	def isNearbyProximity := ProximityModule.makeIsNearbyProximity(localInterface);
	proximities.add(isNearbyProximity);
	def NearbyFlock := FlockModule.makeFlock("NearbyFlock", isNearbyProximity);
	flocks.add(NearbyFlock);
		
	profileMatchingProximities := /.at.urbiflock.profile.createProfileMatchingProximities(localInterface, matchingProfile);
	profileMatchesProximity := /.at.urbiflock.profile.constructProfileMatchingProximityFromProximities(localInterface, profileMatchingProximities);
	proximities.add(profileMatchesProximity);
	def matchingProfilesFlock := FlockModule.makeFlock("Matching Profiles", profileMatchesProximity);
	flocks.add(matchingProfilesFlock);
	
	// "My Profile" editor application
	applications.add(
		(/.at.urbiflock.application.makeApplication(
			"My Profile", 
			{ jlobby.at.urbiflock.ui.ProfileViewer.new(localInterface, myProfile, true) })));
		
	// "Flocks" flock list viewer application
	applications.add(
		(/.at.urbiflock.application.makeApplication(
			"Flocks", 
			{ jlobby.at.urbiflock.ui.FlockListViewer.new(localInterface) })));
		
	// "Profile matcher" doesProfileMatch proximity editor application
	applications.add(
		(/.at.urbiflock.application.makeApplication(
			"Profile matcher", 
			{ jlobby.at.urbiflock.ui.DoesProfileMatchProximityEditor.new(localInterface, matchingProfile) })));
	
	publication := export: remoteInterface as: FlockrT;
	
	// whenever a new Flockr is discovered:
	// 1) all discovery listeners get a notifyJoined event
	// 2) all profile changed listeners get a notifyProfileChanged event
	discSubscription := whenever: FlockrT discovered: { |flockr|
		
		when: flockr<-getProfile()@Due(seconds(10)) becomes: { |newProfile|
			system.println("DEBUG: Flockr: " + username + "discovered" + newProfile.username);

      // keep track of the flockr far reference via its UID
			uidFlockrMap.put(uidOf(flockr), flockr);
			
			notifyListeners: discoveryListeners with: <-notifyJoined(newProfile);
			notifyListeners: profileChangedListeners with: <-notifyProfileChanged(flockr, newProfile);
			
			/* FIXME: What if a flockr disconnects, then reconnects and the addFlockr event
			   is signalled before the removeFlockr event. Can this ever happen?
			*/
			when: flockr disconnected: {
				system.println("DEBUG: Flockr:" + username + "noticed a disconnection from " + flockr);
				//Comment elisa: why do not remove all of them? anycase the reference gets replaced when they got rediscovered.
				//if: !(buddyList.contains(uidOf(flockr))) then: {
				uidFlockrMap.remove(uidOf(flockr));
				// Note: the 'newProfile' profile may be outdated by now, but it only serves
				// to remove all profiles with the same username from the RETE network
				notifyListeners: discoveryListeners with: <-notifyLeft(newProfile);
			};
			
		} catch: TimeoutException using: { |e|
			// ignore this Flockr
		};
		
	};
	
	localInterface;
	
};

// the module object of this file
object: {
	
	// makeFlockr(profile) -> returns a Flockr object
	def makeFlockr := &makeFlockr;
	def uidOf := &uidOf;
	
	// run these unit tests sequentially
	def FlockrTest := extend: /.at.unit.test.UnitTest.new("FlockrTest", false) with: {
		
		def testAsyncProfileExchange() {
			def [fut,res] := makeFuture(seconds(10));
			
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "flockr1";
		  def flockr1 := makeFlockr(profile1);
		
			def listener := object: {
				def notifyProfileChanged(flockr, newProfile) {
					res.resolve(newProfile.username);
				};
			};
			flockr1.registerProfileChangedListener(listener);
			
			def a := actor: {
				import /.at.urbiflock.flockr;
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "flockr2";
			  def flockr2 := makeFlockr(profile2);
			  def goOffline() { flockr2.goOffline(); `ok };
			};
			
			when: fut becomes: { |uname|
				self.assertEquals("flockr2", uname);
				// clean up the flockrs created in this test
				flockr1.goOffline();
				a<-goOffline()@FutureMessage;
			};
			
		};
		
		def testAsyncUpdateProfileInBuddyList() {
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "flockr2.1";
			def flockr1 := makeFlockr(profile1);
			def profile2 := /.at.urbiflock.profile.makeProfile();
			profile2.username := "flockr2.2";
			profile2.firstname := "Jef";
			flockr1.addBuddy(profile2);
			self.assertEquals((flockr1.getBuddy("flockr2.2")).firstname, "Jef");
			
			def a := actor: {
				import /.at.urbiflock.flockr;
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "flockr2.2";
				profile2.firstname := "Marcel";
			  def flockr2 := makeFlockr(profile2);
			  def goOffline() { flockr2.goOffline(); `ok };
			};
			
			// We wait 5 seconds for the event to be delivered and the profile to be updated.
			// If this test fails, maybe the update did not happen within 5 seconds.			
			/.at.support.timer.when: seconds(5) elapsedWithFuture: {
				self.assertEquals((flockr1.getBuddy("flockr2.2")).firstname, "Marcel");
				// clean up the flockrs created in this test
				flockr1.goOffline();
				a<-goOffline()@FutureMessage;
			};
		};
		
		def testAsyncMatchProfile() {
			def profile1 := /.at.urbiflock.profile.makeProfile();
			profile1.username := "flockr3.1";
			def flockr1 := makeFlockr(profile1);

			self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 0);

			def a := actor: {
				import /.at.urbiflock.flockr;
				def profile2 := /.at.urbiflock.profile.makeProfile();
				profile2.username := "flockr3.2";
				profile2.firstname := "foo";
			  def flockr2 :=	makeFlockr(profile2);
				def goOffline() { flockr2.goOffline(); `ok };
			};

			/.at.support.timer.when: seconds(5) elapsedWithFuture: {
				self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 1);
				def newMatchingProfile := /.at.urbiflock.profile.makeProfile();
				newMatchingProfile.setFieldShouldMatch(`firstname);
				newMatchingProfile.firstname := "bar";
				flockr1.updateMatchingProfile(newMatchingProfile);

				/.at.support.timer.when: seconds(5) elapsedWithFuture: {
					self.assertEquals(flockr1.getFlock("Matching Profiles").getFlockrList().length(), 0);
					
					// clean up the flockrs created in this test
					flockr1.goOffline();
					a<-goOffline()@FutureMessage;
				};
			};
		};
	};
	
};