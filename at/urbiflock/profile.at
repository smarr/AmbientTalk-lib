/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

deftype MandatoryFieldRemoval <: lobby.at.types.Exception;
def XMandatoryFieldRemoval := lobby.at.exceptions.createException(MandatoryFieldRemoval);

deftype DuplicateField <: lobby.at.types.Exception;
def XDuplicateField := lobby.at.exceptions.createException(DuplicateField);


def makeProfileMandatoryFields() { 
	isolate: {
		// a unique username for a Flockr (type: string, mandatory)
		def username := "";
		// the Flockr's first name (type: string, mandatory)
		def firstname := "";
		// the Flockr's last name (type: string, mandatory)
		def lastname := "";
		// the Flockr's birthdate (type: java.util.Date, optional)
		def birthdate := "";
		// the Flockr's sex (type: `male | `female, optional)
		def sex := "";
	};
};

// the profile is a property list, but it's implemented as an isolate object
def makeProfile() {
	extend: makeProfileMandatoryFields() with: {
		def isMandatoryField(propName) {
			(reflect: super).respondsTo(propName);
		};
		
		def propertyHashMap() {
			def theMap := jlobby.java.util.HashMap.new();
			((reflect: super).listFields()).each: { |field|
				theMap.put(field.name(), field.readField());
			};
			((reflect: self).listFields()).each: { |field|
				theMap.put(field.name(), field.readField());
			};
			theMap.remove(`super);
			theMap;
		};
		
		def addField(propName, propVal) {
			if: (reflect: self).respondsTo(propName) then: {
				raise: XDuplicateField.new("Profile already has property: " + propName);
			} else: {
				(reflect: self).defineField(propName, propVal);
			}
		};
		
		def removeField(propName) {
			if: isMandatoryField(propName) then: {
				raise: XMandatoryFieldRemoval.new("Cannot remove mandatory property from profile: " + propName);
			} else: {
				(reflect: self).removeSlot(propName);
			}
		};
		
		def setField(propName, propVal) {
			if: (nil != ((reflect: self).listFields().find: { |f| f.name() == propName })) then: {
				((reflect: self).grabField(propName)).writeField(propVal);
			} else: {
				((reflect: super).grabField(propName)).writeField(propVal);
			}
		};
	}
};

def addProperty(profile, propName, propVal) {
	if: (reflect: profile).respondsTo(propName) then: {
		raise: XDuplicateField.new("Profile already has property: " + propName);
	} else: {
		(reflect: profile).defineField(propName, propVal);
	}
};

def removeProperty(profile, propName) {
	if: profile.isMandatoryField(propName) then: {
		raise: XMandatoryFieldRemoval.new("Cannot remove mandatory property from profile: " + propName);
	} else: {
		(reflect: profile).removeSlot(propName);
	}
};

// the module object of this file
object: {
	def makeProfile := &makeProfile;
	
	def Test := extend: /.at.unit.test.UnitTest.new("ProfileTest") with: {
		
		// unit tests go here
		
		def testAddAndRemoveProperty() {
			def profile := makeProfile();
			self.assertFalse((reflect: profile).respondsTo(`testProperty));
			profile.addField(`testProperty, "testProperty");
			self.assertTrue((reflect: profile).respondsTo(`testProperty));
			self.assertEquals(profile.testProperty, "testProperty");
			profile.removeField(`testProperty);
			self.assertFalse((reflect: profile).respondsTo(`testProperty));
		};
		
		def testRemoveMandatoryProperty() {
			def profile := makeProfile();
			self.assert: MandatoryFieldRemoval raisedIn: { 
				profile.removeField(`username);
			};
		};
		
		def testDuplicateProperty() {
			def profile := makeProfile();
			self.assert: DuplicateField raisedIn: { 
				profile.addField(`username, "Zazawie");
			};
		};
		
	};
	
};