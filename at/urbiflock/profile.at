/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: PROG Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


deftype MandatoryFieldRemoval <: lobby.at.types.Exception;
def XMandatoryFieldRemoval := lobby.at.exceptions.createException(MandatoryFieldRemoval);

deftype DuplicateField <: lobby.at.types.Exception;
def XDuplicateField := lobby.at.exceptions.createException(DuplicateField);

deftype InvalidFieldType <: lobby.at.types.Exception;
def XInvalidFieldType := lobby.at.exceptions.createException(InvalidFieldType);

def ProximityModule := /.at.urbiflock.proximity;


def AbstractFieldTypeObject := isolate: {
	deftype ChildObjectResponsibility <: lobby.at.types.Exception;
	def XChildObjectResponsibility := lobby.at.exceptions.createException(ChildObjectResponsibility);
	
	def isString() { false };
	def isEnumeration() { false };
	def isInteger() { false };
	def isDate() { false };
	def isPossibleValue(aValue) { false };
	def getPossibleValues() { 
		raise: XChildObjectResponsibility.new("getPossibleValues() not applicable for this type.") 
	};
	def name() { 
		raise: XChildObjectResponsibility.new("name() should be overridden by children of AbstractFieldTypeObject.") 
	};
	def defaultValue() {
		raise: XChildObjectResponsibility.new("defaultValue() should be overridden by children of AbstractFieldTypeObject.")
	};
	def fieldSize() {
		raise: XChildObjectResponsibility.new("fieldSize() not applicable for this type.")
	};
	def comparators() {
		raise: XChildObjectResponsibility.new("comparators() should be overridden by children of AbstractFieldTypeObject.")
	};
};

def StringFieldTypeObject := extend: AbstractFieldTypeObject with: {
	def fieldSize := 20;
	def isString() { true };
	def isPossibleValue(aValue) { is: aValue taggedAs: /.at.types.Text };
	def name() { "Text" };
	def defaultValue() { "" };
	def getFieldSize() { fieldSize };
	def setFieldSize(newSize) { fieldSize := newSize };
	def comparators() { [ `== ] };
};

def EnumerationFieldTypeObject := extend: AbstractFieldTypeObject with: {
	def possibleValues := [];
	def isEnumeration() { true };
	def getPossibleValues() { possibleValues };
	def isPossibleValue(aValue) { possibleValues.contains(aValue); };
	def init(thePossibleValues) {
		possibleValues := thePossibleValues;
	};
	def name() { "Choice" };
	def defaultValue() { possibleValues[1] };
	def comparators() { [ `== ] };
};

def IntegerTypeFieldObject := extend: AbstractFieldTypeObject with: {
	def lowerBound := nil;
	def higherBound := nil;
	def isInteger() { true };
	def isPossibleValue(aValue) {
		(is: aValue taggedAs: /.at.types.Number).and: {
			((nil == lowerBound).or: { aValue >= lowerBound }).and: {
				(nil == higherBound).or: { aValue <= higherBound }
			} 
		}
	};
	def name() { "Integer" };
	def defaultValue() { 
		if: (is: lowerBound taggedAs: /.at.types.Number) then: {  
			lowerBound; 
		} else: { 
			0 
		} 
	};
	def comparators() { [ `==, `<, `> ] };
	def init(low, high) {
		lowerBound := low;
		higherBound := high;
	};
};

def DateTypeFieldObject := extend: AbstractFieldTypeObject with: {
	def lowerBound := nil;
	def higherBound := nil;
	def isDate() { true };
	def isPossibleValue(aValue) {
		//def calendarClass := jlobby.java.lang.Class.forName("java.util.Calendar");
		//(calendarClass.isInstance(aValue)).and: {
			((nil == lowerBound).or: { aValue.after(lowerBound) }).and: {
				(nil == higherBound).or: { aValue.before(higherBound) }
			} 
		//}
	};
	def name() { "Date" };
	def defaultValue() { 
		if: (nil == lowerBound) then: { 
			0 
		} else: {
			def currentDate := jlobby.java.util.Calendar.getInstance(); 
			if: ((nil != higherBound).and: { currentDate.after(higherBound) }) then: {
				higherBound
			} else: {
				currentDate
			}
		} 
	};
	def comparators() { [ `==, `<, `> ] };
	def init(low, high) {
		lowerBound := low;
		higherBound := high;
	};
};

def makeProfileMandatoryFields() {
	def theProfile := isolate: {
		
		def fieldTypeMap := jlobby.java.util.HashMap.new();
		def matchingFields := /.at.collections.vector.Vector.new();
		
		def possibleTypes() { 
			[
			StringFieldTypeObject,
			EnumerationFieldTypeObject,
			IntegerTypeFieldObject,
			DateTypeFieldObject
			]
		};
				
		// a unique username for a Flockr (type: string, mandatory)
		def username := "";
		// the Flockr's first name (type: string, mandatory)
		def firstname := "";
		// the Flockr's last name (type: string, mandatory)
		def lastname := "";
		// the Flockr's birthdate (type: java.util.Date, optional)
		def birthdate := jlobby.java.util.Calendar.getInstance();
		// the Flockr's sex (type: `male | `female, optional)
		def sex := `Male;
		
		def getFieldType(fieldName) {
			fieldTypeMap.get(fieldName);
		};
		
		def getFieldTypeWithName(typeName) {
			def found := (possibleTypes().filter: { |type| type.name() == typeName });
			if: (found.length != 1) then: {
				raise: XInvalidFieldType.new("Profile field type: " + typeName + " not found.");
			};
			found[1];
		};
		
		def checkFieldTypeForValue(field, value) {
			(getFieldType(field)).isPossibleValue(value);
		};
		
		def addFieldTypeMapping(field, typeObject) {
			fieldTypeMap.put(field, (/.at.support.symbiosis.cast: typeObject into: (jlobby.at.urbiflock.ui.AbstractFieldType)));
		};
		
		def removeFieldTypeMapping(field) {
			fieldTypeMap.remove(field);
		};
		
		def setFieldShouldMatch(fieldName) {
			if: (!fieldShouldMatch(fieldName)) then: {
				matchingFields.add(fieldName);
			}
		};
		def setFieldShouldNotMatch(fieldName) {
			if: (fieldShouldMatch(fieldName)) then: {
				matchingFields.remove(fieldName);
			}
		};
		def fieldShouldMatch(fieldName) {
			matchingFields.contains(fieldName);
		};
		def getMatchingFields() {
			matchingFields
		};
		
		def makeStringFieldTypeObject() {
			StringFieldTypeObject.new();
		};
		def makeEnumerationFieldTypeObject(possibleValues) {
			EnumerationFieldTypeObject.new(possibleValues);
		};
		def makeIntegerTypeFieldObject(low, high) {
			IntegerTypeFieldObject.new(low, high);
		};
		def makeDateTypeFieldObject(low, high) {
			DateTypeFieldObject.new(low, high);
		};
	};
	
	theProfile.addFieldTypeMapping(`username, StringFieldTypeObject.new());
	theProfile.addFieldTypeMapping(`firstname, StringFieldTypeObject.new());
	theProfile.addFieldTypeMapping(`lastname, StringFieldTypeObject.new());
	theProfile.addFieldTypeMapping(`birthdate, DateTypeFieldObject.new(nil, nil));
	theProfile.addFieldTypeMapping(`sex, EnumerationFieldTypeObject.new([ `Male, `Female ]));
	
	theProfile;
};

// the profile is a property list, but it's implemented as an isolate object
def makeProfile() {
	def theProfile := extend: makeProfileMandatoryFields() with: {
		
		def isMandatoryField(propName) {
			(reflect: super).respondsTo(propName);
		};
		
		def propertyHashMap() {
			def theMap := jlobby.java.util.HashMap.new();
			((reflect: super).listFields()).each: { |field|
				theMap.put(field.name(), field.readField());
			};
			((reflect: self).listFields()).each: { |field|
				theMap.put(field.name(), field.readField());
			};
			theMap.remove(`super);
			theMap.remove(`fieldTypeMap);
			theMap.remove(`matchingFields);
			theMap;
		};
		
		def addField(propName, propVal, propType) {
			if: (reflect: self).respondsTo(propName) then: {
				raise: XDuplicateField.new("Profile already has property: " + propName);
			} else: {
				(reflect: self).defineField(propName, propVal);
				super.addFieldTypeMapping(propName, propType);
			}
		};
		
		def removeField(propName) {
			if: isMandatoryField(propName) then: {
				raise: XMandatoryFieldRemoval.new("Cannot remove mandatory property from profile: " + propName);
			} else: {
				(reflect: self).removeSlot(propName);
				super.removeFieldTypeMapping(propName);
				super.setFieldShouldNotMatch(propName);
			}
		};
		
		def setField(propName, propVal) {
			if: (nil != ((reflect: self).listFields().find: { |f| f.name() == propName })) then: {
				((reflect: self).grabField(propName)).writeField(propVal);
			} else: {
				((reflect: super).grabField(propName)).writeField(propVal);
			}
		};
		
		def fieldMatches(field, value) {
			if: (nil != ((reflect: self).listFields().find: { |f| f.name() == field })) then: {
				((reflect: self).grabField(field)).readField() == value;
			} else: {
				((reflect: super).grabField(field)).readField() == value;
			}
		};
		
	};
	
	theProfile;
};

def addProperty(profile, propName, propVal) {
	if: (reflect: profile).respondsTo(propName) then: {
		raise: XDuplicateField.new("Profile already has property: " + propName);
	} else: {
		(reflect: profile).defineField(propName, propVal);
	}
};

def removeProperty(profile, propName) {
	if: profile.isMandatoryField(propName) then: {
		raise: XMandatoryFieldRemoval.new("Cannot remove mandatory property from profile: " + propName);
	} else: {
		(reflect: profile).removeSlot(propName);
	}
};


def createProfileMatchingProximities(flockr, matchingProfile) {
	def proximities := (matchingProfile.getMatchingFields()).map: { |fieldName|
		ProximityModule.makeDoesProfileMatchProximity(flockr,
			{ |profile|
				(reflect: profile).invokeField(profile, fieldName) == 
					 (reflect: matchingProfile).invokeField(matchingProfile, fieldName) })
	};
	if: (proximities.isEmpty()) then: {
		proximities.add(ProximityModule.makeDoesProfileMatchProximity(flockr, { |profile| true }));
	};
	proximities;
};

def constructProfileMatchingProximityFromProximities(flockr, proximities) {
	def result := proximities.at(1);
	if: (proximities.length() > 1) then: {
		(proximities.select(2, proximities.length())).each: { |proximity|
			result := ProximityModule.makeAndProximity(result, proximity);
		};
	};
	result;
};

// the module object of this file
object: {
	def makeProfile := &makeProfile;
	def createProfileMatchingProximities := &createProfileMatchingProximities;
	def constructProfileMatchingProximityFromProximities := &constructProfileMatchingProximityFromProximities;
	
	def ProfileTest := extend: /.at.unit.test.UnitTest.new("ProfileTest") with: {
		
		// unit tests go here
		
		def testAddAndRemoveProperty() {
			def profile := makeProfile();
			self.assertFalse((reflect: profile).respondsTo(`testProperty));
			profile.addField(`testProperty, "testProperty", StringFieldTypeObject.new());
			self.assertTrue((reflect: profile).respondsTo(`testProperty));
			self.assertEquals(profile.testProperty, "testProperty");
			profile.removeField(`testProperty);
			self.assertFalse((reflect: profile).respondsTo(`testProperty));
		};
		
		def testRemoveMandatoryProperty() {
			def profile := makeProfile();
			self.assert: MandatoryFieldRemoval raisedIn: { 
				profile.removeField(`username);
			};
		};
		
		def testDuplicateProperty() {
			def profile := makeProfile();
			self.assert: DuplicateField raisedIn: { 
				profile.addField(`username, "Zazawie", StringFieldTypeObject.new());
			};
		};
		
	};
	
};