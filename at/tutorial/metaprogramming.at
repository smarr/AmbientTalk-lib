/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * unit test for the basic programming tutorial chapter
 * @author stimberm
 */
extend: /.at.unit.test.UnitTest.new("MetaprogrammingTutorial") with: {

		def testSyntacticSugar() {
			self.assertEquals([5,6,7][2], 6);
			self.assertEquals([5, 6, 7].at(2), 6);
			
			self.assertEquals(if: 1 == 2 then: { 13 } else: { 42 }, 42);
			self.assertEquals((1 == 2).ifTrue: { 13 } ifFalse: { 42 }, 42);
			
			self.assertEquals(1 + 2 * 3, 7);
			self.assertEquals(1.+(2.*(3)), 7);
		};
		
		def testQuotingSplicing() {
		
			self.assertEquals(`3, 3);
			self.assertEquals(`3 + 8, 11);
			self.assertEquals(`"text", "text");
			self.assertEquals(`foo.text, "foo");
			self.assertEquals(print: `(foo.text), "foo.text");
			self.assertEquals(print: `(foo(1, 2, 3)), "foo(1, 2, 3)");
			self.assertEquals(print: `(1+2), "1.+(2)");
			self.assertEquals(print: `(o.m()), "o.m()");
			self.assertEquals(print: `{ def a := 4 }, "def a := 4");
			
			self.assertEquals(print: `{ def tab[5] { m() }; tab[3] := n() }, "def tab[5] { m()}; tab[3] := n()");
			
			def tab := [ 1+2, 3+4, 5+6 ];
			self.assertEquals(print: tab, "[3, 7, 11]");
			
			def anotherTab := `[ 1+2, 3+4, 5+6 ];
			self.assertEquals(print: anotherTab, "[1.+(2), 3.+(4), 5.+(6)]");
			
			def msg() { `foo };
			def arg(n) { n+5 };
			
			self.assertEquals(print: `(o.#(msg())(#(arg(1)))), "o.foo(6)");
			
			def upTo(n) { def idx := 0; def tab[n] { idx := idx + 1 } };
			self.assertEquals(print: [ 7, 8, 9, @upTo(4) ], "[7, 8, 9, 1, 2, 3, 4]");
			self.assertEquals(print: [ 7, 8, 9, upTo(4) ], "[7, 8, 9, [1, 2, 3, 4]]");
			self.assertEquals(print: `(o.m(a, b, #@(upTo(5)))), "o.m(a, b, 1, 2, 3, 4, 5)");
			self.assertEquals(print: `[ @upTo(3), #@(upTo(2)), #(upTo(3))], "[@upTo(3), 1, 2, [1, 2, 3]]");
			
		};
		
		def testFirstClassAG() {
		
			self.assertEquals(print: `(f(1, 2, 3)).function, "f");
			self.assertEquals(print: `(f(1, 2, 3)).arguments, "[1, 2, 3]");
			
			def application := `(f(1, 2, 3));
			self.assertEquals(print: application, "f(1, 2, 3)");
			self.assertEquals(print: application.new(`g, [4, 5, 6]), "g(4, 5, 6)");
		};
		
		def testReadEvalPrint() {
			self.assertEquals(print: (read: "1+2"), "1.+(2)");
			self.assertEquals(print: (eval: `(1+2) in: self), "3");
			
			def o := object: { def x := 4 };
			self.assertEquals(eval: `x in: o, 4);
		};
};
