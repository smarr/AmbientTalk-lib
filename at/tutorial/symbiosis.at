/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * unit test for the symbiosis programming tutorial chapter
 * @author jessie
 */
extend: /.at.unit.test.UnitTest.new("SymbiosisTutorial") with: {
		def Vector := nil;
		def aVector := nil;
	
		def setupAccess() {
			Vector := jlobby.java.util.Vector;
			aVector := Vector.new();
		};

		def testJavaAccess() {
			setupAccess();
		  self.assertEquals(Vector, jlobby.java.util.Vector);
			self.assertEquals( print: aVector, "<java:[]>");
		};

		def testJavaInvocation() {
			setupAccess();
			def result := 1.to: 10 do: { |i| aVector.add(i) };
		  self.assertEquals(result, nil);
			self.assertEquals( print: aVector, "<java:[1, 2, 3, 4, 5, 6, 7, 8, 9]>");			
		};
		
		def testJavaOverloading() {
			setupAccess();
			1.to: 10 do: { |i| aVector.add(i) };
			def remove := aVector.&remove;
			self.assertEquals( print: remove, "<java closure:remove>");	
			def result := remove.cast(jlobby.java.lang.Integer.TYPE)(0);
		  self.assertEquals(result, 1);
			self.assertEquals( print: aVector, "<java:[2, 3, 4, 5, 6, 7, 8, 9]>");			
			result := remove.cast(jlobby.java.lang.Object)(3);
		  self.assertTrue(result);
			self.assertEquals( print: aVector, "<java:[2, 4, 5, 6, 7, 8, 9]>");
		};
		
		def testJavaCallback() {
			def SymbiosisDemo := jlobby.at.tutorial.SymbiosisDemo;
			def javaDemo := SymbiosisDemo.new();
			def atObject := object: {
				def ping() { system.println("ping!"); javaDemo.run2(self); };
				def pong() { system.println("pong!"); 42 }
			};
			def result := javaDemo.run(atObject);	
		  self.assertEquals(result, 42);					
		}
};
