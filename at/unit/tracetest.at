/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2009
 * Authors: Ambient Group at SOFT
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
def CausewayTest := extend: /.at.unit.test.UnitTest.new("TracingTest") with: {
	import /.at.lang.futures;
	
	def testAsyncIntraActorTraces() {
	  def [f,r] := makeFuture(5.seconds);	
	  actor: {
			def Tracer := /.at.support.tracer("singleactor").traceOn();

			def o := object: {
				def m(cb) {
					Tracer.comment("leadsto: result");
					cb<-run(42);
				}
			};

			o<-m(object: {
				def run(v) {
					Tracer.comment("happened: result");
					system.println("got: "+v);
					system.println("closed "+Tracer.close());
					r<-resolve(`ok);
				}
			});
			
	  };
	  f
	};

	// example of tracing between two actors using futures	
	def testAsyncInterActorTraceWithFutures() {
		def [f1,r1] := makeFuture(10.seconds);
		def [f2,r2] := makeFuture(10.seconds);	
		
	  actor: {
			import /.at.lang.futures;
			def Tracer := /.at.support.tracer("actor1").traceOn();

			def remote := actor: {
			  import /.at.support.timer;
				def T := /.at.support.tracer("actor2").traceOn();
				def m() {
				  when: 3.seconds elapsed: {
				    system.println("closed "+T.close());
						r2<-resolve(`ok);
				  };
				  42
				};
			};

			when: remote<-m()@FutureMessage becomes: {|v|
				system.println("got "+v);
				system.println("closed "+Tracer.close());
				r1<-resolve(`ok);
			};
		
		};
		group: [f1,f2];
	};
	
	// Note: this should actually be an asynchronous test,
	// but I did not use futures in the purchase example future to
	// not complicate the causeway traces with futures tracing
	def testPurchaseExample() {
		/.at.demo.purchase_example;
	};
	
};