def CrimeFactory := jlobby.edu.vub.crime.CrimeFactory;
def ExpressionFactory := jlobby.edu.vub.crime.grammar.ExpressionFactory;
def GenericFact := jlobby.edu.vub.crime.grammar.GenericFact;
def ExpressionList := jlobby.edu.vub.crime.grammar.ExpressionList;
def Event := jlobby.edu.vub.crime.grammar.Event;
def AmbientTalkEvent := jlobby.edu.vub.crime.grammar.AmbientTalkEvent;
def AmbientTalkAction := jlobby.edu.vub.crime.AmbientTalkAction;
def IndexingVisitor := jlobby.edu.vub.crime.parser.IndexingVisitor;
def AmbientTalkVisitor := jlobby.edu.vub.crime.grammar.utils.AmbientTalkVisitor;
def Constraint := jlobby.edu.vub.crime.grammar.Constraint;
def Operator := jlobby.edu.vub.crime.grammar.attributes.Operator;
import /.at.exceptions;

/*

def newBlockStatementsAct := `{ | #@(varNames().map: {|e| jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(e);}) | #@(act.method.bodyExpression.statements) };
act := eval: newBlockStatementsAct in: act.context.lexicalScope;

def newBlockStatementsDeact := `{ | #@(varNames().map: {|e| jlobby.edu.vub.at.objects.natives.grammar.AGSymbol.jAlloc(e);}) | #@(deact.method.bodyExpression.statements) };
deact := eval: newBlockStatementsDeact in: deact.context.lexicalScope;

*/


def isJavaObject(o) {
	((reflect: o).listMethods.map: { |e| e.name }).contains(`getClass);
};

def mapArguments(args,vars) {
	def argmap := jlobby.java.util.HashMap.new();		
	def it := vars.iterator;
	def i := 0;
	while: { it.hasNext } do: {
		def var := it.next;
		argmap.put(var.toString(), args.get(i));
		i := i +1;
	};

	object: {
		def get(literal) {
			//UGLY UGLY UGLY 
			//Reason I can't seem to convert a string to literal so I have to do it the otherway around
			//+ The getName of a variable puts a ?
			jlobby.edu.vub.crime.grammar.utils.AmbientTalkVisitor.visit(argmap.get("?"+literal.text()));
		};
	};
};

def newAmbientTalkEvent(act,deact,vars) {
	def event := AmbientTalkEvent.new(
	AmbientTalkAction.new(
		object: {
			def getClass() { jlobby.edu.vub.crime.Action };
			
			def getVectorVariables(token) {
				def fact := event.buildFact(token);	
			 	fact.attributes();
			};
		
			def activated(token){
				//REALLY REALLY REALLY DIRTY 
				act((token.get(0)).toVector(),mapArguments(getVectorVariables(token.get(0)),vars)); 
			};
			def deactivate(token){ 
				//REALLY REALLY REALLY DIRTY 
				deact((token.get(0)).toVector(),mapArguments(getVectorVariables(token.get(0)),vars)); 
			}; 
	}));
};

def newEvent(act,deact,vars) {
	Event.new(
	AmbientTalkAction.new(
		object: {
			def getClass() { jlobby.edu.vub.crime.Action };
			def activated(vectorVariables){ 		
				act(mapArguments(vectorVariables,vars)); 
			};
			def deactivate(vectorVariables){ 
				deact(mapArguments(vectorVariables,vars)); 
			}; 
	}));
};

def convertFactToAmbientTalk(fact) {
	def visitor :=  AmbientTalkVisitor.new();
	def attributes := fact.attributes;
	def it := attributes.iterator;
	def tab := [];
	while: { it.hasNext } do: {
		tab := tab + [visitor.visit(it.next)];
	};
	makeTuple(tab);
};

def convertTokenToAmbientTalk( token ){
	def it := token.iterator;
	def tab := [];
	while: { it.hasNext } do: {
		tab := tab + [convertFactToAmbientTalk(it.next)];
	};	
	tab;
};

def convertTupleToCrimeFact(tuple, rule) {
	def newFact := GenericFact.new( "private" , tuple.getField(1) );
	def theIndexer :=  IndexingVisitor.new(newFact);
	def index := 1;
	newFact.setItsContextRule(rule);
	tuple.each: { |f|
		if: isJavaObject(f) then: {
			//its a variable so we don't need to make it into an argument anymore
			theIndexer.nextAttribute(f);
		} else: {
			//its a constant and will be converted anyway by the coercer :)
			def attr := ExpressionFactory.attribute(f);
			theIndexer.nextAttribute(attr);
		};
	};
	newFact;
};

def packRule(table,act,deact) {
	isolate: { |table,act,deact|
		def getTable() {table};
		def getAct() {act};
		def getDeact() {deact};
	};
};

def makeRule(table,act,deact,eventMaker := &newEvent) {
	def prerequisite := ExpressionList.whichAcceptsFacts();
	def consequence := ExpressionList.whichAcceptsFactsAndEvents();
	table.each: {|e| 		
		if: isJavaObject(e) then: { 
			prerequisite.add(e);
		} else: {
			prerequisite.add(convertTupleToCrimeFact(e,nil)); 
		};
	};
	def vars := prerequisite.variables;
	def it := vars.iterator;
	def event := eventMaker(act, deact,vars);
	while: { it.hasNext } do: {
		event.addAttribute(it.next);
	};
	consequence.add(event);
	ExpressionFactory.rule(consequence, prerequisite);
};

//def t1 := makeTemplate: ["GPS", var: `x, 3] with: [ var: `x lessThen: 5 ] ;

def makeTemplate(@fields) {
	isolate: {
	def length(){ fields.length };
	def getField(n) { fields[n] };
	def match(t1) {
		if: (t1.length == self.length) then: {
			def it := 1;
			def result := true;
			fields.each: {|e2| 
				def e1 := t1.getField(it); 
				result := result.and: { e1 = e2 };
				it := it +1; 
			};
			result;
		} else: {
			false;
		};
	};
	
	def each: l  {
		fields.each: l;
	};
	};
};

def makeTuple(@fields) {
	fields.each: { |e|
		if: isJavaObject(e) then: {
			error("Attempt to create a tuple with a variable !"); 
		};
	};
	makeTemplate(@fields);
};

def makeCrimeEngine() { 
	
	//create new engine;
	def engine := CrimeFactory.createEngine();
	
	//public interface of a crime engine.
	object: {
	
    def insertTuple(tuple, rule := nil) {
		def crimeFact := convertTupleToCrimeFact(tuple,rule);
	    engine.assert(crimeFact);
		isolate: { 
		    def retract() {
			    engine.retract(crimeFact);
		    };
	    };
    };

    def retractTuple(tuple) {
	    engine.retract(convertTupleToCrimeFact(tuple,nil));
    };

	def retractCrimeFact(fact) {
		engine.retract(fact);
	};

	def readTuple(template) {
		convertFactToAmbientTalk(engine.read(convertTupleToCrimeFact(template,nil)));
	};

    def when: table activated: act {
	    when: table activated: act deactivated: {|args| nil};
    };

    def when: table activated: act deactivated: deact {
		when: table activated: act deactivated: deact withConstraints: [];
    };

	def when: table activated: act withConstraints: constraints {
		when: table activated: act deactivated: {|args| nil} withConstraints: constraints;
	};
	
	def when: table activated: act deactivated: deact withConstraints: constraints {
		when: table activated: act deactivated: deact withConstraints: constraints event: &newEvent;
	};

	def when: table activated: act deactivated: deact withConstraints: constraints event: event  {
	    def rule :=  makeRule(table,act, deact, event);
		constraints.each:{|c| rule.getPrerequisite().add(c) };
	    engine.deploy(rule);
	    isolate: {
		    def cancel() {
			    engine.undeploy(rule);
		    };
	    };
    };

	def when: table activatedToken: act {
    	when: table activatedToken: act deactivatedToken: {|token, varMap|};		
	};

	def when: table activatedToken: act deactivatedToken: deact {
		def rule :=  makeRule(table, act, deact, &newAmbientTalkEvent);
	    engine.deploy(rule);
	    isolate: { 
		    def cancel() {
			    engine.undeploy(rule);
		    };
	    };
	};

  };
};



def CrimeModule := object: {
	
	def makeCrimeEngine := &makeCrimeEngine;
	def makeTuple := &makeTuple;
	def makeTemplate := &makeTemplate;
	def convertTokenToAmbientTalk := &convertTokenToAmbientTalk;
	def convertFactToAmbientTalk := &convertFactToAmbientTalk;
	def isJavaObject := &isJavaObject; //TODO remove?!
	
	def var: symbol {
		ExpressionFactory.variable(symbol.text);	
	};
	
	def var: symbol lessThen: value {
		Constraint.new(ExpressionFactory.variable(symbol.text), Operator.LTH, ExpressionFactory.attribute(value));
	};
		
	def CrimeTest := extend: /.at.unit.test.UnitTest.new("Crime", false) with: {
		import /.at.lang.futures;
		enableFutures(false);
		def myCrime := makeCrimeEngine();
		
		
		/*
		* Tests the reading of crime tuples (does not remove the tuple).  TODO 
		*/
		def testReadFromCrime() {
			def tuple :=  makeTuple("testReadFromCrime", 3, 4);
			myCrime.insertTuple(tuple);
			def retrievedTuple := myCrime.readTuple(makeTemplate("testReadFromCrime", var: `x, 4));
			retrievedTuple := myCrime.readTuple(makeTemplate("testReadFromCrime", var: `x, 4));			
		};
		
		/*
		* Tests the insertions of crime tuples which are extended with AmbientTalk rules.  
		*/
		def testRetrieveRuleFromCrime() {
			def tuple :=  makeTuple("testRetrieveRuleFromCrime", 3, 4);
			def ruleData := [ makeTemplate("testRetrieveRuleFromCrime", 30, 30) ];
			myCrime.insertTuple(tuple, ruleData);
			def retrievedTuple := myCrime.retractTuple(makeTemplate("testRetrieveRuleFromCrime", var: `x, 4));
			self.assertEquals(retrievedTuple.getItsContextRule, ruleData);
		};
	 /*
		* Test the constraints construction
		* when: [Template1,..,TemplateN] activated: Closure 
		* where template can include constraints put extra requirements on varibales 
		*/
		def testAsyncConstraint() {	
			def [fut,res] := makeFuture(); 
					
			myCrime.when: [ makeTemplate("testConstraint", var:`x, 4), var: `x lessThen: 10 ] activated: { |varMap|
				self.assertEquals(varMap.get(`x).toString,"3");
				res.resolve("OK")
			};
			
			def failTuple :=  makeTuple("testConstraint", 80, 4);
			def activatedTuple :=  makeTuple("testConstraint", 3, 4);
			
			myCrime.insertTuple(failTuple);
			myCrime.insertTuple(activatedTuple);
			fut;
		};
		
		/*
		* Tests the special construct to retrieve the token which triggered the rule.
		* For example in  (defrule (some-action) => (t1 ?x ?y) (t2 ?x ?y)  ) 
		* some-action could receive the following token [ (t1 5 6), (t2 5 6) ]
		*/
		def testAsyncGetActivatedToken() {
			def [fut,res] := makeFuture(); 
			myCrime.when: [ makeTemplate("testAsyncGetActivatedToken", var:`x, 4) ] activatedToken: { |token, varMap|
				self.assertEquals( 3, token.get(0).attributes().get(1).getValue());
				self.assertEquals(varMap.get(`x).toString,"3");
				res.resolve("OK");
			};
			myCrime.insertTuple(makeTuple("testAsyncGetActivatedToken", 3, 4));
			fut;
		};
		
		/*
		* Tests the special construct to retrieve the token which triggered the rule.
		* For example in  (defrule (some-action) => (t1 ?x ?y) (t2 ?x ?y)  ) 
		* some-action could receive the following token [ (t1 5 6), (t2 5 6) ]
		*/
		def testAsyncGetDeactivatedToken(){
			def [fut,res] := makeFuture(); 
						
			myCrime.when: [ makeTemplate("testAsyncGetDeactivatedToken", var:`x, 4) ] activatedToken: { |token, varMap|
				convertTokenToAmbientTalk(token);
				self.assertEquals( 3, token.get(0).attributes().get(1).getValue());
				self.assertEquals(varMap.get(`x).toString,"3");
			} deactivatedToken: {|token, varMap|
				self.assertEquals( 3, token.get(0).attributes().get(1).getValue());
				self.assertEquals(varMap.get(`x).toString,"3");
				res.resolve("OK");
			};
			def tuple :=  makeTuple("testAsyncGetDeactivatedToken", 3, 4);
			myCrime.insertTuple(tuple);
			myCrime.retractTuple(tuple);
			fut;		
		};
		
		/*
		 * Test that test the retraction of previously inserted tuples.
		 */	
		def testAsyncRetracting(){
			def [fut,res] := makeFuture(); 
			def countInserts := 0; def countRetracts := 0;
			myCrime.when: [makeTemplate("testAsyncRetracting", var: `x, var: `y)] activated: { |a|
				countInserts := countInserts + 1;
				self.assertLessThanOrEquals(countInserts,3);	
			} deactivated: { |a| 
				countRetracts := countRetracts + 1;
				self.assertLessThanOrEquals(countRetracts,3);
				if: (3 == countRetracts) 	then: { res.resolve(`ok)};
			};
			3.doTimes: { |i| myCrime.insertTuple(makeTuple("testAsyncRetracting", i, i)) };
			3.doTimes: { |i| myCrime.retractTuple(makeTemplate("testAsyncRetracting", var: `x, var: `x))};
			fut;
		};
		
		def testAsyncActivate() {
			def t1 := makeTemplate("testAsyncActivate", var: `x, 3);
			def t2 := makeTemplate("testAsyncActivate", 3, var: `x);				
			def [fut,res] := makeFuture();
			
			myCrime.when: [t1, t2] activated: {|args|
				def x := args.get(`x).toString;	
				res.resolve(x);
			} deactivated: { |args|
				
			};
			def shouldTrigger := makeTuple("testAsyncActivate", 3, 3);
			myCrime.insertTuple(shouldTrigger);
			myCrime.retractTuple(shouldTrigger);
			when: fut becomes: { |value|
				self.assertEquals("3", value);	
			};
		};
		/*
		def testAsyncSendRule() {
			def [fut,res] := makeFuture();
			def t1 := makeTemplate("testAsyncSendRule", var: `x, 3);
			def t2 := makeTemplate("testAsyncSendRule", 3, var: `x);
			
			def a := actor: {
				import /.at.crime.CrimeConnection;
				def myCrime := makeCrimeEngine();
				
				def doOperation(rule,res) {				
					myCrime.when: rule.getTable() activated: {|args|  
					};
					def shouldTrigger := makeTuple("testAsyncSendRule", 3, 3);
					myCrime.insertTuple(shouldTrigger);
					res.resolve(nil);
				};
			};

			def packedRule := packRule([t1, t2], script: { |args,ma| system.println("<a:: >"+ma); }, script:{ |args,md| system.println("<d:: >"+md);});
			a<-doOperation(packedRule,res);	
			fut;
		}; */
	};
};