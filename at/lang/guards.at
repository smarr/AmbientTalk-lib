/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * Implementation of asynchronous guarded methods (Does not apply to synchronous invocations)
 *
 * A guard is a predicate which must be evaluated to true in order to execute a particular branch of a program.
 * In this implementation we have applied the concept of guards to methods.
 * We allow methods to be annotated with a guard which will delay asynchronous messages until the predicate evaluates to true.
 *
 * Annotating the method with a guard is done by using the @ operator followed by the keyword message "Guard:" which expects a code block as parameter.
 * The scope of this code block is extended with the actual parameters of the method call, i.e. the parameters of the annotated method can be used as variables  
 * which will be instantiated when the method is called. An example of a guarded method is shown in example 1.  
 * In this example there is a guarded method foo which takes as parameter bar.
 * This method will only be invoked asynchronously when the parameter bar is not equal to ten.
 *
 * Example 1:
 * def foo(bar) @Guard: {!bar==10} {
 *	//code
 * }
 *
 * Guarded methods can only be used in objects which are tagged "Guarded" and mirrored by the guarded mirror.
 * This can be done as follows: 
 *
 * taggedAs: [Guarded] mirroredBy: { |base| makeGuardedMirror(base) };
 *
 * For convenience you can define an object which is tagged  like that with "guardedObject:"
 *
 * def exampleObject := guardedObject: {
 *
 *  def foo(bar) @Guard: {!bar==10} {
 * 	//code
 *  }
 *
 * }
 *
 * @author Christophe Scholliers
 * @email cfscholl@vub.ac.be
 */
import /.at.lang.values;
def filterMirror := ~.filterMirror;

def NormalVector := /.at.collections.vector.Vector;
deftype Guarded;
deftype GuardType;


/* Makes an extension of the GuardType
 * @param block, the predicate that guards the method.
 * @return the extended type.
 */
def Guard: block {
	extend: GuardType with: { |block|
		/* This method is called to possibly change the annotated method.
		 * This method is used to change the code block so that it is extend with the formal paramters of the method it annotates.
		 * For example for foo(bar) @Guard: {!bar==10} the guard will be transformed to "{|bar| !bar==10}"
		 * @param Method : The message we are annotating, we use this to get the formal parameters.
		 * @return Method : The unchanged method as no changes are made to it. 
		 */
		def annotateMethod(Method) {
			def newBlockStatements := `{ |#@(Method.parameters)| #@(block.method.bodyExpression.statements) };
			block := eval: newBlockStatements in: block.context.lexicalScope;
			Method;
		};
	} taggedAs: [/.at.types.Isolate, /.at.types.TypeTag, GuardType ];
};

/* Makes a new guarded mirror, it extends the filterMirror and installs a filer which will check the guards
 * assosiated with the message one by one and will take the logical and of their results. 
 * @param base : The base level object we install the mirror on.
 * @return mirror : The newly created mirror
 */ 
def makeGuardedMirror(base) { 
		extend: filterMirror.new(base) with: {
				
		super^setFilter({ |message|
			def annotations := self.grabSlot(message.selector).annotations;
			(annotations.filter: {|ann| ann.isSubtypeOf(GuardType) }).inject: true into: { |result, ann|
				  result.and: { !ann.block(@message.arguments) }
			}
		});
		
		super^setAfter({ |message| self.flush(); });
	};
};

/* Makes a code block into an object with a guardedMirror and the right tags installed.
 * @param block : The code block we want to transform into an object 
 * 								where we can use guarded methods in
 * @return object : The newly created object with the guarededMirror
 */
def guardedObject: block {
	object: block taggedAs: [Guarded] mirroredBy: { |base| makeGuardedMirror(base) };
};


def TraitsTest() {
	extend: /.at.unit.test.UnitTest.new("GuardsTest") with: {
		import /.at.lang.futures;
		enableFutures(true);

		def stack := guardedObject: {
			def vector := NormalVector.new();
			def pop()@Guard: {!vector.isEmpty} {
				vector.pop();
			};
	
			def push(element)@Guard: { !((vector.length() == 1 ).or: {element == 4} )} {
				vector.add(element);
			};
		};

		def testAsyncPop1() {
			when: stack<-pop() becomes: { |num|
				self.assertEquals("2", print: num);
			};
		};
		
		def testAsyncPop2() {
			when: stack<-pop() becomes: { |num|
				self.assertEquals("1", print: num);
			};
		};
		
		
		def testAsyncPop3() {
			when: stack<-pop() becomes: { |num|
				self.assertEquals("3", print: num);
			};
		};
		
		
		def testAsyncPop4() {
			when: stack<-pop() becomes: { |num|
				self.fail("testAsyncPop4: Unexpected resloved future");
			};
		};
	
		def testAsyncPush1() { 
			when: stack<-push(1)  becomes: { |result| 

			}
		};
		
		def testAsyncPush2() { 
			when: stack<-push(2)  becomes: { |result| 
			
			}
		};
		
		def testAsyncPush3() { 
			when: stack<-push(3)  becomes: { |result| 
			
			}
		};
		
		def testAsyncPush4() { 
			when: stack<-push(4)  becomes: { |result|
				self.fail("testAsyncPop4: Unexpected resloved future");
			}
		};
	}
};