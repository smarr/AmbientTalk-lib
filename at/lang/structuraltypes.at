/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * Implementation of a small library to use structural typing.
 *
 * The library allows for the creation of 'protocols', which are
 * first-class structural types. A structural type is simply a
 * set of selectors. An object o conforms to a protocol P iff
 *  for all selectors s of P, o respondsTo s
 * where respondsTo is determined by o's mirror.
 *
 * A structural type can be branded with type tags. In this case,
 * objects only conform to the type if they are structurally conformant
 * AND if they are tagged with the structural type's brands.
 *
 * Usage:
 * // use the protocol: function to create a new protocol
 *  def PersonProtocol := protocol: {
 *   def name;
 *   def age;
 *  } named: `Person;
 * // the object:implements: function automatically checks
 * // whether an object conforms to any declared types
 *  def tom := object: {
 *    def name := "Tom";
 *    def age() { 24 };
 *  } implements: PersonProtocol;
 * // you can create a protocol from an object:
 *  def tomsProtocol := protocolOf: tom;
 *
 * // you can test protocol conformance in either of two styles:
 *  does: tom implement: PersonProtocol -> true or false
 *  PersonProtocol <? tom -> true or false
 *
 * // you can also force a StructuralTypeMismatch exception to be
 * // raised if the object does not conform to the type:
 *  ensure: tom implements: PersonProtocol -> true or exception
 *  PersonProtocol.checkConformance(tom) -> true or exception
 *
 * @author tvcutsem
 */
import /.at.collections.vector;

// -- exception declarations --

deftype StructuralTypeMismatch <: /.at.lang.types.Exception;
def XStructuralTypeMismatch := extend: /.at.lang.exceptions.createException(StructuralTypeMismatch) with: {
	def protocol;
	def missingSelectors;
	def init(p, ms, failedObject) {
		protocol := p;
		missingSelectors := ms;
		def msg := "object " + failedObject + " failed to conform to " + p.typeName + ". Missing selectors:\n";
		ms.each: { |sel| msg := msg + sel + "\n" };
		super^init(msg);
	};
} taggedAs: [ StructuralTypeMismatch ];

deftype BrandMismatch <: StructuralTypeMismatch;
def XBrandMismatch := extend: /.at.lang.exceptions.createException(BrandMismatch) with: {
	def init(failedObject, failedType) {
		super^init("object " + failedObject + " not branded with " + failedType);
	}; 
} taggedAs: [ BrandMismatch ];

// -- protocol object implementations --

deftype Protocol;
def ProtocolPrototype := object: { |XStructuralTypeMismatch,StructuralTypeMismatch,XBrandMismatch,Vector|
	def selectors := [];
	def typeName := "<<empty protocol>>";
	
	def newFromObject(obj, @args) {
		def allSelectors := Vector.new();
		while: { !(nil == obj) } do: {
			def objMirror := (reflect: obj);
		  objMirror.listMethods().each: { |mth| allSelectors.add(mth.name) };
			objMirror.listFields().each: { |fld|
				allSelectors.add(fld.name);
				allSelectors.add(/.at.support.util.makeMutator(fld.name));
			};
			obj := obj.super;
		};
		// remove duplicate selectors (clumsy because selectors have no < operator, so
		// we have to compare their string representation instead)
		def uniqueSelectors := allSelectors.uniq({|s1,s2| s1==s2},{|s1,s2| (s1.text <=> s2.text) == -1 }).asTable();
		self.new(uniqueSelectors.filter: { |s| !(/.at.support.util.isPrimitive(s)) }, @args);
	};
	
	def init(sel, nam := nil) {
		selectors := sel;
		typeName := "<<" + (if: nil==nam then: &selectors else: &nam) + ">>";
	};
	
	// check whether obj conforms to self
	def checkConformance(obj) {
		def objMirror := (reflect: obj);
		def errors;
		self.selectors.each: { |sel|
			if: !(objMirror.respondsTo(sel)) then: {
				if: (nil == errors) then: {
					 errors := Vector.new();
				};
				errors.add(sel);
			};
		};
		if: !(nil == errors) then: {
			raise: XStructuralTypeMismatch.new(self, errors, obj);
		};
	};
	
	def <?(obj) {
		try: {
			self.checkConformance(obj); true;
		} catch: StructuralTypeMismatch using: {|e| false };
	};
	
	// it is possible to create new anonymous protocols
	// by appending together several protocols
	def +(otherProtocol) {
		self.new(selectors + otherProtocol.selectors);
	};
	
	// check if the given selector is a part of this protocol.
	def includes(sel) {
		selectors.contains(sel);
	};
	
} taggedAs: [Protocol, /.at.lang.types.Isolate];

// a branded protocol is a protocol that also checks type tags
def BrandedProtocolPrototype := extend: ProtocolPrototype with: {
	def brands := [];
	
	def init(sel, nam := nil, b := []) {
		super^init(sel, nam);
		brands := b;
	};
	// to conform to a branded protocol, the object should also
	// be tagged as all of the object's brands
	def checkConformance(obj) {
		super^checkConformance(obj);
		self.brands.each: { |brand|
			if: !(is: obj taggedAs: brand) then: {
				raise: XBrandMismatch(obj, brand);
			}
		};
	};
};

def StructuralTypesModule := object: {
	
	// -- export types --
	
	def StructuralTypeMismatch := StructuralTypeMismatch;
	def Protocol := Protocol;
	
	// -- export protocol creation functions --
	def protocol: closure {
		ProtocolPrototype.newFromObject(object: closure);
	};

	def protocol: closure named: name {
		ProtocolPrototype.newFromObject(object: closure, name);
	};
	
	def protocolOf: obj {
		ProtocolPrototype.newFromObject(obj, "protocol of "+obj);
	};
	
	def protocol: closure branded: tags {
		BrandedProtocolPrototype.newFromObject(object: closure, nil, tags);
	};
	
	def protocol: closure branded: tags named: nam {
		BrandedProtocolPrototype.newFromObject(object: closure, nam, tags);
	};
	
	def brandedProtocolOf: obj {
		def tags := tagsOf: obj
		if: ([] == tags) then: {
			protocolOf: obj;
		} else: {
			BrandedProtocolPrototype.newFromObject(obj, "branded protocol of "+obj, tags);
		}
	};
	
	// -- export conformance checks --
	
	// protocol can either be a Protocol object or a table of protocol objects
	def does: obj implement: protocol {
		if: (is: protocol taggedAs: Protocol) then: {
			protocol <? obj;
		} else: {
			protocol.each: { |p| p <? obj };
		}
	};
	
	// check for conformance between a protocol and another protocol rather
	// than conformance between a protocol and an object
	def does: protocol1 match: protocol2 {
		def selectors := protocol1.selectors;
		protocol2 <? (object: { } mirroredBy: (mirror: {
			def respondsTo(selector) { selectors.contains(selector) }
		}));
	};
	
	def ensure: obj implements: protocol {
		protocol.checkConformance(obj);
	};
	
	// -- export typed object creation functions --
	
	def object: closure implements: protocol {
		def o := object: closure;
		protocol.checkConformance(o);
		o;
	};
	
	// TODO: add all object creation variants here...

  def object: clo childOf: par extends: bool taggedAs: tags mirroredBy: mirror implements: protocol {
		def o := object: clo childOf: par extends: bool taggedAs: tags mirroredBy: mirror;
		protocol.checkConformance(o);
		o;
  };

  def StructuralTypeTest() {
	  extend: /.at.unit.test.UnitTest.new("StructuralTypeTest") with: {
		  def PTest := protocol: { def m(); def n(); };
		  def conformingInstance := object: { def m(); def n(); };
		  def nonConformingInstance := object: { def m(); };
		  def extensionOfConformingInstance := extend: conformingInstance with: { def p() };
		
		  def testObjectAlwaysConformsToSelf() {
			  ensure: conformingInstance implements: (protocolOf: conformingInstance);
		  };
		
		  def testProtocolConformance() {
			  ensure: conformingInstance implements: PTest;
			  ensure: extensionOfConformingInstance implements: PTest;
			  ensure: (object: { def m(); def n(); def p(); })
			    implements: (protocolOf: extensionOfConformingInstance);
		  };
		
		  def testFailingProtocolConformance() {
			  self.assert: StructuralTypeMismatch raisedIn: {
				  ensure: nonConformingInstance implements: PTest;
			  }
		  };
		
		  def testObjectImplements() {
			  def PTestField := protocol: { def m(); def n; };
			  object: { def m(); def n; def n:=(v); def p(); } implements: PTestField;
		  };
		
		  def testFieldSelectorCountsForTwo() {
			  def PTestField := protocol: { def m(); def n; };
			  // error: the object does not implement n:= (implicitly required by PTestField)
			  self.assert: StructuralTypeMismatch raisedIn: {
				  object: { def m(); def n(); } implements: PTestField;
			  }
		  };
		
		  def testProtocolMatching() {
			  def PTest1 := protocol: { def m(); };
			  def PTest2 := protocol: { def m(); def n(); };
			  self.assertFalse(does: PTest1 match: PTest2);
			  self.assertTrue(does: PTest2 match: PTest1);
		  };
	  };
  };

};