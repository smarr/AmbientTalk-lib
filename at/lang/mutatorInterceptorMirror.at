// check if methods is annotated with a given typetag
def is: someMethod annotatedAs: someAnnotation {
	someMethod.annotations.contains(someAnnotation);
};

// support for mutator methods
deftype Mutator;

def mutatorsOf: someObject {
	(reflect: someObject).listMethods.select: {|m|
		is: m annotatedAs: Mutator;
	};
};

def is: methodName mutatorOf: someObject {
	try: {
		is: (reflect: someObject).grabMethod(methodName) annotatedAs: Mutator;
	} catch: Types.SelectorNotFound using: {|e| false };
};

// intercepts methods annotated as mutator and := invocations
// and calls a given closure with the base object and the invocation

def makeMutatorInterceptor(interceptor) {
	mirror: {
		def invokeField(slf, invocation) {
			def returnValue := super^invokeField(slf, invocation);
			try: {
				def methodName := invocation;
				if: (is: methodName mutatorOf: slf) then: {
					interceptor(self.base(), methodName);
				};
			} catch: /.at.types.SelectorNotFound using: {|e| 
				// do nothing
				info("selector not found: " + e.message); 
			};
			returnValue; // return original return value
		};
		
		
		def invoke(slf, invocation) {
			def returnValue := super^invoke(slf, invocation);
			try: {
				def methodName := invocation.selector;
				if: (is: methodName mutatorOf: slf) then: {
					interceptor(self.base(), methodName);
				} else: {
					if: ((print: methodName) ~= ".*:=$") then: {
						interceptor(self.base(), methodName);
					};
				};
			} catch: /.at.types.SelectorNotFound using: {|e| 
				// do nothing
				info("selector not found: " + e.message); 
			};
			returnValue; // return original return value
		};
	};
};

def MutatorInterceptorModule := object: {
	
	deftype Mutator;

	def makeMutatorInterceptor := &makeMutatorInterceptor;

	def is:annotatedAs: := &is:annotatedAs: ;

	def mutatorsOf: := &mutatorsOf: ;

	def is:mutatorOf: := &is:mutatorOf: ;
	
};