/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * Implementation of a small library to use traits in a more
 * structured manner.
 * The idea is that a trait can specify that it requires its
 * composite to adhere to a certain protocol. Using traits
 * now requires an explicit composition step where the trait's
 * requirements are checked.
 *
 * Usage:
 *  - to define a trait, use:
 *  trait: { ... } instead of object: { ... }
 *  trait: { ... } requiring: Protocol => creates a trait that
 *  can only be composed into an object adhering to the specified protocol
 *
 *  - to compose traits use:
 *  object: {
 *    use: {
 *	    import T1 exclude ...;
 *      import T2 alias ...;	
 *    }
 *  }
 *
 * Where the use block can *only* include "import" statements.
 *
 * Note that the place where use: is used inside an object matters:
 * if one of the traits requires a method m() that is defined only
 * later in the composite, the check will fail. To avoid this, place
 * the use: block at the bottom of the object.
 *
 * @author tvcutsem
 */
import /.at.lang.structuraltypes;

deftype Trait;

def TraitPrototype := object: {
	def provides := object: { nil };
	def requires := protocolOf: nil;
	
	def init(prov, req) {
		provides := prov;
		requires := req;
	};
} taggedAs: [ Trait ];

def TraitModule := object: {
	def trait: closure {
		TraitPrototype.new(object: closure, protocolOf: nil);
	};
	
	def traitFrom: obj {
		TraitPrototype.new(obj, protocolOf: nil);
	};
	
	def trait: closure requiring: protocol {
		TraitPrototype.new(object: closure, protocol);
	};
	
	def traitFrom: obj requiring: protocol {
		TraitPrototype.new(obj, protocol);
	};
	
	/* Transform:
	 *  use: { import <expr1>; import <expr2>; }
	 * into:
	 * import <expr1>.provides;
	 * import <expr2>.provides;
	 * ensure: self implements: <expr1>.requires;
	 * ensure: self implements: <expr2>.requires;
	 */
	def use: closure {
		def body := closure.method.bodyExpression;
		def requires := [];
		// a table of tables [ importstmt, check ]
		def modified := body.statements.map: { |importstmt|
			def trait := (reflect: importstmt.importedObjectExpression).eval(closure.context);
			if: (is: trait taggedAs: Trait) then: {
				`{ import #(trait.provides) alias #(importstmt.aliasedSymbols) exclude #(importstmt.excludedSymbols);
				   ensure: self implements: #(trait.requires) }.statements
			} else: {
				// make sure that importing 'normal' objects is still allowed
				// by returning the original statement
				[ importstmt, nil ];
			}
		};
		// first insert all import statements, then all checks
		def newbody := `{ #@(modified.map: {|s|s[1]}); #@(modified.map: {|s|s[2]}) };
		// evaluate in proper context
		(reflect: newbody).eval(closure.context);
	};
	
	def TraitsTest() {
		extend: /.at.unit.test.UnitTest.new("TraitsTest") with: {
			def testSimpleTraitComposition() {
				def AB := protocol: { def a(); def b(); };
				def CE := protocol: { def c(); def e() };
				def T1 := trait: {
					def a() { "T1A" };
					def b() { "T1B" };
				} requiring: CE;
				def T2 := trait: {
					def a() { "T2A" };
					def c() { "T2C" };
				} requiring: AB;
				def T3 := trait: {
					def b() { "T3B" };
					def c() { "T3C" };
				};
				def composite := object: {
					def e() { d() };
					use: { 
						import T1;
						import T2 exclude a;
					  import T3 alias b := d exclude c;
					};
				};
			
				self.assertEquals("T1A", composite.a());
				self.assertEquals("T1B", composite.b());
				self.assertEquals("T2C", composite.c());
				self.assertEquals("T3B", composite.d());
				self.assertEquals("T3B", composite.e());
			};
			
			def testFailingComposition() {
				def A := protocol: { def a(); };
				def T1 := trait: {
					def b();
				} requiring: A;
				
				self.assert: StructuralTypeMismatch raisedIn: {
					// will fail because composite does not implement a()
					// which is required by T1
					def composite := object: {
					  use: { 
						  import T1;
					  };
				  };
			  };
			};
			
			// check whether use works with regular objects as well
			def testCompositionWithRegularImport() {
				def T1 := object: {
					def a() { nil };
			  };
			
				def composite := object: {
					use: { 
					 import T1;
				  };
				};
				
				self.assertEquals(nil, composite.a());
			};
		};
	};
}