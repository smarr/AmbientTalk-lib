/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* definition of native AmbientTalk/2 types */

// every type tag is implicitly also tagged as Type
// i.e. Type is the root type
deftype Type;

// defines whether an object is an isolate or not
deftype Isolate;

// defines whether a message is directed to the base object or its mirror
deftype Meta;

deftype Boolean;
deftype Closure;
deftype Context;
deftype Field;
deftype Handler;
deftype Method;
deftype Message;
deftype MethodInvocation <: Message;
deftype Delegation <: Message;
deftype AsyncMessage <: Message;
deftype FieldSelection <: Message;
deftype Letter;
deftype Mirror;
deftype ActorMirror;
deftype TypeTag;
deftype FarReference;

// abstract grammar
deftype AbstractGrammar;
deftype Statement <: AbstractGrammar; // TODO: still need to tag those AG elements
deftype Expression <: Statement;

// literal values
deftype Table <: Expression;
deftype Text <: Expression;
deftype Numeric <: Expression;
deftype Number <: Numeric;
deftype Fraction <: Numeric;
deftype Symbol <: Expression;
deftype Begin <: AbstractGrammar;
deftype Splice <: Expression;
deftype UnquoteSplice <: Expression;
deftype MessageCreation <: Expression;
deftype Definition <: Statement;
deftype MethodDefinition <: Definition;


// exception types
deftype Exception;
deftype ArityMismatch <: Exception;
deftype ClassNotFound <: Exception;
deftype DuplicateSlot <: Exception;
deftype IllegalApplication <: Exception;
deftype IllegalArgument <: Exception;
deftype IllegalIndex <: Exception;
deftype IllegalOperation <: Exception;
deftype IllegalParameter <: Exception;
deftype IllegalQuote <: Exception;
deftype IllegalSplice <: Exception;
deftype IllegalUnquote <: Exception;
deftype IndexOutOfBounds <: Exception;
deftype IOProblem <: Exception;
deftype NotInstantiatable <: Exception;
deftype ParseError <: Exception;
deftype ReflectionFailure <: Exception;
deftype SelectorNotFound <: Exception;
deftype SymbiosisFailure <: Exception;
deftype TypeMismatch <: Exception;
deftype UnassignableField <: Exception;
deftype UndefinedSlot <: Exception;
deftype JavaException <: Exception;
deftype ImportConflict <: Exception;
deftype ObjectOffline <: Exception;

// misc
deftype Required; // to tag methods that a trait requires
deftype ExternalMessage; //to tag messages external to an actor issued by the interpreter such as jointEvent, farReferences listeners.
deftype Hashable; // to tag objects that override Java hashCode()

// make all definitions in this file public
self