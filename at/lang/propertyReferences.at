/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2010
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
**/

/**
 * This file defines a reference wrapper that can hold
 * properties passed as isolate
**/


import /.at.collections.java.hashset;
import /.at.collections.java.hashmap;
import /.at.collections.java.vector;

import /.at.lang.futures;
enableFutures(false);
import /.at.lang.exceptions;

deftype Unimplemented <: /.at.lang.types.Exception;
def XUnimplemented := /.at.lang.exceptions.createException(Unimplemented);
def abstractMethod(name) {
	raise: XUnimplemented.new("Invoked abstract method: "+name);
};

deftype Props;

// the default content filter
def defaultFilter := { |props| true };

def isTable(remoteRef) {
	is: remoteRef taggedAs: /.at.lang.types.Table;
};

def isPropRef(remoteRef) {
	if: (isTable(remoteRef)) then: {
		def sizeb  := remoteRef.length() > 1;
		def tagb   := is: remoteRef[1] taggedAs: Props;
		sizeb.and: { tagb };
	} else: { false };
};

// copies of native functions

def nativeWhenever: serviceType discovered: code {
	whenever: serviceType discovered: code
};

def nativeExport: obj as: type {
	export: obj as: type;
};


// the multiWayReferenceModule

def PropsModule := object: {

	deftype Props;
	
	def whenever: serviceType where: condBlock discovered: code {
		nativeWhenever: serviceType discovered: { |farReference|
			if: isPropRef(farReference) then: {
				if: (try: { condBlock(farReference[1]) } catch: { |e| false }) then: {
					code(farReference[2]);
				};
			};
		};
	};
	
	def whenever: serviceType discovered: code {
		whenever: serviceType where: defaultFilter discovered: code;
	};
	
	
	// allow exporting an object together with a set of properties
	def export: serviceObject as: type with: clo {
		def props := isolate: clo taggedAs: [Props];
		def table := [props, serviceObject];
		nativeExport: table as: type;
	};

  // override export:as: to include a property object
	def export: serviceObject as: type {
		export: serviceObject as: type with: { nil };
	};
	
	def export: serviceObject as: type identifiedBy: identifier {
		export: serviceObject as: type with: { def serial := identifier };
	};
	

};

