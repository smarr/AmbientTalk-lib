/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
/*
 * This trait factors out the common behaviour of different 
 * lease reference objects in AmbientTalk.
 *
 * @author egonzale
 */
def TimerModule := /.at.support.timer;
def FirstClassRefModule := /.at.lang.firstclassrefs;

def long := jlobby.java.lang.Long.TYPE;
def maxMethod := jlobby.java.lang.Math.&max;

def LeasedRefTraitModule := object: {
  
  // a lease can be in one of these three states
	def INITIAL := 0; // when its timer has not been activated yet.
	def ACTIVE := 1; // the timer is ticking.
	def EXPIRED := 2; // the timer is elapsed.
	
	def DEFAULT_RENEWALTIME := TimerModule.seconds(10); // default call time renewal 
	def DEFAULT_LEASETIME := TimerModule.seconds(15); // default lease time

	deftype LeasedRef;
	// it doesn't subtype LeasedRef to be able to easily trigger takenOffline only in server side leases.
	deftype ClientLeasedRef; 
	
	//create ExpiredLease used to notify use of a lease after expiration. 
	deftype ExpiredLease <: /.at.types.Exception;
	def XExpiredLease := /.at.exceptions.createException(ExpiredLease);
	
	// Trait for common behaviour amongst client and server leases
  def TLeasedRef := object: {
		
		def timeInterval;
		def state := INITIAL;
		// the timer do not start ticking until the leased reference is created.
    def timerSubscription;
    def passed := false;

		// a leased reference is a special kind of far reference, hence
		// mix in the far reference meta-level behaviour into this mirror
		import FirstClassRefModule.TEventualRef exclude metaIntercept, newInstance; 
		/* 
		 * ATTENTION: the implementation of TEventualRef's required interface 
		 * is defered to the concrete leased references except for:
		 * 1) transportStrategy which now requires leaseTransportStrategy)
		 * 2) metaIntercept which is defined here since it is shared amongst the different types of leased references.
		 */
	
		// a leased reference has expiration observers
		import FirstClassRefModule.TObservable alias init := initObservable;

	  def init(objPrincipal, timeout) {
			// initialize the observable trait, this will provide
			// the 'observerCatalog' object with one field storing
			// the expiration observers
			self.initObservable(`expiration);
			// For leased references, delegate is the object to which base messages should be forwarded.
			self.delegate := objPrincipal;
			self.state := INITIAL;
			self.timeInterval := timeout;
			// When a lease reference mirror is created, the timer do not start ticking until 
		  // the server lease is actually passed to a client.
			self.timerSubscription :=  nil;
			self.passed := false;
	  };
	  
	  def activateTimer(){
			if: ( self.state == INITIAL ) then: {
		  	self.state := ACTIVE;
		  	self.timerSubscription := TimerModule.when: self.timeInterval elapsed: { self.expire };
		  }
	  };
		
		def takeLeasedObjectOffline() {
			//A lease won't be asked more than once to be taken offline.
			//Only take offline the lease object at the server side. 
			//Note that client leases are never online (currently, they cannot be passed). 
			if: ( (self.state == ACTIVE).and: {is: self.base taggedAs: LeasedRef }) then: {
			  try: { 
		      takeOffline: self;
		    } catch: /.at.types.IllegalOperation using: { |e|
				  // Lease used only locally! Catching this exception means that 
				  //the lease was never serialized and thus, it was never put online.  
			 //   system.println("[leasedrefs.at] WARNING: lease used only locally: "+e.message);
		  	};
		  };
		};

		def expire(){
			self.takeLeasedObjectOffline;
			self.state := EXPIRED;
			self.notify: self.observerCatalog.expiration withArgs: [];
		};

		def revoke() {
			//Revoking a lease is analogous to a natural expiration of the lease 
			//except that expiration observers are not triggered.
			if: (self.state == ACTIVE) then: {
			  self.takeLeasedObjectOffline;
			  self.state := EXPIRED;
			  self.timerSubscription.cancel;
			};
		};

		def renew(renewalTime := DEFAULT_RENEWALTIME) {
			if: (self.state == ACTIVE) then: {
				def interval := maxMethod(self.timerSubscription.getTimeRemaining, renewalTime);
				self.timerSubscription.cancel;
				self.timerSubscription := TimerModule.when: interval elapsed: { self.expire };
			} else: {
				if: (self.isExpired) then: {
				  raise: XExpiredLease.new("cannot renew an expired leased reference on: " +self.base);
			  };
			}
		};

		def getPrincipal() {
			self.delegate;	
		};
		
		//Returns a Long with the amount of time left before the lease expires.
		def getTimeLeft() {
			if: (self.state == INITIAL) then: {
			  self.timeInterval;
			} else:{
				self.timerSubscription.getTimeRemaining(); 
			}
		};
		
		def isExpired() { (self.state == EXPIRED) };
		
		//TObservable's required interface.
		def addExpirationObserver(obs){
			if: (self.isExpired) then: {
				obs<-apply([])@/.at.lang.futures.OneWayMessage;
			} else:{
			  self.addObserver: obs to: self.observerCatalog.expiration;
		  };
		};
		
		// TEventualRef's required interface
		def transportStrategy() {
			
			def tagsOfPrincipal := tagsOf: self.base;
      def remoteLease := nil;

			if: (is: self.base taggedAs: LeasedRef) then: {	
				if: passed then: {
				  // pass a new instance to keep 1 to 1 relationship.
				  remoteLease := reflect: self.newInstance(self.base);
				} else: {
					passed := true;
					remoteLease := self;
				};
				// activate the timer of the server lease when it gets passed.
				remoteLease.activateTimer();
			} else: {
				if: (is: self.base taggedAs: ClientLeasedRef) then: {
					remoteLease := self.delegate;
				} else:{
					// this should never happen: 
					// leases are tagged either LeasedRef or ClientLeaseRef
					raise: XExpiredLease.new("trying to pass an unrecognized lease: " +self.base);
				};	
			};

  		if: !(self.isExpired) then: {
			  self.leaseTransportStrategy(remoteLease, tagsOfPrincipal, remoteLease.getTimeLeft);
			} else: {		
			  // If I am here, state == EXPIRED because pass() activates the lease (if it was not active before)
			  // Passing an expired lease, raises an exception. 
				// TODO: think what the lease should be at the receiver side. Maybe an expired copy?
				raise: XExpiredLease.new("cannot pass an expired leased reference on: " +self.base); 
			};
	  };
	
	 /* TEventualRef by default forwards meta messages to its 'delegate' if they are not understood by the far ref itself. 
	  * Since leased references can be combined with other meta level entities (i.e. futures), we apply the following
	  * semantics: A meta message not understood by the leased ref itself should be subject to the corresponding 
	  * leasing mirror before being forwarded to the mirror which understands the meta message.
	  */
    def metaIntercept(msg) {
		   if: ((reflect: self).respondsTo(msg.selector)) then: {
			   self <+ msg; // process meta-message myself
		   } else: {
		 	   self.intercept(msg)@FirstClassRefModule.MetaMessage; // apply leasing semantics before forwarding msg to delegate.
		   }
    };
		
  }; // end TLeasedRef
}; // end LeasedRefTraitModule