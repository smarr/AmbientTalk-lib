/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

import /.at.lang.values;
def NormalVector := /.at.collections.vector.Vector;

def filterMirror := mirror: {
	def default := {|message| false};
	def filter := default;
	def after := {|argument| nil};
	//An input queue
	def filteredMessages := NormalVector.new();
	def filteredSyncMessages := NormalVector.new();
	
  def init(base, default := {|message| false}){
	  super^init(base);
	  filter := default;
	  after := {|argument| nil};
	  filteredMessages := NormalVector.new();
	  filteredSyncMessages := NormalVector.new();
  };

	def receive(message) {
		def NewMessage := extend: message with: { |filteredMessages,filter|
		def process(receiver) {
			if: !filter(self) then: {
				super^process(receiver);
			}	else: {
        filteredMessages.add(self);
			};
		};
		};
		super.receive(NewMessage);
	};

	def invoke(delegate, message) {	
		def return := super.invoke(delegate,message);
		after(message);
		return;
	};

	def flush() {
		filteredMessages.asTable.map:{ | savedMessage | 	
			savedMessage<-process(self.base);
		};
		filteredMessages.clear;
	};

	def setFilter(nFilter) {
		filter := nFilter;
		true;
	};

	def setAfter(nAfter) {
		after := nAfter;
		true;
	};
};