/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * The meta-level implementation of the leased references language construct.
 *  
 * TODO: synchronization of client and server leased ref without relying on when:takenOffline.
 *
 * @author egonzale
 */
def TimerModule := /.at.support.timer;

import /.at.lang.leasedrefstrait;

def createLeasingMirror(objPrincipal, timeout := LEASETIME) { mirror: {
	
	import TLeasedRef alias init := initLease;
	
	def init(base) {
		super^init(base);
		self.initLease(objPrincipal, timeout);
	};
	
	// implement TEventualRef's required interface
	
	def intercept(msg) {
		//all base messages received are forwarded to principal 
		//the base object of a leased ref is an empty object =>
		//it does not understand any async msg.
		if: !(isExpired) then: {
			delegate <+ msg
		} else: {
			raise: /.at.exceptions.XIllegalOperation.new("Sending a message to an expired lease " + self.toString);
		};
	};
	
	def toString() {
		def tags := tagsOf: delegate;
		if: (isExpired) then: {
			"expired lease: " + super^print() + " on: " + delegate;
		} else: {
			"lease: " + super^print() + " on: " + delegate;
		};
	};

  def leaseTransportStrategy(remoteLease, timeout) {
	  { |remoteLease, timeout|
		  /.at.lang.leasedrefs.makeClientLease(remoteLease, timeout);
	  }
  };

}};	

def createLeasingWithRenewalMirror(principal, timeout := LEASETIME, renewal := timeout) {  extend: createLeasingMirror( principal, timeout) with: {

	def intercept(msg) {
		def res := super^intercept(msg);
		//automatically renew the lease upon mesage reception. 
		//By default, renewal time = leasetime. 
		if: !(self.isExpired) then: {		
			 super^renew(renewal);
		};
		res;
	};

  def leaseTransportStrategy(remoteLease, timeout) {
	  { |remoteLease, timeout, renewal|
	    /.at.lang.leasedrefs.makeClientLeaseWithRenewal(remoteLease, timeout, renewal);
	  }
  };
		
}};

def createLeasingWithSingleUseMirror(principal, timeout := LEASETIME, forSelectors := []) {  extend: createLeasingMirror(principal, timeout) with: {

	def intercept(msg){
		def res := super^intercept(msg);
		if: !(self.isExpired) then: {		
		  	if: ( forSelectors.isEmpty().or: {forSelectors.contains(msg.selector)}) then: {
				  super^revoke();
		  	}
		}; 
		res;
	};

  def leaseTransportStrategy(remoteLease, timeout) {
	  { |remoteLease, timeout, forSelectors|
		  /.at.lang.leasedrefs.makeClientLeaseWithSingleUse(remoteLease,timeout, forSelectors);
	  }
  };

}};

//CLIENT LEASES MIRRORS

def createClientLeasingMirror(remoteLease, timeout) {
	mirror: {	 
					
		import TLeasedRef alias init := initLease exclude pass; //transportStrategy;

		def init(base) {
			super^init(base);
			self.initLease(remoteLease, timeout);
			self.activateTimer();
		};

    // implement TEventualRef's required interface
		def pass(){
			//leased object are always passed on a <SL,CL> basis. 
			//Client leases cannot be passed, they must be adquired at the server side.
			 raise: /.at.exceptions.XIllegalOperation.new("Cannot pass client lease " + self.toString);
		};
		
	/*	def transportStrategy() {
			def remoteLease := self.delegate;
			if: !(self.expired) then: {
			  self.leaseTransportStrategy(remoteLease, self.timeInterval);
			} else: {	
				// TODO: if I'm passed when expired, what should I be at the receiver side?
				{ |remoteLease| remoteLease }
			};
	  };*/
	
	/*	def leaseTransportStrategy(remoteLease, timeout) {
		  { |remoteLease, timeout|
			  /.at.lang.leasedrefs.makeClientLease(remoteLease, timeout);
		  }
	  };*/
	
		//all mesages received are forwarded to server lease. 
		//the base object of a leased ref is an empty object => it does not understand any async msg.
		def intercept(msg) {
			if: !(isExpired) then: { 
				delegate<-intercept(msg);
			} else: {
				raise: /.at.exceptions.XIllegalOperation.new("Sending a message to an expired lease " + self.toString);
			};
		};
		
		def toString() {
			if: (isExpired) then: {
				"expired client lease " + super^print()  + " on:" + delegate;
			} else: {
				"client lease " + super^print() + " on: " + delegate;
			}
		}
  };
};

def createClientLeasingWithRenewalMirror(remoteLease, timeout, renewal) { extend: createClientLeasingMirror( remoteLease, timeout) with: {

	def intercept(msg) {
		def res := super^intercept(msg);
		if: !(self.isExpired) then: { 
			//ATENCIO: this renewal should not be transmitted to the server lease! 
			//Just renews the client lease to keep it in sync with the server lease.
			super^renew(renewal);
		};
		res;
	};
	
/*	def leaseTransportStrategy(remoteLease, timeout) {
	  { |remoteLease, timeout, renewal|
	    /.at.lang.leasedrefs.makeClientLeaseWithRenewal(remoteLease, timeout, renewal);
	  }
  };*/

}};

def createClientLeasingWithSingleUseMirror(remoteLease, timeout, forSelectors) { extend: createClientLeasingMirror( remoteLease, timeout) with: {

	def intercept(msg) {
		def res := super^intercept(msg);
		if: !(self.isExpired) then: { 
			if: ( forSelectors.isEmpty().or: {forSelectors.contains(msg.selector)}) then: {
				super^revoke();
	  	} else: {
				//ATENCIO: this renewal should not be transmitted to the server lease! 
				//Just renews the client lease to keep it in sync with the server lease.
		 		super^renew();
			};
		};
		res;
	};
/*	def leaseTransportStrategy(remoteLease, timeout) {
	  { |remoteLease, timeout, forSelectors|
		  /.at.lang.leasedrefs.makeClientLeaseWithSingleUse(remoteLease,timeout, forSelectors);
	  }
	};*/
}};

//Public interface of leased object references
def LeasingModule := object: {
	
	def LeasedRef := LeasedRef;
	//Can I make it not public to everyone??
	def makeClientLease(remoteLease, timeout){
		object: { nil } taggedAs: [ClientLeasedRef] mirroredBy: createClientLeasingMirror(remoteLease, timeout);
	};

	def makeClientLeaseWithSingleUse(remoteLease, timeout, selectors){
		object: { nil } taggedAs: [ClientLeasedRef] mirroredBy: createClientLeasingWithSingleUseMirror(remoteLease, timeout, selectors);
	};
	
	def makeClientLeaseWithRenewal(remoteLease, timeout, renewal){
		object: { nil } taggedAs: [ClientLeasedRef] mirroredBy: createClientLeasingWithRenewalMirror(remoteLease, timeout, renewal);
	};
	
	//Construct a lease that lasts for a given period of time.
	def lease: timeout for: obj  {
		object: { nil } taggedAs: [LeasedRef]+(tagsOf: obj) mirroredBy: createLeasingMirror(obj, timeout)
	};
	
	/* Construct a lease for only a single call: a lease that is alive for the given period unless
	it has processed a single message. This is a useful lease for callback objects, such as futures.
	*/
	def singleCallLease: timeout for: obj {
		singleCallLease: timeout revokedOn: [] for: obj
	};
		 
	// selectors is expected to be an array of message names (which upon reception expire the lease). 
	// An empty array has the same effect than singleCallLease construct.
	def singleCallLease: timeout revokedOn: selectors for: obj {
		object: { nil } taggedAs: [LeasedRef]+(tagsOf: obj) mirroredBy: createLeasingWithSingleUseMirror(obj, timeout, selectors)
	};
	
	/* Lease that is prolonged with a given initial period of time each time a message is sent to the object. 
	  Hence, when an object has not been 'used' for more than the given period, its access expires. 
	  The lease can always be explicitely revoked earlier.
    */
	def renewOnCallLease: timeout for: obj {
	    renewOnCallLease: timeout renewedWith: timeout for: obj
	};
	
	// Customizable version of renewedOnCallLease where one can determine the renewal time instead of using timeout. 
	def renewOnCallLease: timeout renewedWith: renewalTime for: obj {
	    object: { nil } taggedAs: [LeasedRef]+(tagsOf: obj) mirroredBy: createLeasingWithRenewalMirror(obj, timeout, renewalTime)
	};
			 
	// Tries to renew explicitly the lease.		
	def renew: leasedRef for: time {
	  	(reflect: leasedRef).renew(time)	
	};
	
	/* Cancels explicitly the lease without triggering when:expired: listener 
	   Canceling a lease is analogous to a natural expiration of the lease.
	   Any later message sent to the lease won't be forwarded to the server object.
	*/
	def revoke: leasedRef {
	  	(reflect: leasedRef).revoke()	
	};
	
	// Places an observer with the given code to a leased reference. 
	// The block of code is executed upon the expiration of the lease. 	
	def when: leasedRef expired: code {
		//Note that when:expired: can be placed either at the server side or at the client side.
		if: ((is: leasedRef taggedAs: LeasedRef).or: { (is: leasedRef taggedAs: ClientLeasedRef)}) then: {
			(reflect: leasedRef).addExpirationObserver(code) 
		} else: {
			//call the native when:takenOffline: of remote far references. 
			//leased references are subject to leasing as well when passed to client objects.
			//Thus, it should never enter here when working with leased references.
			when: leasedRef takenOffline: code
		}
	};
	
	// Returns a Long with the amount of time left before the lease expires
	def leaseTimeLeft: leasedRef {
		(reflect: leasedRef).getTimeLeft;
	};
		
	// type that identifies this language module
	deftype LeasingModule;
	
	/* Installs leased far references on the current actor.
   *
	 * Enabling leasing will ensure that every pass-by-reference object will be passed by
	 * leased reference instead of the default far reference. 
	 *
	 * Note that this feature will be also activated on object explicitely exported 
	 * by means of the export:as language construct. 
	 */
	// TODO include pass-by-copy semantics to client leases so that enabling works with exported objects.
	def enableLeasing(){
		def actor := reflectOnActor();
		if: !(is: actor taggedAs: LeasingModule) then: {
			system.println("[leasedrefs.at] enabling leases by default on actor " + actor);
			actor.becomeMirroredBy: (extend: actor with: {
				def createReference(object) {							
						system.println("createReference:default policy for: " + object );
						def serverLease := renewOnCallLease: LEASETIME for: object;
				}
			} taggedAs: [LeasingModule]);
		} else: {
		  actor; // return the current actor protocol
		};
	};


	// Suport primitives to manipulate time intervals. 
	// Export here also so that people using leasing abstractions
	// do not need to explicitly import timer module.
 	def millisec(ms) { TimerModule^millisec(ms) };
	def seconds(s) { TimerModule^seconds(s) };
	def minutes(m) { TimerModule^minutes(m) };
  
  def LeasedRefsTest() { 
	  extend: /.at.unit.test.UnitTest.new("LeasedRefsTest") with: {
     
			import /.at.lang.futures;
		  enableFutures(false);
			
      def obj := object: {
			  def foo() { 5 }; 
      };
     
      def testLocalLeaseCreation() {
				//Creation of a lease
	    	def lease := lease: seconds(5) for: obj;
  			def table := (print: lease).split(":");
      	self.assertEquals("<lease", table[1]);
				// lease not active so leaseTimeLeft == initialTimeInterval
				self.assertEquals((leaseTimeLeft: lease).intValue, seconds(5).intValue);
	    	//Creation of a renewOnCallLease
				def rlease := renewOnCallLease: seconds(5) for: obj;
				when: rlease expired: { 
	        self.assertTrue((reflect: rlease).isExpired)
	    	};
    	};

      def testAsynLocalMessageSend(){
	      def [fut, res] := makeFuture();
				//Creation of a singleCallLease
	    	def lease := singleCallLease: seconds(5) for: obj;
				// Forcing the lease timer to start ticking 
				(reflect: lease).activateTimer;
				when: lease<-foo()@FutureMessage becomes: { |v|
					self.assertEquals(5,v);
				};
				try: { 
		      lease<-foo();
					//next line should never be executed because lease is a single call lease
					self.fail("Unexpected not expired lease " + lease);
		    } catch: /.at.types.IllegalOperation using: { |e|
					res.resolve(5);
				};
				fut;
			};
			
			//TODO: Add the new remote lease creation test after changing pass semantics of client leases.
			def testRemoteLeaseCreation(){
			  deftype testRemoteLeaseCreation;
				def pepeObj := object: { def pepe(){system.println("Ik ben pepe")}};
				def lease := /.at.lang.leasedrefs.lease: /.at.support.timer.seconds(60) for: pepeObj;
				def pepaObj := object: { def pepa(){system.println("ik ben pepa"); pepeObj; }};
				export: pepaObj as: testRemoteLeaseCreation;

			   def otherRemoteHost := actor: {
			     deftype testRemoteLeaseCreation;
			     when: testRemoteLeaseCreation discovered:{ | pepaRef |
				   def leaseRef := pepaRef<-pepa();
				   system.println("got a lease reference " + leaseRef);
			     };
			   };
			};
  	};
	};
}

