/**
 * AmbientTalk/2 Project
 * (c) 2010 Software Languages Lab
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
/**
 * Eventual reactive programming in AmbientTalk:
 *  - behaviors are potentially infinite streams of values
 *  - behaviors are eventual references. An async message sent to
 *    a behavior returns a (future for a) dependent behavior whose value
 *    is the result of sending the message to the behavior's most recent value
 *  - the creator of a behavior receives a separate controller object
 *    with which the value of that behavior can be changed
 *  - programs may react to behaviors changing values using
 *     def newB := whenever: beh changed: { |newValue| ... }
 *    When 'beh' receives a new value, the block is triggered in a later turn.
 *
 *    Note that, like when: for futures, whenever:changed: itself returns
 *    a dependent behavior. This allows chaining of dependent behaviors.
 *    Value change notifications always happen in later turns.
 *
 * To access the current value of a near behavior, execute 'snapshot: behavior'
 *
 * To lift a value into a behavior, simply use:
 * def [beh, ctl ] := makeBehavior(value)
 *
 * ctl is a controller object that can be used to
 * change the value of the behavior.
 *
 * def beh2 := beh<-msg()
 *   is equivalent to:
 * def beh2 := whenever: beh changed: { |v| v<-msg() }
 *
 * Behaviors exhibit the same asymmetry as futures: dataflow synchronization via messages,
 * control flow synchronization via whenever:changed:
 *
 * A behavior starts out 'changing', can become 'stable' if it receives
 * a 'last value', and can become terminally 'broken' with an exception
 *
 * @author tvcutsem
 */
 
// TODO: should nextValue and lastValue be collapsed?
// perhaps nextValue(val, last) where
//   @param last is a boolean signalling that this will be the last value reported

import /.at.lang.firstclassrefs;

deftype Behavior;

/*
 * def [behavior, controller] := makeBehavior(42);
 *
 * Can register whenever-listeners on behavior.
 * Controller used to change the value of the behavior.
 * controller.nextValue(v) -> behavior changes value to v
 * controller.lastValue(v) -> behavior becomes stable with last value v
 * controller.break(e)     -> behavior becomes broken with problem e
 */
def makeBehavior(initVal) {
	def observers := [];
	def currentValue := initVal;
	def state := `changing;
	def problem := nil;
	[object: {} taggedAs: [Behavior] mirroredBy: (mirror: {
	  import TEventualRef exclude pass;
	  // def transportStrategy; // not necessary, behaviors are pass-by-far-ref
	  
	  // for snapshot: behavior
		def value() { currentValue };
		
		// behaviorObserver should respond to:
		//  onNextValue(v)
		//  onLastValue(v)
		//  onBroken(e)
		def register(behaviorObserver) {
		  if: (state == `changing) then: {
		    observers := observers + [behaviorObserver];
  		  behaviorObserver<-onNextValue(currentValue);
  		  object: {
  		    def cancel() {
  		      if: (observers != nil) then: {
    		      observers := observers.filter: { |o| o != behaviorObserver }  		        
  		      }
  		    }
  		  }; 
		  } else: {
		    if: (state == `stable) then: {
	  		  behaviorObserver<-onLastValue(currentValue);
		    } else: { // state == `broken
	  		  behaviorObserver<-onBroken(problem);		      
		    };
		    object: {
  		    def cancel() { } // no need to unregister, never registered
  		  };
		  }
		};
		
    def intercept(msg) {
      if: (state == `stable) then: {
    	  /.at.lang.futures.when: value <+ msg becomes: { |newValue|
  	      stable: newValue;
  	    }
  	  } else: {
  	    if: (state == `broken) then: {
  	      broken: problem;
  	    } else: {
  	      // state == `changing
  	      def [dependentBehavior, controller] := makeBehavior(currentValue);
        	def propagate(propagator, value) {
        	  /.at.lang.futures.when: value <+ msg becomes: { |newValue|
      	      propagator(newValue);
      	    } catch: /.at.lang.types.Exception using: { |e|
      	      controller.break(e);
      	    }
        	};
          self.register(object: {
        	  def onNextValue(nextVal) { propagate(controller.nextValue, nextVal) };
        	  def onLastValue(lastVal) { propagate(controller.lastValue, lastVal) };
        	  def onBroken(e) { controller.break(e) };
        	});
          dependentBehavior
  	    }
  	  }
    };
    
    def toString() { "behavior:" + currentValue + "("+state+")" };
    
	}),
	
	// behavior controller
	object: {
	  def nextValue(newVal) {
	    if: (state != `changing) then: {
	      raise: XIllegalOperation.new("cannot change a stable or broken behavior: " + newVal);
	    };
		  def oldVal := currentValue;
		  currentValue := newVal;
		  observers.each: { |obs| obs<-onNextValue(newVal) };
		  oldVal;
	  };
	  def lastValue(lastVal) {
	    if: (state != `changing) then: {
	      raise: XIllegalOperation.new("cannot stabilize an already stable or broken behavior: " + newVal);
	    };
	    def oldVal := currentValue;
	    currentValue := lastVal;
	    observers.each: { |obs| obs<-onLastValue(lastVal) };
	    observers := nil;
	    state := `stable;
	    oldVal;
	  };
	  def break(e) {
	    if: (state != `changing) then: {
	      raise: XIllegalOperation.new("cannot break an already stable or broken behavior: " + newVal);
	    };
		  problem := e;
		  observers.each: { |obs| obs<-onBroken(e) };
	    observers := nil;
	    state := `broken;
		  currentValue;
	  }
  }];
};

def snapshot: behavior {
  if: (is: behavior taggedAs: Behavior) then: {
    if: (is: behavior taggedAs: /.at.lang.types.FarRef) then: {
      raise: /.at.lang.exceptions.XIllegalOperation.new(
        "cannot snapshot a remote behavior: "+behavior);
    }
    (reflect: behavior).value();
  } else: {
    raise: /.at.lang.exceptions.XIllegalOperation.new(
      "snapshot: requires a behavior, given: "+behavior);
  }
};

/**
 * def b1 := makeBehavior(42);
 * def b2 := whenever: b1 changed: { |newValue| newValue + 1 }
 * whenever: b2 changed: { |newValue| ... }
 *
 * If b1 becomes broken, the catch-clause is triggered
 * If b1 becomes stable, the finally-clause is triggered
 *
 * If unspecified, a catch-clause will break the dependent behavior
 * If unspecified, a finally-clause is the same as a changed: clause
 * and the last value is not treated specially. It will still cause
 * the dependent behavior to become stable as well.
 */
def whenever: behavior changed: closure catch: clause finally: finalize {
  // such that we can write:
  // whenever: [b1, b2] changed: { |v1, v2| ... }
  if: (is: behavior taggedAs: /.at.lang.types.Table) then: {
    behavior := join: behavior;
    def origclosure := closure;
    closure := { |values| origclosure(@values) };
  };
  
  def [dependentBehavior, controller] := makeBehavior(behavior.value);
  def perform(control, val, fun) {
	  try: { control(fun(val)) } catch: /.at.lang.types.Exception using: { |e| controller.break(e) }
  };
  behavior<-register(object: {
	  def onNextValue(nextVal) { perform(controller.nextValue, nextVal, closure) };
	  def onLastValue(lastVal) { perform(controller.lastValue, lastVal, finalize) };
	  def onBroken(e) {          perform(controller.lastValue, e,       clause) };
	})@MetaMessage;
  dependentBehavior
};
def whenever: behavior changed: closure catch: clause {
	whenever: behavior changed: closure catch: clause finally: closure;
};
def whenever: behavior changed: closure {
	whenever: behavior changed: closure catch: { |e| raise: e; } finally: closure;
};

/**
 * def joinedB := join: [ b1, b2, ... ]
 * joinedB's value is at every time a table of the values of b1, b2, ...
 *
 * However, if either behavior in the table is updated within the same turn,
 * joinedB is guaranteed to only be updated once with all combined changes
 * This is to prevent glitches, for example:
 *
 * def Bsum := whenever: (join: [b1,b2]) changed: { |vals| def [v1,v2] := vals; v1 + v2 }
 *
 * Thanks to join, Bsum will be free of glitches if both b1 and b2 are modified
 * *in the same turn*. That is, Bsum is only updated once, with the combined changes
 * The updates to b1 and b2 in the same turn are perceived to be atomic w.r.t. Bsum
 */
def join: behaviors {
  def values := behaviors.map: { |b| b.value };
  def numStable := 0;
    
  def [joinedB, joinedC] := makeBehavior(values);
  
  def triggered := false;
  
  // TODO: instead of using this updater, install custom actor mirror:
  // FIXME: will not trap sync_event_ / event_
  // def serve() {
  //   def r := super^serve();
  //   endOfTurnListeners.each: <-apply([r]);
  //   r
  // }
  // such that atomicity within same turn is strictly guaranteed
  // register using atEndOfTurn: { |r| triggered := false; joinedC.nextValue(values) }
  def updater := object: {
    def updateLater() {
      triggered := false; // reset trigger
      joinedC.nextValue(values);
    }
  };
  
  behaviors.eachWithIndex: {|b, i|
    b.register(object: {
      def onNextValue(nextV) {
        // trigger ensures only one update per series of changes within
        // a single turn
        if: !triggered then: { tiggered := true; updater<-updateLater() };
        values[i] = nextV;
      };
      def onLastValue(lastV) {
        numStable := numStable + 1;
        values[i] = lastV;
        if: (numStable == values.length) then: {
          joinedC.lastValue(values);
        }
      };
      def onBroken(e) {
        joinedC.break(e);
      }
    });
  };
  
  joinedB;
};

// lift a value into a stable behavior
def stable: value {
	def [behavior, controller] := makeBehavior(value);
	controller.lastValue(value);
	behavior;
};
// lift an exception into a broken behavior
def broken: exc {
	def [behavior, controller] := makeBehavior(value);
	controller.break(exc);
	behavior;
};

def makeSecondsBehavior(start) {
  def Timer := /.at.support.timer;
  def ticks := start;
  def [seconds, controller] := makeBehavior(ticks);
  def pub := Timer.whenever: 1.seconds elapsed: {
    ticks := ticks + 1;
    controller.nextValue(ticks);
  };
  [seconds, object: { def cancel() { pub.cancel(); controller.lastValue(ticks); }}];
};

def [seconds, pub] := makeSecondsBehavior(0);

self