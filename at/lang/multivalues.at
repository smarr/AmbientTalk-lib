/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * A small module to implement 'multivalues': values consisting
 * of multiple values who forward and collect all return values
 * of received messages to their constituent parts. Example:
 *
 * def mv := multivalueOf: [1,2,3]
 * def mv2 := mv + 1;
 * multivalueAsTable: mv2 => [2,3,4]
 *
 * @author tvcutsem
 */

def makeMultivalue(values) {
	object: { } mirroredBy: (mirror: {
  	  def invoke(rcvr, invocation) {
		makeMultivalue(values.map: { |v| v <+ invocation })
  	  };
      def receive(msg) {
        makeMultivalue(values.map: { |v| v <+ msg })
      };
      def print(@args) { "<multivalue:"+values+">"; };
	  def asTable := values;
  });
};

/*
Abstract the above repetition in the mirror itself by going meta-meta
and by intercepting all meta-level operations on the mirror itself using
a mirror on the mirror.

def makeMultiValue: table {
	object: { } mirroredBy: (extend: defaultMirror with: { } taggedAs: [/.at.lang.types.Mirror] mirroredBy: (mirror: {
		// a meta-level operation is invoked on the mirror
		def invoke(mself, minv) {
			def [msel, margs] := [minv.selector, minv.arguments];
			system.println("invoked " + msel);
			if: ((msel == `new).or: { msel == `init }) then: {
				super^invoke(mself, msel, margs);
			} else: {
				makeMultiValue: (table.map: { |elt| (reflect: (reflect: elt)).invoke(mself, minv) })				
			}
		};
		def asTable := table;
	}))
};
*/

def MultivalueModule := object: {

  def multivalueOf: tbl { makeMultivalue(tbl) };
	def multivalueAsTable: mv { (reflect: mv).asTable };
	
  def MultivalueTest() {
	  extend: /.at.unit.test.UnitTest.new("MultivalueTest") with: {
		  def testInvocation() {
				def mv := multivalueOf: [1,2,3];
				def mv2 := mv + 1;
				self.assertEquals("[2, 3, 4]", print: (multivalueAsTable: mv2));			
		  };
	  };
  };

};