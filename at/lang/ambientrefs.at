/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * The meta-level implementation of the ambient references language construct.
 * 
 * We distinguish between an ambient reference's 'base-level' behaviour
 * and its 'cardinality' and 'elasticity' behaviour, which are both mixed
 * into the base-level behaviour by means of trait composition.
 *
 * TODO:
 *  - introduce multifutures as the return value of a msg sent to an omnireference
 *  - integrate with leasing
 *  - introduce snapshots for omnireferences
 *
 * @author tvcutsem
 */

def FuturesModule := /.at.lang.futures;
def TimerModule := /.at.support.timer;
def OneWayMessage := FuturesModule.OneWayMessage;
def Vector := /.at.collections.vector.Vector;
FuturesModule.enableFutures(false); // enable futures for explicitly tagged messages

deftype SustainedMessageType; // to annotate sustained messages for omnireferences

def SustainedMessage(timeout) {
	extend: SustainedMessageType with: { |timeout|
		nil;
	} taggedAs: [/.at.types.Isolate, /.at.types.TypeTag ];
};

def debug(@args) {
  system.println("[ambientrefs.at] ", @args);
};

/* The following code implements a simple sturdy unireference.
 * Sturdy unireferences can simply be implemented by combining
 * futures with the native far references: a future for a far
 * reference represents an unbound (dangling) far reference.
 * The far reference that resolves the future is a sturdy uni-
 * reference: it points to a single remote object, and does not
 * break the bond with its principal upon disconnection.
 */
def createSturdyUniRef(type, filter := defaultFilter) {
  def [arFuture, arResolver] := FuturesModule.makeFuture();
  when: type discovered: { |remoteRef|
	  def props := isolate: { nil };
	  if: (is: remoteRef taggedAs: /.at.types.Table) then: {
		  props := remoteRef[1];
		  remoteRef := remoteRef[2];
	  };
	
    if: (filter(props)) then: {
	    arResolver.resolve(remoteRef)
    };
  };
  
  arFuture;
};

/* Architecture:
 *  An ambient reference is composed of a base behaviour and:
 *   - an elasticity trait, determining the behaviour upon disconnection
 *   - a cardinality trait, determining how many principals the reference can have
 *  The base behaviour hooks into the AmbientTalk/2 MOP to translate MOP events
 *  into more high-level, ambient reference-related events
 */

deftype AmbientRef; // type of a base-level ambient reference
deftype ARefMessage <: OneWayMessage; // type signifying that the message is destined for the AR itself

// the default content filter
def defaultFilter := { |props| true };

def makeAmbientRef(serviceType, TCardinality, TElasticity, contentFilter) {
  object: {
    nil // an ambient reference is an empty proxy object
  } taggedAs: [AmbientRef]
    mirroredBy: makeAmbientRefMirror(serviceType, TCardinality, TElasticity, contentFilter);
};

// create a new ambient reference mirror.
// assumes that TCardinality and TElasticity have been properly initialized already
def makeAmbientRefMirror(serviceType, TCardinality, TElasticity, contentFilter) {
  mirror: {

  // import cardinality and elasticity behaviour
	import TCardinality;
	import TElasticity;
		
	def inbox; // to store messages sent to an unbound AR
	def joinedbox; // to store available matching objects
		
  def disconnectionObservers; // to store when:disconnected: observers
  def connectionObservers; // to store when:connected: observers

	def init(base) {
		super^init(base); // initialize root mirror's base field
		TCardinality^init(); // initialize cardinality state
		TElasticity^init(); // initialize elasticity state
		
		inbox := Vector.new();
		joinedbox := Vector.new();

	  disconnectionObservers := Vector.new();
	  connectionObservers := Vector.new();
		
		// register discovery observers
	  whenever: serviceType discovered: { |potentialPrincipal|
		  def properties := isolate: { nil };
		  if: (is: potentialPrincipal taggedAs: /.at.types.Table) then: {
			  // service exported as [ properties, reference ]
			  properties := potentialPrincipal[1];
			  potentialPrincipal := potentialPrincipal[2];
		  };
		  
		  // check whether the properties match the content filter
		  if: (contentFilter(properties)) then: {
			  debug("Base: potential principal discovered: ", potentialPrincipal);
		    joinedbox.add(potentialPrincipal);
		    if: !(self.isBoundPrincipal(potentialPrincipal)) then: {
		      // dispatch to cardinality mixin
		      self.foundPrincipal(potentialPrincipal);
		    };

		    def sub := when: potentialPrincipal disconnected: {
		      debug("Base: potential principal disconnected: ", potentialPrincipal);
		      joinedbox.remove(potentialPrincipal);
		      if: (self.isBoundPrincipal(potentialPrincipal)) then: {
		        // dispatch to elasticity mixin
		        self.disconnected(potentialPrincipal);
		      };
		      sub.cancel();
		    };
		  } else: {
			  debug("Base: discovered object did not satisfy properties: "+potentialPrincipal);
		  };
	  };
	};

	// forward all messages in the inbox to the given principal
	def forwardInbox(toPrincipal) {
		inbox.each: { |msg| toPrincipal <+ msg };
		nil;
	};

	// forward all messages in the inbox to the given principal
	def flushInbox(toPrincipal) {
		self.forwardInbox(toPrincipal);
		inbox.clear();
		nil;
	};
	
	// return all untransmitted messages that were sent to principal
	// back to the inbox
	def retractOutbox(ofPrincipal) {
	  def out := (retract: ofPrincipal);
	  // add untransmitted messages to the front of the inbox
	  out.each: { |msg| inbox.insert(1,msg) };
	  nil;
	};
	
	// == observer management ==

	def addDisconnectionObserver(obs) {
	  disconnectionObservers.add(obs);
	  // return a subscription object that can be used to remove the observer
	  object: {
	    def cancel() { disconnectionObservers.remove(obs) }
	  };
	};
	
	def addConnectionObserver(obs) {
	  connectionObservers.add(obs);
	  // return a subscription object that can be used to remove the observer
	  object: {
	    def cancel() { connectionObservers.remove(obs) }
	  };
	};

	def notifyObservers(observers, newPrincipal) {
	  observers.each: { |o| o<-apply([newPrincipal])@OneWayMessage }
	};
	
	// == hook into the metaobject protocol ==
		
	// received messages are either processed by mirror itself or delegated to TCardinality
	def receive(msg) {
	  if: (is: msg taggedAs: ARefMessage) then: {
		  self <+ msg;
	  } else: {
		  self.acceptMessage(msg); // provided by cardinality trait
	  }
	};
	
	// it is illegal to invoke methods synchronously on an ambient ref		
	def invoke(rcv, sel, arg) {
	  // the only legal operation on ambient references is '=='
	  if: (`(==) == sel) then: {
	    super^invoke(rcv, sel, arg);
	  } else: {
		  raise: /.at.exceptions.XIllegalOperation.new(
			  "cannot synchronously invoke operation " + sel + " on ambient reference " + base);
	  }
	};
	
	  // invocation of fields is equally disallowed
	  def invokeField(rcv, sel) {
	    self.invoke(rcv,sel,[]);
	  };
	
	  def print() {
	    "<ambient "+serviceType+": "+self+">";
	  };
	
		// TODO: does a passed AR remain bound to same principals?
		// TODO: support all kinds of ARs!
		def pass() {
			/.at.support.util.uponArrivalBecome: { |serviceType|
				// when arriving at the remote host, create a new local ambient reference
				/.at.lang.ambientrefs.ambient: serviceType
				                      withCardinality: /.at.lang.ambientrefs.uni()
				                      withElasticity: /.at.lang.ambientrefs.fragile();
			}
		};
	
  };
};

deftype Unimplemented <: /.at.types.Exception;
def XUnimplemented := /.at.exceptions.createException(Unimplemented);
def abstractMethod(name) {
	raise: XUnimplemented.new("Invoked abstract method: "+name);
};

def TAbstractCardinality := object: {
  def acceptMessage(msg) { abstractMethod(`acceptMessage) };
  def isBoundPrincipal(p) { abstractMethod(`isBoundPrincipal) };
  def foundPrincipal(p) { abstractMethod(`foundPrincipal) };
  def lostPrincipal(p) { abstractMethod(`lostPrincipal) };
};

def TAbstractElasticity := object: {
  def disconnected(p) { abstractMethod(`disconnected) };
};

def TUniRef := extend: TAbstractCardinality with: {
  // store the single far ref to which the AR can be bound
  // !! always access this variable using 'self' to access
  // the field that was 'imported' into the actual AR !!
  def self.principal;

  // initialize this trait's state
  // note that the 'self' prefix is used to ensure that the correct imported state is modified
  def init() {
    super^init();
    self.principal := nil;
  };

	def acceptMessage(msg) {
		if: !(nil == self.principal) then: {
			  self.principal <+ msg; // forward message to principal
		} else: {
				debug("Uniref: acceptmessage: unbound, storing ",msg.selector);
				self.inbox.add(msg);
				nil;
		};
	};
	def isBoundPrincipal(p) { self.principal == p };
	def foundPrincipal(p) {
		if: (nil == self.principal) then: {
			debug("Uniref: foundPrincipal: binding to ", p);
			self.principal := p;
			self.notifyObservers(self.connectionObservers, p);
			// flush stored messages
			self.flushInbox(p);
			} else: {
				debug("Uniref: foundPrincipal: already bound, ignoring ",p);
			};
			nil;
		};
	def lostPrincipal(p) {
		debug("Uniref: lostPrincipal: unbound due to loss of ",p);
		self.principal := nil;
		self.notifyObservers(self.disconnectionObservers, p);
		// retract all unsent messages back to the inbox
		self.retractOutbox(p);
	};

};

def TOmniRef := extend: TAbstractCardinality with: {
  // store a set of currently bound principals
  // !! always access this variable using 'self' to access
  // the field that was 'imported' into the actual AR !!
  def self.principals;

  // initialize this trait's state
  // note that the 'self' prefix is used to ensure that the correct imported state is modified
  def init() {
    super^init();
    self.principals := Vector.new();
  };
	
  def acceptMessage(msg) {
    // broadcast the message to all currently connected principals
    debug("Omniref: acceptMessage: broadcasting " + msg.selector + " to "+self.principals.length()+ " principals.");
    self.principals.each: { |p| p <+ msg };

    // if the message is sustained, keep it in the inbox for its timeout period
    (is: msg taggedAs: SustainedMessageType).ifTrue: {
	    debug("Omniref: acceptMessage: stored sustained message " + msg.selector);
	    self.inbox.add(msg);
			def ann := /.at.support.util.getAnnotationOfType(msg, SustainedMessageType);
			
	    TimerModule.when: ann.timeout elapsed: {
		    debug("Omniref: acceptMessage: removing sustained message " + msg.selector);
		    self.inbox.remove(msg);
	    };
    };
  };
  def isBoundPrincipal(p) { self.principals.contains(p) };
  def foundPrincipal(p) {
    debug("Omniref: foundPrincipal: adding ", p);
    self.principals.add(p);
    self.notifyObservers(self.connectionObservers, p);
    // forward all pending messages to the principal
    self.forwardInbox(p);
    // TODO: add support for sustained and enduring messages
    // forward all messages in inbox to new principal here
    nil;
  };
  def lostPrincipal(p) {
    debug("Omniref: lostPrincipal: removing ",p);
    self.principals.remove(p);
    self.notifyObservers(self.disconnectionObservers, p);
    nil;
  };
};

def TBreakableRef := extend: TAbstractElasticity with: {
	def erase(principal) {
		// dispatch to cardinality trait
		self.lostPrincipal(principal);
		// try to rebind to spare candidate principals
		def idx := self.joinedbox.find: { |potentialP| !(self.isBoundPrincipal(potentialP)) };
		if: !(nil == idx) then: {
			// found a spare principal
			def newPrincipal := self.joinedbox.at(idx);
			debug("Breakableref: erase: found spare principal: ", newPrincipal);
			// dispatch to cardinality trait
			self.foundPrincipal(newPrincipal);
		};
	};
};

def TFragileRef := extend: TBreakableRef with: {
	def disconnected(principal) {
		debug("Fragileref: disconnected: signalling loss of ", principal);
		self.erase(principal);
	};
};

def TElasticRef := extend: TBreakableRef with: {
	def self.timeout;
	
	// if no timeout is given, reuse that of the clonee
	def init(t := self.timeout) {
		self.timeout := t;
	};
	
	def disconnected(principal) {
	  debug("ElasticRef: disconnected: starting timeout period for principal: ",principal);
	  def isDisconnected := true;
	  def sub := when: principal reconnected: {
		  isDisconnected := false;
		  sub.cancel();
	  };
	  TimerModule.when: self.timeout elapsed: {
		  if: isDisconnected then: {
			  debug("ElasticRef: disconnected: principal lost: ", principal);
			  self.erase(principal);
			  sub.cancel();
		  }; // if principal reconnected in time, ignore this disconnection
	  };
  };
};

def TSturdyRef := extend: TAbstractElasticity with: {
	def disconnected(principal) {
		debug("SturdyRef: disconnected: ignoring disconnection of ",principal);
		nil;
	};
};

def nativeWhen: farref disconnected: code {
	when: farref disconnected: code
};
def nativeWhen: farref reconnected: code {
	when: farref reconnected: code
};

def nativeExport: obj as: type {
	export: obj as: type;
};

def AmbientRefModule := object: {
	def ambient: serviceType {
		createSturdyUniRef(serviceType);
	};
	
	def ambient: serviceType where: query {
		createSturdyUniRef(serviceType, query);
	};
	
	def SustainedMessage := &SustainedMessage;
	
	// cardinality traits
	def uni() { TUniRef.new() };
	def omni() { TOmniRef.new() };
	
	// elasticity traits
	def fragile() { TFragileRef.new() };
	def elastic(timeout) { TElasticRef.new(timeout) };
	def sturdy() { TSturdyRef.new() };
	
	def ambient: serviceType withCardinality: cTrait withElasticity: eTrait {
		makeAmbientRef(serviceType, cTrait, eTrait, defaultFilter);
	};
	
	def ambient: serviceType withCardinality: cTrait withElasticity: eTrait where: filter {
		makeAmbientRef(serviceType, cTrait, eTrait, filter);
	};
	
	// if ambientRef is indeed an ambient reference, add an observer,
	// otherwise perform the default behaviour
	def when: ambientRef disconnected: code {
		if: (is: ambientRef taggedAs: AmbientRef) then: {
			(reflect: ambientRef).addDisconnectionObserver(code);
		} else: {
			nativeWhen: ambientRef disconnected: code
		};
	};
	
	// if ambientRef is indeed an ambient reference, add an observer,
	// otherwise perform the default behaviour
	def when: ambientRef reconnected: code {
		if: (is: ambientRef taggedAs: AmbientRef) then: {
			(reflect: ambientRef).addConnectionObserver(code);
		} else: {
			nativeWhen: ambientRef reconnected: code
		};
	};
	
	// allow exporting an object together with a set of properties
	def export: serviceObject as: type with: clo {
		def props := isolate: clo;
		nativeExport: [props, serviceObject] as: type;
	};

  // override export:as: to include a property object
	def export: serviceObject as: type {
		export: serviceObject as: type with: { nil };
	};
	
	def AmbientRefsTest() {
		extend: /.at.unit.test.UnitTest.new("AmbientRefTest") with: {
			deftype Foo;
			deftype Bar;
			
			def providerHost := actor: {
				deftype Foo;
				def service := object: {
					def testMethod(x) { x+1 };
				};
				export: service as: Foo;
				
				deftype Bar;
				def service2 := object: {
					def testContent(x) { x*x };
				};
				def y := 42;
				/.at.lang.ambientrefs.export: service2 as: Bar with: { |y| def z := 5 };
			};

			def testAsyncFragileUni() {
				def a := ambient: Foo withCardinality: uni() withElasticity: fragile();
				FuturesModule.when: a<-testMethod(5)@FuturesModule.FutureMessage becomes: { |v|
					self.assertEquals(6,v);
				};
			};
			def testAsyncFragileOmni() {
				def a := ambient: Foo withCardinality: omni() withElasticity: fragile();
				def to := TimerModule.seconds(5);
				FuturesModule.when: a<-testMethod(5)@[SustainedMessage(to),FuturesModule.FutureMessage] becomes: { |v|
					self.assertEquals(6,v);
				};
			};
			def testAsyncParamPassing() {
				def a := ambient: Foo withCardinality: uni() withElasticity: fragile();
				def act := actor: { def rcv(ar) { ar } };

				FuturesModule.when: act<-rcv(a)@FuturesModule.FutureMessage becomes: { |newAR|
					self.assertTrue(is: newAR taggedAs: AmbientRef);
					self.assertFalse(is: newAR taggedAs: /.at.types.FarReference);
				};
			};
			def testAsyncWhereOnSturdyUni() {
				def a := ambient: Bar where: { |props| props.y > 40 };
				FuturesModule.when: a<-testContent(5)@FuturesModule.FutureMessage becomes: { |v|
					self.assertEquals(25,v);
				};
			};
			def testAsyncWhereOnFragileUni() {
				def a := ambient: Bar withCardinality: uni()
				                      withElasticity: fragile()
				                      where: { |props| props.z == 5 };
				FuturesModule.when: a<-testContent(5)@FuturesModule.FutureMessage becomes: { |v|
					self.assertEquals(25,v);
				};
			};
		};
	};
};