import ~.values;

def isMethodDefinition: statement { is: statement taggedAs: /.at.types.MethodDefinition; };

def restrict: object to: interface {
	def statements := interface.method.bodyExpression.statements;
	
	def parseTree := `{ #@( 
		statements.map: 
			{ | statement |
				{ | return |
					if: (isMethodDefinition: statement) then: {
						def methodBody := statement.bodyExpression.statements;
						if: ((methodBody.length == 1).and: { methodBody[1] == `nil }) then: {
														
							return( `{ def #(statement.selector) ( #@(statement.arguments) ) { 
								#(object) ^ #(statement.selector) ( #@(statement.arguments) )
							}});
						}
					};
					
					/* else return */ 
					statement;
				}.escape();
			}
		)
	};
	
	object: closure( 
		method ( interface.method.name, interface.method.parameters, parseTree ),
		interface.context);
};

restrict: self to: {
	def restrict: object to: interface;
}
