/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* The meta-level implementation of the futures language construct */

// import Exception type, used for catching exceptions
def Exception := /.at.types.Exception;
def Isolate := /.at.types.Isolate;

// importing leasing constructs, used for automatically ruining futures after certain timeout.
def LeasingModule := /.at.lang.leasedrefs;
def TimerModule := /.at.support.timer;

// a future can be in one of these three states
def UNRESOLVED := 0;
def RESOLVED := 1;
def RUINED := 2;

// all future objects are marked with this type
deftype Future;

//create TimeoutException used for notifying the ruining of a future when its lease expires. 
deftype TimeoutException <: Exception;
def XTimeoutException := extend: /.at.exceptions.createException(TimeoutException) with: {
	 def init(future, receiver := nil, message := nil){
		 if: (receiver == nil) then: {
			 super^init("Future: " + future + " timed out");			
		 } else: {
			 super^init("Future: " + future + " timed out while sending " + message.selector + " to " + receiver);
		 }
	 };
};

// To register a when-observer on a future, a message needs to be sent to its mirror
// This would only be possible on far references to futures if an explicit additional
// far reference to its mirror would be passed. This restriction is avoided through the
// introduction of a MetaMessage type: messages typed with it will be handled by the
// future's mirror rather than being forwarded to the actual principal when the future is resolved.
import /.at.lang.firstclassrefs;

// the mirror of a Future object
def FutureMirror := mirror: {
	// initialize the state of the prototype
	def state := UNRESOLVED;
	def resolvedValue := nil;
	def inbox := [];
	def subscribers := [];

  // a future is a special kind of far reference
  // therefore, this mirror mixes in the 'far reference' behaviour
  // Because a future is pass-by-reference, we do not inherit the
  // parameter-passing behaviour of the far ref trait
  import TEventualRef exclude pass;
  
	// constructor: used to initialize the state of the new future
	def init(@args) {
		super^init(@args); // initialize this future's base field
		state := UNRESOLVED;
		resolvedValue := nil;
		inbox := [];
		subscribers := [];
	};

  // Using resolveWithValue(value) rather than resolve(value) as to
  // not accidentally override the resolve() MOP method of the defaultMirror
	def resolveWithValue(value) {

		// if value == myself, don't do anything (can happen when forwarding messages)
		// (check not strictly necessary: otherwise I would just register
		//  a listener on myself)
		if: !(self == value) then: {
			// is the future resolved by another future?
			if: (is: value taggedAs: Future) then: {
				// register this future as a listener with the resolved future value
				value<-addResolutionListener(object: {
					def notifyResolved(val) {
						// re-resolve this future with the actual value
						resolveWithValue(val);
					};
					def notifyRuined(exc) {
						// ruin this future
						ruinWithException(exc);
					}
			  // note that <-addResolutionListener is a message directed to the future's mirror
			  // and that no future return value is required
				})@[MetaMessage, OneWayMessage];
			} else: {
				if: (state == UNRESOLVED) then: {
					state := RESOLVED;
					resolvedValue := value;
					inbox.each: { |msg| value <+ msg };
					inbox := [];
					subscribers.each: { |sub| sub<-notifyResolved(value)@OneWayMessage };
					subscribers := [];
				};	
			};	
		};
		nil;
	};

	def ruinWithException(exception) {

		if: (state == UNRESOLVED) then: {
			state := RUINED;
			resolvedValue := exception;
			inbox.each: { |msg|
				if: (is: msg taggedAs: FutureMessage) then: {
					msg.future<-ruinWithException(exception)@[MetaMessage,OneWayMessage];
				};
			};
			inbox := [];
			if: (subscribers.isEmpty) then: {
				// warning to ease debugging when something goes wrong in a future that's never accessed
				system.println("[futures.at] Warning: future has no listeners to catch exception: " + exception);
				system.println(exception.stackTrace);
			} else: {
				subscribers.each: { |sub| sub<-notifyRuined(exception)@OneWayMessage };
				subscribers := [];	
			}
		};
		nil;
	};

	// adds a resolution listener to the future
	// @param sub a resolution listener
	def addResolutionListener(sub) {
		// if future has already been resolved/ruined, notify listener immediately
		if: (state == RESOLVED) then: {
			sub<-notifyResolved(resolvedValue)@OneWayMessage;
		} else: {
			if: (state == RUINED) then: {
				sub<-notifyRuined(resolvedValue)@OneWayMessage;
			} else: {
			  subscribers := subscribers + [ sub ];	
			}
		};
		nil;
	};
	
	// upon timeout, a future ruins itself with a timeout exception
	def timeout(receiver := nil, message := nil) {
		ruinWithException(XTimeoutException.new(self.base, receiver, message));
	};
	
	// the following methods make a future behave like a bounded multifuture
	// with upper bound equal to 1. This enables regular futures to be passed
	// anywhere a multifuture is expected in the code.
	
	def upperBound := 1;
	
	// a regular future is fully resolved if it is no longer unresolved
	def isFullyResolved() { !(state == UNRESOLVED) };
	
	// a whenEach:becomes: listener on a regular future behaves exactly the same
	// as a when:becomes: listener (it triggers at most once)
	def addWhenEachListener(sub) {
		addResolutionListener(sub);
	};
	
	// a whenAll:resolved:ruined: listener triggers when the future
	// either becomes resolved or ruined. Provide an adaptor from
	// when:becomes: listeners to whenAll:resolved:ruined: listeners
	def addWhenAllListener(sub) {
		addResolutionListener(object: {
			def notifyResolved(val) {
				sub<-notify([val], [])@OneWayMessage;
			};
			def notifyRuined(exc) {
				sub<-notify([], [exc])@OneWayMessage;
			};
		});
	};
	
	// in the case of a multifuture this forces it to become totally
	// resolved. In the case of a regular future, it is considered to
	// timeout the future
	def becomeResolved() {
		timeout();
	};

	// provide the required methods for the TEventualRef trait
	
	def intercept(msg) {
		// msg received by a resolved future? forward the message
		if: (state == RESOLVED) then: {
			resolvedValue <+ msg;
		} else: {
			if: (state == RUINED) then: {
				(is: msg taggedAs: FutureMessage).ifTrue: {
					msg.future<-ruinWithException(resolvedValue)@[MetaMessage,OneWayMessage];
				};
			}	else: {
				// accumulate message in this future's inbox
				inbox := inbox + [msg];
				nil;
			};
		};
	};

	def toString() {
		if: (state == RESOLVED) then: {
			  "resolved future:" + resolvedValue;
		} else: {
			if: (state == RUINED) then: {
				"ruined future:" + resolvedValue;
			}	else: {
				"unresolved future";
			};
		};
	};
	
	// to satisfy the required interface of TEventualRef, not really required
	def transportStrategy := { }
	/*	def [fut, res]/.at.lang.futures.makeFuture();
		originalFuture<-resolveWithValue(fut)@[/.at.lang.futures.MetaMessage];
		fut
	};*/
};

def makeFuture(timeout := nil) {
	// futures are empty objects mirrored by a future mirror
	// note that the future mirror is implicitly instantiated for each new future!
	def future := object: { nil } taggedAs: [ Future ] mirroredBy: FutureMirror;
  constructResolverFor(future, timeout);
};

def constructResolverFor(future, timeout := nil) {
	def resolver := isolate: { |future|
		def resolve(val) { future<-resolveWithValue(val)@[/.at.lang.firstclassrefs.MetaMessage, /.at.lang.futures.OneWayMessage]; };
		def ruin(exc) { future<-ruinWithException(exc)@[/.at.lang.firstclassrefs.MetaMessage, /.at.lang.futures.OneWayMessage]; };
	};

	// has the future been annotated with a timeout?
	if: (nil != timeout) then: {
		// if so, wrap the future into a single-call lease
		[ constructLeaseFor(future, timeout), resolver ];
	} else: {
		// by default futures are not leased.
		[ future, resolver ];
	};
};

def constructLeaseFor(future, timeout) {
	def futureLease := LeasingModule.singleCallLease: timeout for: future;
	LeasingModule.when: futureLease expired: {
		(reflect: future).timeout();
	};
	futureLease
};

// extend a regular asynchronous message with futures behaviour
def futurize(msg, future, type := FutureMessage) {
	// extend default message with FutureMessage behaviour
	extend: msg with: { |future|

    // return value of the message send is the associated future
    def sendTo(@args) {
	    def res := super^sendTo(@args);
	    // only override return value if it is the default nil value
	    // this allows other language constructs (e.g. ambient refs) to return
	    // other values for their asynchronous message sends, even if the message
	    // is tagged as a future message
	    if: (res == nil) then: {
			  if: (is: future taggedAs: /.at.lang.leasedrefstrait.LeasedRef) then: {
				  // normally OK because executed at sender-side (so future will still be a near ref here)
				  (reflect: future).getPrincipal();
			  } else: {
			    future;
			  }
	    } else: {
		    res
	    }
	  };

		// the process method is invoked when an async message arrives
	  def process(behaviour) {
			try: {
				// delegate to parent to actually invoke the method
				def result := super^process(behaviour);

				// if everything goes right, resolve the attached future
				// replace the placeholder symbol with the actual result
				future<-resolveWithValue(result)@[/.at.lang.firstclassrefs.MetaMessage, /.at.lang.futures.OneWayMessage];

				result;

			// note that we need to qualify the full path to the Exception type:
			// the Exception variable defined above is out of scope since this message is an isolate!
			} catch: /.at.types.Exception using: { |e|
				future<-ruinWithException(e)@[/.at.lang.firstclassrefs.MetaMessage, /.at.lang.futures.OneWayMessage];

				// re-raise the caught exception
				raise: e;
			};
		};
	} taggedAs: [ type ];
};

def futurizeC := &futurize;
def makeFutureC := &makeFuture;

// all future-carrying messages are marked with this type
deftype FutureMessageT <: /.at.types.AsyncMessage;
def FutureMessage := extend: FutureMessageT with: { |makeFutureC,futurizeC,FutureMessageT|
  def annotateMessage(msg) {
		// by default, make a future without timeout
		def [fut,res] := makeFutureC();
		futurizeC(msg, fut, FutureMessageT);
  };
};

// type that signifies that no future should be attached to a message
deftype OneWayMessage <: /.at.types.AsyncMessage;

// Addition for the integration of leasing and futures:

// type that signifies that futures objects are leased for a given timeout
deftype DueType <: FutureMessage; 
def Due(timeout) {
	extend: DueType with: { |timeout,makeFutureC,futurizeC,DueType|
	  def annotateMessage(msg) {
			// integration of futures with leasing
			def [fut,res] := makeFutureC(timeout);
			futurizeC(msg, fut, DueType);
	  };
	}// taggedAs: [/.at.types.Isolate, /.at.types.TypeTag ];
};

// should future-type message sending be supported for default (unannotated) messages?
// def enableFuturesOnDefaultMessages := false;

// this object is returned when this file is loaded, hence
// it is the public interface to code defined in this file
def FuturesModule := object: {
	// support for first-class futures: returns a pair
	// [ future, resolver]. The resolver can be used to easily resolve
	// or ruin the corresponding future
  def makeFuture := &makeFuture;

  // is actually only exported to be used by the MultiFuturesModule!
  def constructResolverFor := &constructResolverFor;
  def constructLeaseFor := &constructLeaseFor;

	// when-catch support, version without a catch block
	def when: future becomes: resolvedBlock {
		when: future becomes: resolvedBlock catch: Exception using: { |e|
			system.println("[futures.at] Warning: re-raising uncaught exception in when:becomes: because no catch-clause specified: " + e);
			raise: e; // raise the uncaught exception
		}
	};

  // when-catch support, version with one generic catch-all block
	def when: future becomes: resolvedBlock catch: excBlock {
		when: future becomes: resolvedBlock catch: Exception using: excBlock
	};

	// when-catch support, version with one specific catch block
	def when: future becomes: resolvedBlock catch: excType using: excBlock {
		if: (future == nil) then: {
			raise: /.at.exceptions.XIllegalOperation.new("when:becomes: on nil value. Probably an async message does not return a future.");
		};
		
		def [whenFuture,resolver] := makeFuture();
		def notify(block, val) {
			try: {
				resolver.resolve(block(val));				
			} catch: Exception using: {|e|
				resolver.ruin(e);
			};
			nil;
		};
		if: !(is: future taggedAs: Future) then: {
			raise: /.at.exceptions.XIllegalOperation.new("when:becomes: on non-future value: " + future + (reflect: future).listFields);
		} else: {
			future<-addResolutionListener(object: {
				def notifyResolved(val) { notify(resolvedBlock, val); };
				def notifyRuined(exc) {
					if: (is: exc taggedAs: excType) then: {
						notify(excBlock, exc);
					} else: {
						system.println("[futures.at] Warning: uncaught exception: " + exc + ". Can only cath: " + excType);
					};
				};
			// note that <-addResolutionListener is a message directed to the future's mirror
			// and that no future return value is required
			})@[MetaMessage, OneWayMessage];	
		};
		whenFuture; // when returns a future itself
	};

  // groups a table of futures into a single future which is resolved
  // with a table of values or ruined with an exception
	// when: (group: [ a<-m(), b<-n() ]) becomes: { |values| ... }
	def group: futures {
		def [futForAll, res] := makeFuture();
		def resolutions[futures.length] { nil };
		def nextUnresolved := 0;
		def idx := 0;
		futures.each: { |future|
			idx := idx + 1;
			def futurePosition := idx;
			when: future becomes: { |val|
				nextUnresolved := nextUnresolved + 1;
				resolutions[futurePosition] := val;
				if: (nextUnresolved == futures.length) then: {
					res.resolve(resolutions);
				};
			} catch: { |e|
				res.ruin(e); // ! only first exception is propagated
			};
		};
		futForAll;
	};
	
	/**
	 * future: { |return|
	 *   // some computation
	 *   return(val)
	 * }
	 *
	 * is equivalent to the slightly more verbose
	 * def [fut,res] := makeFuture();
	 * try: { // some computation
	 *        res.resolve(val);
	 * } catch: Exception using: { |e| res.ruin(e) }
	 * fut;
	 */
	def future: closure {
		def [fut,res] := makeFuture();
		try: {
			closure({|val| res.resolve(val)});
	  } catch: /.at.types.Exception using: { |e| res.ruin(e) };
		fut;
	};
	
	/**
	 * asyncfuture: { |return, raise|
	 *   // some computation
	 *   return(value) or raise(exception)
	 * }
	 */
	def asyncfuture: closure {
		def [fut,res] := makeFuture();
		closure<-apply([{|val| res.resolve(val)}, { |e| res.ruin(e) }]);
		fut;
	};

  // make the Future type publicly visible
  def Future := Future;

  // make the OneWayMessage type publicly visible
  def OneWayMessage := OneWayMessage;

  // make the FutureMessage type publicly visible
  def FutureMessage := FutureMessage;

  //make the Due function publicly visible 
  def Due := &Due;
  def DueType := DueType;

  //make visible the exception raised when futures are ruined by timeout.
  def XTimeoutException := XTimeoutException;
  def TimeoutException := TimeoutException;

  // type that identifies this language module
  deftype FuturesModule;

  def futurize := &futurize;

  /* Installs the futures protocol on the current actor.
   * @param enabledByDefault indicates whether futures should be enabled on unannotated messages
   *        by default, futures are not enabled on unannotated messages
   * @return the previously active actor protocol
   *
	 * Enabling futures will ensure that <- returns a future instead of the default nil value.
	 * Note that <- does *not* return a future if the message send evaluates to a value
	 * other than the default nil value. For example, enabling futures does not cause
	 * the 'handle' return value of a message send to an ambient reference to be replaced
	 * by a future.
	 *
	 * It is advised to use the feature to activate futures by default on unannotated messages
	 * with caution. Not only is it expensive, it increases conflicts with other language constructs
	 * or annotations. Programmers are advised to instead always explicitly annotate their messages
	 * with @FutureMessage if the message should return a future.
	 *
	 * If support for futures on unannotated messages is not required, this method does
	 * not need to be invoked.
   */
  def enableFutures(enabledByDefault := false) {
	  // if futures should not be enabled by default, do not install a custom
	  // actor protocol (the annotate method of FutureMessage type tags takes care of
		// annotating explicitly tagged messages)
		def actor := reflectOnActor();
	  if: (enabledByDefault) then: {
			// do not load the futures module twice!
			if: !(is: actor taggedAs: FuturesModule) then: {
				system.println("[futures.at] enabling futures by default on actor " + actor);

				// the futures protocol by default extends the currently active protocol
				actor.becomeMirroredBy: (extend: actor with: {
					def createMessage(sel, args, types) {
						// if the message was annotated not annotated with OneWayMessage
						// and not already annotated with FutureMessage, add the FutureMessage
						// annotation automatically
						if: ((nil == (types.find: { |type| type.isSubtypeOf(OneWayMessage) })).and:
							  { nil == (types.find: { |type| type.isSubtypeOf(FutureMessageT) }) }) then: {
							types := [FutureMessage] + types;
						};
						super^createMessage(sel, args, types);
					}
				})
			} else: {
			  actor; // return the current actor protocol
			};
	  }
  };

	/*def enableFutures(enabledByDefault := false) {
		def actor := reflectOnActor();
		// can only change this default from 'false' to 'true'
		// once set to 'true', the default may no longer change
		// (as it may break existing code that relies on implicit futures)
		if: ((!enableFuturesOnDefaultMessages).and: {enabledByDefault}) then: {
			system.println("[futures.at] futures are now enabled by default on " + actor);
			enableFuturesOnDefaultMessages := enabledByDefault;
		};
		
		// do not load the futures module twice!
		if: !(is: actor taggedAs: FuturesModule) then: {
			// before installing changes to the creation of messages, create messages that will be used internally
			// to resolve or ruin the futures. If these messages are not created up front they will be subject to 
			// the futures protocol themselves, resulting in an endless cycle of messages if the receiver also has
			// futures enabled.
			system.println("[futures.at] enabling futures on actor " + actor + " (default = " + enabledByDefault + ")");

			// the futures protocol by default extends the currently active protocol
			actor.becomeMirroredBy: (extend: actor with: {
				def createMessage(sel, args, types) {
					// first, create a regular message
					def msg := super^createMessage(sel, args, types);
					// do we need to support futures by default on all messages?
					if: enableFuturesOnDefaultMessages then: {
						// if the message was annotated with OneWayMessage type, override this behaviour
						// and simply return the regular message
						if: (is: msg taggedAs: OneWayMessage) then: {
							// default = FutureMessage, overridden by OneWayMessage, so return normal message
							msg;
						} else: {
							// default = FutureMessage or overriden by DueType, so attach future behaviour
							attachFuture(msg);
						}
					} else: {
						// if the message was explicitly annotated with FutureMessage type, activate
						// the futures behaviour
						if: (is: msg taggedAs: FutureMessage) then: {
							// default = OneWayMessage, overridden by FutureMessage or DueType, so attach future behaviour
							attachFuture(msg);
						} else: {
							// default = OneWayMessage, so return the normal message
							msg;
						}
					}
				};
			
			  def send(rcv, msg) {
				  def result := super^send(rcv, msg);
				  // for a future message, the return value now becomes the message's future
				  if: (is: msg taggedAs: FutureMessage) then: {
					  // if the future is wrapped in a leased reference,
					  // the future has to be accessed via the leased reference
					  if: (is: msg.future taggedAs: LeasingModule.LeasedRef) then: {
						  (reflect:  msg.future).getPrincipal();
					  } else: {
					    msg.future;
					  }
				  } else: {
					   result;
				  };
			  };	
		  } taggedAs: [ FuturesModule ]);
	  } else: {
		  actor; // return the current actor protocol
	  };
  };*/
	
 	def millisec(ms) { TimerModule^millisec(ms) };
	def seconds(s) { TimerModule^seconds(s) };
	def minutes(m) { TimerModule^minutes(m) };
  
  def FuturesTest() {
   extend: /.at.unit.test.UnitTest.new("futures test") with: {
    enableFutures(false);

    def foo() { 5 };    
    
   def testAsyncFutureCreation() {
      def [fut,res] := makeFuture();
      self.assertEquals("<unresolved future>", print: fut);
      res.resolve(5);
      when: fut becomes: { |val|
	      self.assertEquals("<resolved future:5>", print: fut);
	    };
    };

    def testFutureSend() {
      def fut := &foo<-apply([])@FutureMessage;
      self.assertNotNil(fut);
      self.assertTrue(is: fut taggedAs: Future);
    };
    
    def testAsyncWhen() {
      when: &foo<-apply([])@FutureMessage becomes: { |v|
        self.assertEquals(5,v);
      };
    };

    def testAsyncGroup() {
	    def o := object: {
			  def m() { 5 };
			  def n() { 6 };
			};
			def f := group: [ o<-m()@FutureMessage, o<-n()@FutureMessage ];
			when: f becomes: { |vals|
				self.assertEquals(2, vals.length);
				self.assertEquals(5, vals[1]);
				self.assertEquals(6, vals[2]);
			};
    };

		def testAsyncDueResolvingTest(){
			//TEST 1: Resolving the future within the timeout period
			//This test uses the AR future as return value of the test.
			def a := actor: {
				deftype AsyncDueResolvingTestT;
				def service := object: { def test() { 5 } };
				export: service as: AsyncDueResolvingTestT;
			};
			deftype AsyncDueResolvingTestT;
			def ref := /.at.lang.ambientrefs_old.ambient: AsyncDueResolvingTestT;
			def future := ref<-test()@Due(LeasingModule.seconds(10));
			when: future becomes: { |v|
			 	self.assertEquals(5,v);
			} catch: TimeoutException using: { |e|
			  self.fail("testAsyncDue1: Unexpected ruined future");
			};
   	};
		
		def testAsyncDueRuiningTest() {
			//TEST 2: ruining the future with a TimeoutException
      def ignoreref := eventualref: { |rcv,msg|
	      if: !(msg.selector	== `(test)) then: {
				  rcv <+ msg;
			  };
	    } to: (actor: {
				def test() { 42 };
			});
	
			def future := ignoreref<-test()@Due(LeasingModule.seconds(4));
			when: future becomes: { |v|
			 	self.fail("Unexpected resolved future. Value = " + v);
			} catch: TimeoutException using: { |e|
				nil
	    };
	  };
	
   };
  };
};


