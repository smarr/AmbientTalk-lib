/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * A module for defining and using 'Dynamic Variables'.
 * Dynamic variables 'simulate' dynamically scoped variables and are often used
 * to parameterize large parts of code. For example, the 'current output stream'.
 * A dynamic variable has the advantage over a simple global variable that
 * it can only be assigned a value for the extent of a block of code.
 *
 * Usage:
 * - defining a dynamic variable:
 *   <tt>def name := dynamicVariable: value</tt>
 * - reading the value of a dynamic variable:
 *   <tt>?name</tt> or <tt>name.value</tt>
 * - setting the value of a dynamic variable within a limited scope:
 *   <tt>with: name is: newval do: { code }</tt> or
 *   <tt>name.is: newval in: { code }</tt>
 *  When the code terminates (normally or via an exception), the dynamic variable is
 *  automatically reset to its previous value.
 *
 * Note: for clarity, it is advised that you prefix your dynamic variables
 * with a 'd', e.g. '?dTimeoutPeriod'. This makes it easier to remember to access
 * these variables by means of '?'.
 *
 * @author tvcutsem
 */

def DynamicVariable := object: {
	// this dynamic variable's current value
	def value := nil;
	
	def init(initVal) {
		value := initVal;
	};
	
	// scoped assignment of the dynamic variable
	def is: newval in: closure {
		def oldVal := value;
		value := newval;
		try: closure finally: {
			value := oldVal;
		};
	};
};

def DynVarModule := object: {

  def dynamicVariable: value { DynamicVariable.new(value) };

  def ?(dynVar) { dynVar.value };

  def with: dynVar is: newval do: closure {
	  dynVar.is: newval in: closure;
  };

  def with: dynVar1 is: newval1 and: dynVar2 is: newval2 do: closure {
	  dynVar1.is: newval1 in: {
		  dynVar2.is: newval2 in: closure
		};
  };

  def DynVarTest() {
	  extend: /.at.unit.test.UnitTest.new("DynamicVariablesTest") with: {
		  def testBasicAccess() {
			  def foo := dynamicVariable: 5;
			  self.assertEquals(5, ?foo);
		  };
		  def testScopedAssignment() {
			  def testVar := dynamicVariable: 1;
			  self.assertEquals(1, ?testVar);
			  with: testVar is: 2 do: {
				  self.assertEquals(2, ?testVar);
			  };
			  self.assertEquals(1, ?testVar);
		  };
		  def testScopedAssignmentWithException() {
			  def testVar2 := dynamicVariable: 1;
			  self.assertEquals(1, ?testVar2);
			  
			  deftype EscapeException;
			  try: {
				  with: testVar2 is: 2 do: {
				    self.assertEquals(2, ?testVar2);
				    raise: /.at.exceptions.createException(EscapeException);
			    };
			  } catch: EscapeException using: { |e|
				  self.assertEquals(1, ?testVar2);
				}
		  };
	  };
  };

};