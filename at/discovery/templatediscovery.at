/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* This module implements glue code to enable OO template matching
 * using service trackers.
 *
 * Example:
 *
 * when: (template: { def foo(); def bar := "val" }) discovered: { |obj|
 *   system.println("discovered an object matching a template")
 * }
 * ---
 * export: (object: { def foo() { 1 }; def bar := "val2" });
 *
 * @author tvcutsem
 */

import /.at.lang.oomatching;
def ServiceTracker := /.at.discovery.discovery.ServiceTracker;

deftype TemplateMatchableObject;

// a TemplateServiceTracker is a ServiceTracker of static type TemplateMatchableObject
// which upon service discovery performs an additional template match before notifying
// any handlers
def TemplateServiceTrackerPrototype := extend: ServiceTracker with: {
	def template;

	def init(templ) {
		super^init(TemplateMatchableObject);
		template := templ;
	};

  // only notify the handler if the object discovered or lost matches the template
  def makeTemplateHandler(handler) {
		{ |service|
			if: (does: service match: template) then: {
			  handler(service)
		  }
		}
  };

	def whenDiscovered: handler {
		super.whenDiscovered: makeTemplateHandler(handler)
	};
	def wheneverDiscovered: handler {
		super.wheneverDiscovered: makeTemplateHandler(handler)
	};
	def wheneverLost: handler {
		super.wheneverLost: makeTemplateHandler(handler)
	};
	
}; // end TemplateServiceTrackerPrototype

def TemplateDiscoveryModule := object: {
	
  def TemplateServiceTracker := TemplateServiceTrackerPrototype;

  /** @see /.at.discovery.discovery.when:discovered: */
	def when: template discovered: handler {
		if: (is: template taggedAs: ObjectTemplate) then: {
			TemplateServiceTracker.new(template).whenDiscovered: handler;
		} else: {
			/.at.discovery.discovery.when: template discovered: handler;
		}
	};
	
	/** @see /.at.discovery.discovery.whenever:discovered: */
	def whenever: template discovered: handler {
		if: (is: template taggedAs: ObjectTemplate) then: {
			TemplateServiceTracker.new(template).wheneverDiscovered: handler;
		} else: {
			/.at.discovery.discovery.whenever: template discovered: handler;
		}
	};
	
	/** @see /.at.discovery.discovery.whenever:lost: */
	def whenever: template lost: handler {
		if: (is: template taggedAs: ObjectTemplate) then: {
			TemplateServiceTracker.new(template).wheneverLost: handler;
		} else: {
			/.at.discovery.discovery.whenever: template lost: handler;
		}
	};

  /** export an object 'by copy' such that it can be matched against a template */
	def export: obj {
		if: !(is: obj taggedAs: /.at.types.Isolate) then: {
			raise: XIllegalOperation.new("Can only export isolate objects without a type tag");
		};
		/.at.discovery.discovery.export: obj as: TemplateMatchableObject;
	};
	
	def TemplateDiscoveryModuleTest() {
		extend: /.at.unit.test.UnitTest.new("TemplateDiscoveryModuleTest") with: {
			
			def testAsyncDiscoveryViaTemplate() {				
				def peer := actor: {
					import /.at.discovery.templatediscovery;
					import /.at.support.timer;
					
					def pub := export: (isolate: {
						def name := "TestName";
						def age := 24;
						// TODO: actually an exported isolate should override '==' such
						// that it can be compared to copies of itself. Otherwise, the service
						// tracker will regard each new copy as a distinct discovered service!
					});
					when: seconds(2) elapsed: {
						pub.unexport();
					}
				};

				import /.at.lang.futures;
				import /.at.lang.oomatching;
				
				def [fut1, res1] := makeFuture();
				def [fut2, res2] := makeFuture();
				
				def personTemplate := template: {
					def name;
					def age := constraint: { is: _ taggedAs: /.at.types.Number };
				};
				
				def sub := when: personTemplate discovered: { |service|
					self.assertEquals("TestName", service.name);
					sub.cancel();
					res1.resolve(true);
				};
				
				def sub2 := whenever: personTemplate lost: { |service|
					sub2.cancel();
					res2.resolve(true);
				};
				group: [fut1,fut2]
			};
		};
	}; // end TemplateDiscoveryModuleTest
}; // end TemplateDiscoveryModule