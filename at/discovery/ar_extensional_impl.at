/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* This module implements revised ambient references where message delivery
 * policies are expressed at the messaging level rather than at the
 * reference level. This module implements "extensional" ambient references
 * whose reach is represented as an explicit collection.
 *
 * @author tvcutsem
 */
def FuturesModule := /.at.lang.futures;
def MFuturesModule := /.at.lang.multifutures;
def Vector := /.at.collections.vector.Vector;
def OneWayMessage := FuturesModule.OneWayMessage;

import /.at.support.timer;
import /.at.lang.firstclassrefs;

FuturesModule.enableFutures(false); // enable futures for explicitly tagged messages

def log := /.at.support.logger.makeLogger("[ar_extensional]", /.at.support.logger.DEBUG);
def debug(text) {
	log(text, /.at.support.logger.DEBUG)
};

deftype DescriptorT;
def DescriptorObject := object: {
	def service;
	def attributes;
	def init(svcObject, attrs) {
		service := svcObject;
		attributes := attrs;
	};
	def ==(other) {
		(does: other respondTo: `service).and: { service == other.service };
	};
} taggedAs: [/.at.lang.types.Isolate, DescriptorT];

def ARExtensionalImpl(DiscoveryModule := /.at.discovery.discovery) {
    def discoveryModuleCapsule := DiscoveryModule.capsule;

	object: {

		def implname := "extensional";
		def capsule := /.at.support.util.uponArrivalBecome: { |discoveryModuleCapsule|
		  /.at.discovery.ar_extensional_impl(discoveryModuleCapsule);
		};

		def extendAmbientReference(arMirror,
			                         typetagOrProtocol,
			                         filter) {
				extend: arMirror with: {
					import TObservable exclude init;
		      TObservable^init(`discovered);

			    def reach := Vector.new();

				  // TODO: also take the hidden 'recall period' of a service tracker into account

					DiscoveryModule.whenever: typetagOrProtocol discovered: { |descriptor|

						debug(self.print + " discovered uniref " + descriptor);

						def service := descriptor;
						def attributes := isolate: { };
						if: (is: descriptor taggedAs: DescriptorT) then: {
							service := descriptor.service;
							attributes := descriptor.attributes;
						};

						if: filter(attributes) then: {
							// add the discovered service to the AR's reach
							debug(self.print + " added to reach: " + service);
							reach.add(service);

							// notify when:discovered: observers
						  self.notify: self.observerCatalog.discovered withArgs: [service];	
						};
					};

					DiscoveryModule.whenever: typetagOrProtocol lost: { |descriptor|
						debug(self.print + " lost uniref " + descriptor);
						def service := descriptor;
						def attributes := isolate: { };
						if: (is: descriptor taggedAs: DescriptorT) then: {
							service := descriptor.service;
							attributes := descriptor.attributes;
						};

						if: reach.contains(service) then: {			
							// remove the lost service from the AR's reach
							debug(self.print + " removed from reach: " + service);
							reach.remove(service);

							// remove all unacknowledged messages from the far ref's native
							// outbox, chances are high these messages are lost, but it might
							// be that they were delivered, so sticking with at-most-once semantics
							// requires that we drop the message
							def out := retract: service;
							debug(self.print + " retracting and dropping messages to " + service +": "+out);
						};
					};

			    def addDiscoveryObserver: obs {
				    self.addObserver: obs to: self.observerCatalog.discovered;
			    };

			    def makeSnapshot() { reach.asTable() };
				}
		}; // end extendAmbientReference

		// Trait hierarchy
		// OR should be implemented using either delegation or composite traits
		// AND should be implemented using double dispatch

		//in message with arity ONE:
		def TOne := object: {
			def createFuture() { FuturesModule.makeFuture() };
			def send: msg to: ar ifNoneInReach: closure {
				if: (ar.reach.isEmpty) then: closure else: {
					def receiver := ar.reach.random;
					debug("[sendTo:ifNoneInReach: (ONE)]: sending "+msg.selector + " to random receiver: " + receiver);
					receiver <+ msg;
				};
			};
			def sendAndRegister(ar, msg) {
				// if the single message could be delivered to an object in range,
				// no retraction is necessary
				def registration := object: { def cancel() { false } };
				self.send: msg to: ar ifNoneInReach: {
					debug("[sendAndRegister (ONE)]: no one in range, starting single search for "+msg.selector);
					// dispatch TDiscoveryLT
					registration := self.registerMessageUntilReceiverFound(ar, msg);
				};
				registration
			};
		};

		//in message with arity ALL:
		def TAll := object: {
			def createFuture() { MFuturesModule.makeMultiFuture() };
			def send: msg to: ar ifNoneInReach: closure {
				if: (ar.reach.isEmpty) then: closure else: {
					debug("[sendTo:ifNoneInReach: (ALL)]: sending "+msg.selector + " to " + ar.reach.length + "receivers");
					ar.reach.each: { |receiver| receiver <+ msg };
				};
			};
			def sendAndRegister(ar, msg) {			
				self.send: msg to: ar ifNoneInReach: { };
				// this method returns a registration object which
				// is implicitly passed on to sendAndRegister
				// (allows early retraction of the message)
				self.registerMessage(ar, msg); // dispatch TDiscoveryLT
			};
		};

		//in message with lifetime INSTANT:
		def TInstant := object: {
			def dispatch(ar, msg) {
				debug("[dispatch (INSTANT)]: sending "+msg.selector + " to rcvrs in range first");
				self.send: msg to: ar ifNoneInReach: { // dispatch TArity
					debug("[dispatch (INSTANT)]: "+msg.selector + " dropped!");
				};
				self.discoveryStopped(msg); // dispatch TCommLT
				// return publication object to 'retract' the message
				// of course, in the case of an instant message no retraction is necessary
				object: { def cancel() { false } };
			}
		};

		//in message with lifetime SUSTAINABLE: {
		def TSustain := object: {
			def dispatch(ar, msg) { self.sendAndRegister(ar, msg) }; // dispatch TArity

			def registerMessageUntilReceiverFound(ar, msg) {
				debug("[registerMessageUntilReceiverFound (SUSTAINABLE)]: searching for rcvrs for "+msg.selector);
				def registration := ar.addDiscoveryObserver: { |rcvr|
					rcvr <+ msg;
					registration.cancel();
				};
				// returns publication that can be used to stop msg delivery
				def stopDiscovery() { self.discoveryStopped(msg) }; // dispatch TCommLT
				object: {
					def cancel() {
						registration.cancel();
						stopDiscovery();
					}
				};
			};

			def registerMessage(ar, msg) {
				debug("[registerMessage (SUSTAINABLE)]: searching for rcvrs for "+msg.selector);
				def registration := ar.addDiscoveryObserver: { |rcvr| rcvr <+ msg };
				// returns publication that can be used to stop msg delivery
				def stopDiscovery() { self.discoveryStopped(msg) }; // dispatch TCommLT
				object: {
					def cancel() {
						registration.cancel();
						stopDiscovery();
					}
				};
			};
		};

		//in message with lifetime TRANSIENT:
		def makeTTransient(initTransientPeriod) {
			def makeAutoExpirable(originalRegistration) {
				def timerRegistration := when: initTransientPeriod elapsed: {
					originalRegistration.cancel();
				};
				object: {
					def cancel() { // signals a premature cancellation
						timerRegistration.cancel(); // stop the timer
						originalRegistration.cancel(); // cancel the registration now
					}
				}
			};
			extend: TSustain with: {		
				def transientPeriod := initTransientPeriod;
				// override the methods defined by the sustainable lifetime trait
				def registerMessageUntilReceiverFound(@args) {
					def reg := super^registerMessageUntilReceiverFound(@args);
					makeAutoExpirable(reg);
				};
				def registerMessage(@args) {
					def reg := super^registerMessage(@args);
					makeAutoExpirable(reg);
				};
			};
		};

		def exportServiceObject(serviceObject, typetagOrProtocol, attributes) {
			if: (is: typetagOrProtocol taggedAs: /.at.lang.types.TypeTag) then: {
				DiscoveryModule.export: DescriptorObject.new(serviceObject, attributes)
				                as: typetagOrProtocol;
			} else: {
				// TODO: implement support for exporting as Protocol + Attributes
				DiscoveryModule.export: serviceObject as: typetagOrProtocol;
			}
		};

	}
}; // end ARExtensionalImpl