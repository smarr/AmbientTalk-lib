/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* This module implements revised ambient references where message delivery
 * policies are expressed at the messaging level rather than at the
 * reference level. This module implements "intensional" ambient references
 * whose reach is represented using an M2MI omnihandle.
 *
 * !! Beware: with this version of ambient refs, any message sent to an AR is also
 * looped back to the sender itself (if it hosts an object exported under a matching type) !!
 *
 * @author tvcutsem
 */
def FuturesModule := /.at.lang.futures;
def MFuturesModule := /.at.lang.multifutures;
def Vector := /.at.collections.vector.Vector;
def ProtocolM := /.at.lang.structuraltypes;
def OneWayMessage := FuturesModule.OneWayMessage;

import /.at.support.timer;
import /.at.lang.firstclassrefs;
import /.at.m2mi.api;

FuturesModule.enableFutures(false); // enable futures for explicitly tagged messages

def log := /.at.support.logger.makeLogger("[ar_intensional_impl]", /.at.support.logger.DEBUG);
def debug(text) {
	log(text, /.at.support.logger.DEBUG)
};

deftype ReplyHandlerT;
deftype ProtocolAmbientRefType;

def RECALL_PERIOD := seconds(5);
def BROADCAST_RATE := seconds(2);
def ANYCAST_TIMEOUT := millisec(500);

def generateMessageId(msg) { (print: msg.selector) + now().intValue };

def min(x,y) { (x < y).ifTrue: { x } ifFalse: { y } };

def makeLeasedIdEntry(id,originalTTL) {
	object: {
		def timeToLive := originalTTL;
	  def id := id;
	  def lapse(duration) { timeToLive := timeToLive - duration };
	  def renew(duration) { timeToLive := min(originalTTL, timeToLive + duration) };
	  def expired() { timeToLive < seconds(0) };
	}
};

// create a table of leased entries
def makeLeasedEntryTable() {
	def entries := Vector.new();
	def leaseRevoker;

	def activateLeaseRevoker() {
		leaseRevoker := whenever: RECALL_PERIOD elapsed: {
		  entries.removeAll: { |entry|
			  entry.lapse(RECALL_PERIOD);
			  entry.expired(); // if true, the entry will be removed
		  };
		  if: (entries.isEmpty) then: {
			  // all entries deleted, can stop checking
			  leaseRevoker.cancel();
			  leaseRevoker := nil;
		  };
	  };
	};

	object: {
		def containsEntry(id) {
			entries.contains(id, { |elt,entry| elt == entry.id })
		};
		def addEntry(id, ttl) {
			entries.add(makeLeasedIdEntry(id, ttl));
			if: (leaseRevoker == nil) then: {
				activateLeaseRevoker();
			};
		};
		def renewEntry(id, ttl) {
			def idx := (entries.find: { |entry| entry.id == id });
			entries.at(idx).renew(ttl);
		};
		def deactivateLeaseRevoker() {
			(nil == leaseRevoker).ifFalse: {
				leaseRevoker.cancel();
			};
			entries := nil;
		};
	}
};

deftype AmbientReference;
deftype AmbientMessageHandler;

def ARIntensionalImpl := object: {
	
	def implname := "intensional";
	def capsule := /.at.support.util.uponArrivalBecome: { /.at.m2mi.ar_intensional_impl };
	
	def extendAmbientReference(arMirror,
		                         typetagOrProtocol,
		                         filter) {
	  extend: arMirror with: {
		
		  def reach;
	    def scope;

	    if: (is: typetagOrProtocol taggedAs: /.at.types.TypeTag) then: {
		    // convert type tag directly into Java interface
		    reach := omnireference: typetagOrProtocol;
		    scope := filter;
	    } else: {	
		    // use a dummy type tag and test protocol conformance at discovery time
		    reach := omnireference: ProtocolAmbientRefType;
		    scope := script: { |service|
			    (/.at.lang.structuraltypes.does: service.protocol
				                             match: typetagOrProtocol).and: { filter(service) };
			  } carrying: `[typetagOrProtocol,filter];
	    };
		
		  def makeSnapshot() {
				def [fut,res] := FuturesModule.makeFuture();
				def snapshot := [];

				def replyhandler := unireference: ReplyHandlerT for: (object: {
					def reply(receiver) { snapshot := snapshot + [receiver] };
				});

				self.performAnycast(replyhandler);
				when: ANYCAST_TIMEOUT elapsed: {
		      detachUniRef: replyhandler;
					res.resolve(snapshot);
				};
				fut;
	    };

	    def performAnycast(replyHandler) {
		    reach<-anycast(scope, replyHandler);
	    };

	    def performBroadcast(msg, id, ttl) {
		    reach<-broadcast(scope, msg, id, ttl);
	    };
		  
		}
	}; // end extendAmbientReference
	
	def exportServiceObject(obj, typetagOrProtocol, attributes) {
		def attributes.protocol := ProtocolM.protocolOf: obj;

		def alreadyReceivedMessages := makeLeasedEntryTable();

		def unicastMessageHandler := unireference: AmbientMessageHandler for: obj;

		def broadcastMessageHandler := object: {
			def anycast(scope, replyHandler) {
				if: scope(attributes) then: {
				  replyHandler<-reply(unicastMessageHandler);
				}
			};
			def broadcast(scope, msg, id, ttl) {
				if: scope(attributes) then: {
					if: !alreadyReceivedMessages.containsEntry(id) then: {
						if: !(ttl == 0) then: {
							alreadyReceivedMessages.addEntry(id, ttl);
						};
						obj <+ msg;
					} else: {
						// msg already previously received, update lease time
						// to make sure the object does not receive it twice
						alreadyReceivedMessages.renewEntry(id, ttl);
					}
				}
			};
		};

		def pub := export: broadcastMessageHandler asTypeTag:
		  ((is: typetagOrProtocol taggedAs: /.at.types.TypeTag).ifTrue: {
			  typetagOrProtocol;
			} ifFalse: {
			  ProtocolAmbientRefType;
			});

		object: {
			def unexport() {
				pub.unexport();
				detachUniRef: unicastMessageHandler;
				alreadyReceivedMessages.deactivateLeaseRevoker();
			}
		}
	};

	// Trait Hierarchy for message handlers

	def TInstant := object: {
		def timeLeft(forMsg) { seconds(0) };
		def stillValid(msg) { false };
	};
	def makeTTransient(timeout) {
		object: {
			def transientPeriod := timeout;
		  def timeLeft(msg) { (msg.handle.sendTime + timeout) - now() };
			def stillValid(msg) { self.timeLeft(msg) > seconds(0) };
	  }
	};
	def TSustain := object: {
		// RECALL_PERIOD is the maximum amount of time receiver wants to recall the message
		def timeLeft(forMsg) { RECALL_PERIOD };
		def stillValid(msg) { true };
	};

	def TAll := object: {
		def createFuture() { MFuturesModule.makeMultiFuture() };
		def dispatch(ar, msg) {
			def continuation;
			def id := generateMessageId(msg);
			def sendOnce() {
				def ttl := self.timeLeft(msg); // dispatch to DiscLT
				
				ar.performBroadcast(msg, id, ttl);
				continuation := when: BROADCAST_RATE elapsed: {
					if: self.stillValid(msg) then: { // dispatch TDiscoveryLT
						sendOnce(); // recursive call to start new broadcast
				  } else: { // stop broadcasting
						self.discoveryStopped(msg); // dispatch TCommLT
				  }
				}
			};
			sendOnce(); // start broadcasting
			
			def stopDiscovery() {
				continuation.cancel();
				self.discoveryStopped(msg); // DISPATCH to CommLT
			};
			object: { def cancel() {  stopDiscovery() } }
		};
	};

	def TOne := object: {
		def createFuture() { FuturesModule.makeFuture() };
		def dispatch(ar, msg) {
			def continuation;
			def sendOnce() {
				def receivers := [];
				def replyHandler := unireference: ReplyHandlerT for: (object: {
					def reply(rcvr) { receivers := receivers + [rcvr] };
				});
				
				ar.performAnycast(replyHandler);
				continuation := when: ANYCAST_TIMEOUT elapsed: {
					if: !receivers.isEmpty then: {
						receivers[(1 ?? receivers.length).round] <+ msg;
						detachUniRef: replyHandler;
						self.discoveryStopped(msg); // dispatch TCommunicationLT
					} else: {
						continuation := when: BROADCAST_RATE elapsed: {
							if: self.stillValid(msg) then: { // dispatch TDiscoveryLT
								sendOnce(); // recursive call to start new anycast
						  } else: { // stop the anycast protocol
								self.discoveryStopped(msg); // dispatch TCommunicationLT
						  }
						}
					}
				}	
			};
			sendOnce();
			
			def stopDiscovery() {
				continuation.cancel();
				self.discoveryStopped(msg); // DISPATCH to CommLT
			};
			object: { def cancel() {  stopDiscovery() } }
		};
	};

/*
	def TArity := object: {
		def keepSending: msg to: ar while: body {
			def continuation;

			def sendOnce() {		
				body()<-ifTrue: {
					continuation := when: DISCOVERY_RATE elapsed: {
						if: self.stillValid(msg) then: { // DISPATCH to DiscLT
							sendOnce();
					  } else: {
						  // stop sending
							self.discoveryStopped(msg); // DISPATCH to CommLT
					  }
					}
				} ifFalse: {
					// stop searching
					self.discoveryStopped(msg); // DISPATCH to CommLT
				}
			};
		  sendOnce();

		  def stopDiscovery() { self.discoveryStopped(msg) }; // DISPATCH to CommLT

		  object: {
			  def cancel() {
				  (nil == continuation).ifFalse: {
					  continuation.cancel();
						stopDiscovery();
					};
			  }
		  }
		};
	};

	def TOne := object: {
		import TArity;
		def createFuture() { FuturesModule.makeFuture() };
		def dispatch(ar, msg) {
			self.keepSending: msg to: ar while: {
				def replies := [];
				def replyhandler := unireference: ReplyHandlerT for: (object: {
					def reply(receiver) { replies := replies + [receiver] };
				});
				ar.performAnycast(replyhandler);

				FuturesModule.future: { |signal|
					when: ANYCAST_TIMEOUT elapsed: {
						if: (replies.length > 0) then: {
							// replies[1] <+ msg;
							replies[1] <+ msg; // self.prepareMessage(msg); // DISPATCH to CommLT
							detachUniRef: replyhandler;
							signal(false); // stop searching
						} else: {
							signal(true); // keep on searching for receivers
						}
					}
				}
			};
		};
	};

	def TAll := object: {
		import TArity;
		def createFuture() { MFuturesModule.makeMultiFuture() };
		def dispatch(ar, msg) {
			def id := generateMessageId(msg);
			self.keepSending: msg to: ar while: {
				def ttl := self.timeLeft(msg); // DISPATCH to DiscLT
				//self.broadcastMessage(ar, msg, id, ttl); // DISPATCH to CommLT
				ar.performBroadcast(msg, id, ttl);
				true; // can always deliver a one-to-many message to more receivers
			}
		};
	};
	*/
}; // end ARIntensionalImpl