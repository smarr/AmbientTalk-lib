/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Ambient Group at Software Languages Lab
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* A small example of "compile-time" metaprogramming or "multi-stage programming"
 * inspired by a similar example from the E programming language:
 *
 * a <href="http://www.erights.org/elang/examples/multi-stage.html">Multi-
 * stage programming in E</a>
 *
 * @author tvcutsem
 */
import /.at.support.timer;

// this is a regular power function
// given two numbers x and n, it returns x^n
def pow(x, n) {
	if: (n == 0) then: {
		1
	} else: {
		x * pow(x,n-1);
	}
};

// let's see whether it works
system.println("pow(5,2) = " + pow(2,5)); // prints 32

// this power function takes an abstract syntax tree representing
// a variable identifier var, and a number n, and returns
// an expression that, when evaluated, yields var^n
def expandPow(var, n) {
	if: (n == 0) then: {
		`1 // `exp returns an abstract syntax tree for exp
	} else: {
		// within a quoted expression, #(exp) evaluates exp,
		// expects it to return an AST, and embeds that AST
		// in the quoted expression
		`(#var * #(expandPow(var, n-1)));
	}
};

// this prints the expression 'y * y * y * 1'
system.println("expandPow(`y,3) = " + expandPow(`y,3));

def powMaker(n) {
	def ast := expandPow(`x, n);
	// the built-in function 'eval:in:' takes an expression and an object and
	// evaluates the expression in the scope of the given object
	// return a function that has the expanded expression as its body:
	eval: `({|x| #ast}) in: self;
};

// pow5 is now bound to a function { |x| x*x*x*x*x*1 }
def pow5 := powMaker(5);

// applying pow5 yields 32, as expected
system.println("pow5(2) = " + pow5(2));

// note that the expanded version is faster, as expected:
system.println("pow(2,5) takes " + (time: { pow(2,5) }) +"ms");
system.println("pow5(2) takes " + (time: { pow5(2) }) +"ms");

self;