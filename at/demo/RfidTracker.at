def UserTrackingModule := object: {

def AmbientBehaviorsModule := /.at.lang.ambientbehaviors.ambientBehaviorsModule;

deftype RfidTagType;
deftype RfidDeviceType;
deftype UserDataType;


def UserData := isolate: {
	def name := nil;
	def timestamp := nil;
	def message := nil;
	
	def init(aName, aTimestamp, aMessage) {
		name := aName;
		timestamp := aTimestamp;
		message := aMessage;
	};
};


def RfidTag := isolate: {
	def id := nil;
	def location := nil;
	def loggedUsers[10];
	
	def logUser(theUserData) {
		loggedUsers := [ theUserData ] + loggedUsers.select(1, 9);
	};
	
	def init(theId, theLocation) {
		id := theId;
		location := theLocation;
	};
};


def RfidDevice := object: {
	def tagEventSource := makeEventSource();
	def tagBehavior := hold: tagEventSource with: (object: {
		def updateWithScannedTag(aTag) {
			aTag;
		};
	});
	def lastTag := value: tagBehavior;
	
	def logUser(userData) {
		if: (nil != lastTag) then: {
			lastTag.logUser(userData);
		};
	};
	
	def tagScanned(theTag) {
		tagEventSource.updateWithScannedTag(theTag);
		lastTag := value: tagBehavior;
	};
	
	AmbientBehaviorsModule.exportBehavior: tagBehavior as: RfidTagType;
	export: self as: RfidDeviceType;
};


def ProcessorNode := object: {	
	def scannedTagBehavior := (AmbientBehaviorsModule.ambientBehavior: RfidTagType)[1];
	
	def processScannedTag(aTag) {
		if: (nil != aTag) then: {
			aTag.loggedUsers;
		} else: {
			nil;
		};
	};
	
	def loggedUsersBehavior := processScannedTag(scannedTagBehavior);
		
	AmbientBehaviorsModule.exportBehavior: loggedUsersBehavior as: UserDataType;
};


def UserNode := object: {
	def TimerModule := /.at.support.timer;
	
	def userData := UserData.new(nil, nil, nil);
	
	def otherUserDataBehavior := (AmbientBehaviorsModule.ambientBehavior: UserDataType)[1];
	
	def setMessage(newMessage) {
		userData.message := newMessage;
	};
	
	def showNearbyUserData(behavior) {
		if: ((nil != behavior).and: { behavior.length > 0 }) then: {
			system.println(" >>> USERS THAT HAVE BEEN HERE:");
			behavior.each: { |data|
				if: (nil != data) then: { 
					system.println(data.timestamp.toString() + " - " + data.name + " says: " + data.message);
				};
			};
			system.println("");
			system.println("");
		};
	};
	
	def init(theUserData) {
		userData := theUserData;
	};
	
	showNearbyUserData(otherUserDataBehavior);
	
	when: RfidDeviceType discovered: { |rfidDevice|
		userData.timestamp := TimerModule.now();
		rfidDevice<-logUser(userData);
	};
};

};


