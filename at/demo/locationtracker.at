/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* A simple location tracker example.
 * Setting: a nomadic ad hoc network where some services are
 * Location Servers, while others are mobile Location Clients.
 * The clients continually submit their location to a location server.
 * The servers are considered to be linked up via the nomadic infrastructure.
 * This allows remote mobile clients in other parts of the network
 * to query the server for the position or track of another mobile client.
 *
 * @author tvcutsem
 */

import /.at.support.timer;
import /.at.ambient.ambientrefs;
import /.at.lang.futures exclude seconds, millisec, minutes, Future, Due;

deftype LocationService;

def makeLocationServer() {
	def locations := jlobby.java.util.HashMap.new();
	def service := object: {
		def queryPath(pid) { locations.get(pid) };
		def queryLast(pid) {
			def l := locations.get(pid);
			if: (nil != l) then: { l[l.length] };
		};
		def submitLocation(pid, loc) {
			def l := locations.get(pid);
			if: (nil != l) then: {
				locations.put(pid, l + [loc]);
			} else: {
				locations.put(pid, [loc])
			};
		};	
	};
	export: service as: LocationService;
	service
};

def makeClient(pid, updatePeriod) {
	def conn := ambient: LocationService;
	whenever: updatePeriod elapsed: {
		def loc := detectCurrentLocation();
		conn<-submitLocation(pid, loc)@[One,Durable,Oneway]
	};
};

def [prevX,prevY] := [0,0];
def detectCurrentLocation() {
	prevX := prevX + 1;
	prevY := prevY + 1;
	[prevX,prevY];
};

def LocationTrackerTest() {
 extend: /.at.unit.test.UnitTest.new("LocationTracker test") with: {

	  def testAsyncTrack() {
		  def [fut,res] := makeFuture();
			def server := makeLocationServer();
			def client1 := makeClient("Alan Turing", seconds(2));
			//def client2 := makeClient("Alonzo Church");
			when: seconds(5) elapsed: {
			  res.resolve(when: server<-queryPath("Alan Turing")@FutureMessage becomes: { |v|
			    client1.cancel();
			    self.assertEquals("[[1, 1], [2, 2]]", print: v);
			  })
			};
			fut;
	  };
  }; 
};

self