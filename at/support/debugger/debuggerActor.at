/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2012
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
**/

/** 
 * Implementation of debugger Actor module of the AmbientTalk debugger called REME-D (read remedy). 
 * More information about REME-D at AmbientTalk's google code site.
 * @author egonzale
**/
deftype DebuggerActor;
deftype Debug <: /.at.lang.types.Message;
def HashMap := /.at.collections.java.hashMap.HashMap;
def Vector := /.at.collections.vector.Vector;
def debuggerUtilModule := /.at.support.debugger.util;

def makeDebuggerActor() {
	 // actorId -> far reference to local manager.
	 def actorList := HashMap.new(); 
	 // stores breakpoints active on all VMs
	 // it should be a hashset but they don't work properly, 
	 // so I use AT vectors to simulate a hashet by manually ensuring that we don't add an element already in it.
	 def breakpointsInAllVM := Vector.new();
	 // stores breakpoints active only on some VMs.
	 // VMID -> HashSet of breakpoints (simulated hashset with vector again).
	 def breakpointsInVM := HashMap.new(); 
	 // stores the actorsId within a VM. 
	 // VMID -> (HashSet of actorIds) (simulated hashset with vector again).
	 def vmIdToActorIdMap := HashMap.new(); 
	 // reference to the debugger event listener to report to
	 def debugEventListener;
	 
	 //helper functions
	 def removeActorFromDataStructures(vmId, actorId,frLocalManager){
		 actorList.remove(actorId);
		 def actorIdsSet := vmIdToActorIdMap.get(vmId);
		 if: (nil != actorIdsSet) then:{
			 actorIdsSet.remove(frLocalManager);
		 }
	 };
	 
	 def addActorToDataStructures(vmId, actorId, frLocalManager){
		 // add it to actor hashmap
		 actorList.put(actorId, frLocalManager);
		 // add it to vmIdToActorIdMap
		 def actorIdsSet := vmIdToActorIdMap.get(vmId);
		 if: (nil == actorIdsSet ) then:{
			 def newSet := Vector.new();
			 newSet.add(frLocalManager);
			 vmIdToActorIdMap.put(vmId, newSet); 
		 } else:{
			 if: (!actorIdsSet.contains(frLocalManager)) then: {
				 actorIdsSet.add(frLocalManager);
			 }
		 }
	 };
	 
	 def notifyBreakpoint(breakpoint, actorIdsSet, isAddition) {
		 if: (nil != actorIdsSet) then:{
			 actorIdsSet.each:{ |frLocalManager|
				 if: (isAddition) then: {
					 frLocalManager<-addBreakpoint(breakpoint)@Debug;
				 } else: {
					 frLocalManager<-removeBreakpoint(breakpoint)@Debug;
				 }
			 }
		}
	 };
	 
	def notifyCommand(actorId, message) {
		def frLocalManager := actorList.get(actorId);
		if: (nil != frLocalManager) then:{
			frLocalManager <+ message;
		};
	};
	
	// Interface with Eclipse, Java GUI, console, etc.
	def localInterface := object: {
	 
	 	def listLocalManagers() {
	 	    def table := [];
	 		actorList.each: { |actorId, reference| 
	 			table := table + [reference];
	 		};
	 		table;
	 	};
	 	
	 	def list() {
	 		actorList.toTable();
	 	};
	 	
	 	def getLocalManagerById(localManagerId) {
	 		actorList.get(localManagerId);
	 	};
		 // Interface methods called from (Eclipse) controller
	  	def setupDebugSession(debugEventList){
	  		debugEventListener := debugEventList;
	  		exportDebugSession();
	  	};
	  	
		def loadMainCode(actorId){
			notifyCommand(actorId, <-evaluateCode()@Debug);
	  	};
	  	
		 def pauseActor(actorId){
		 	notifyCommand(actorId, <-pause()@Debug);
		 };
		 
		 def resumeActor(actorId){
		 	notifyCommand(actorId, <-resume()@Debug);
		 };
		 
		 def stepInto(actorId){
		 	notifyCommand(actorId, <-stepInto()@Debug);
		 };
		 
		 def stepOver(actorId){
		 	//stepReturn(actorId);
		 	notifyCommand(actorId, <-stepOver()@Debug);
		 };
		 
		 def stepReturn(actorId){
		 	notifyCommand(actorId, <-stepReturn()@Debug);
		 };
		 		 
		 def setBreakpoint(filename, lineNumber){
		 	 def breakpoint := debuggerUtilModule.codeBreakpoint.new(filename, lineNumber);
		 	 if: !breakpointsInAllVM.contains(breakpoint) then: {
  				breakpointsInAllVM.add(breakpoint);
			 };
			 actorList.each: { |actorId, frLocalManager|
				 frLocalManager<-addBreakpoint(breakpoint)@Debug;
			 };
		 };
		 
		 def clearBreakpoint(filename, lineNumber){
		  	 def breakpoint := debuggerUtilModule.codeBreakpoint.new(filename, lineNumber);
			 breakpointsInAllVM.remove(breakpoint);
			 actorList.each: { |actorId, frLocalManager|
				 frLocalManager<-removeBreakpoint(breakpoint)@Debug;
			 };
		 }; 
		 
		 def breakpointActiveOn(filename, lineNumber, listVMIds){
			 // notify the local managers already discovered.
			  def breakpoint := debuggerUtilModule.codeBreakpoint.new(filename, lineNumber); 
			  vmIdToActorIdMap.each: { | vmId, actorIdsSet | 
				 def bkpDS := breakpointsInVM.get(vmId);
				 if: (bkpDS != nil) then: {
					 if: ( listVMIds.contains(vmId)) then:{
						 if: (! bkpDS.contains(breakpoint)) then:{
							 notifyBreakpoint(breakpoint,actorIdsSet, true);
						 };
					 } else: {
						 // the breakpoint should not be active in this VM
						 if: ( bkpDS.contains(filename, lineNumber)) then:{
							 notifyBreakpoint(breakpoint,actorIdsSet, false);
						 }
					 }
				 } else:{
					 // if the VMID is not in the data structures means that a local manager didn't
					 // have time to announce his presence to the debuggerActor. 
					 // Do not do anything, it will get the breakpoint in the actorStarted method.
					 };
			 };
			 // remove from breakpointsInAllVM table if it was there.
			 // since now it only belongs to a subset of VMIDs.
			 def res := breakpointsInAllVM.remove(breakpoint);
			 // add the breakpoints to the breakpoint per VM data structure.
			 // you need this data structure for new discovered local managers,
			 // so that they don't think a disabled breakpoint is active on their VM.
			 def it := listVMIds.iterator();
			 while: {it.hasNext()} do:{
				 def vmId := it.next();
				 def bkpDS := breakpointsInVM.get(vmId) ;
				 if: (bkpDS == nil) then:{
					 bkpDS := Vector.new();
				 };
				 if:  !bkpDS.contains(breakpoint) then:{ 
				 	bkpDS.add(breakpoint);
				 };
				 breakpointsInVM.put(vmId, bkpDS);
			 }
		 
		 };
		 
		def exportDebugSession(){
	 		export: remoteInterface as: DebuggerActor;
	 		network.online();
		};
		
		
	 };
	 // Interface methods called from local managers
	 def remoteInterface := object: {
		 // Interface methods called from Actors which need to be propagated to Eclipse
		 def actorStarted(actorId, sourceLocation, frLocalManager){
			 def localManager := actorList.get(actorId);
			if: (nil == localManager) then: {
				 def vmId := debuggerUtilModule.getVMIDFromFarReference(frLocalManager);
				 addActorToDataStructures(vmId, actorId, frLocalManager);
				 // send active breakpoints
				 // first, get breakpoints active in all VMs
				 def breakpoints := breakpointsInAllVM.asTable(); 
				 // secondly, add breakpoints active in this VM if any.
				 def bkpDS := breakpointsInVM.get(vmId); 
				 if: (bkpDS != nil) then: {
					 breakpoints := breakpoints + bkpDS.asTable();
				 };
				// def breakpointsToSend := breakpoints.map: { | t | debuggerUtilModule.breakpoint.new(t[1], t[2])};
				 frLocalManager<-startInDebugMode(breakpoints,[])@Debug;
				 // inform GUI
				 if: (nil == sourceLocation) then: { // nil only if behaviour of the default actor.
					debugEventListener<-startActorEvent(actorId, vmId, "default", 0)@Debug;
				 } else: {
					debugEventListener<-startActorEvent(actorId, vmId, sourceLocation.fileName, sourceLocation.line)@Debug;
	      		 };
				
				 whenever: frLocalManager disconnected: {
					 removeActorFromDataStructures(vmId,actorId, frLocalManager);
					 //THINK: if actor was "infected", you should remove it from GUI totally.
					 // if actor was "part of the gui", just grey out it?
					  debugEventListener<-disconnectActorEvent(actorId);
				 }; 
			 };
		 };
		 
		 def actorPaused(actorId,actorState){
			 // second argument is Map <String, Object> 
			 debugEventListener<-pauseActorEvent(actorId, actorState)@Debug;
		 };
		 
		 def actorResumed(actorId){
		 	debugEventListener<-resumeActorEvent(actorId)@Debug;
		 };
		 
		 def updateInbox(actorId, msg, addition := true) { // TODO: it should be actorId, msg, rcv? 
			if: addition then: {
			//debuggerUtilModule.getObjectId(rcv)
			 	debugEventListener<-messageAddedToActorEvent(actorId, msg)@Debug;
	     	} else: {
	     		debugEventListener<-messageRemovedFromActorEvent(actorId, msg)@Debug;
	     	};
		 };
		 
		 def updateMessageSent(actorId, msg) {
		 	debugEventListener<-messageSendFromActorEvent(actorId, msg)@Debug;
		 };
	 };

	 localInterface;
};
self;