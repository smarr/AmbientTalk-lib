/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* The TimerModule makes use of java.util.Timer to be able to schedule
 * code for execution at a later point in time. Code can be scheduled
 * for execution either once or at regular intervals. Scheduled pieces
 * of code can be cancelled prematurely.
 *
 * @author tvcutsem
 */

// support class that allows you to create a TimerTask by means of a Runnable
// this is necessary because AT objects can only be passed as interface types.
def RunnableTimerTask := jlobby.at.support.RunnableTimerTask;
def Timer := jlobby.java.util.Timer;
def TimerTask := jlobby.java.util.TimerTask;
def long := jlobby.java.lang.Long.TYPE;

def theTimer := Timer.new();
def scheduleMethod := theTimer.&schedule.cast(TimerTask, long);
def scheduleAtFixedRateMethod := theTimer.&schedule.cast(TimerTask, long, long);

def currentTimeMillis := jlobby.java.lang.System.&currentTimeMillis;

def makeLong := /.at.support.symbiosis.&long;

def TimerModule := object: {
	  
	// convert AmbientTalk number to a Java long representing # millisec
	def millisec(ms) { makeLong(ms) };
	def seconds(s) { millisec(s*1000) };
	def minutes(m) { seconds(m*60) };
	
	def now() { currentTimeMillis() };
	
	// when the timeout has elapsed, invoke the given code block
	// returns a subscription object that can be used to cancel execution of the block
	def when: timeout elapsed: code {
		def ttask := RunnableTimerTask.new(object: {
			def run() { code() };
		});
		scheduleMethod(ttask, timeout);
		object: {
			def cancel() { ttask.cancel() };
			def getTimeRemaining() { 
			  def time := makeLong(0);
			  def expiredTime := now() - ttask.scheduledExecutionTime();
				if: ( expiredTime < timeout) then: {
					time := timeout - expiredTime;
				};
				time 
			};
		}
	};
	
	// each timeout milliseconds, invoke the given code block
	// returns a subscription object that can be used to cancel execution of the block
	def whenever: timeout elapsed: code {
		// additional boolean flag to check if we can actually execute the code
		// reason: when canceling a scheduled task, due to timing, the task may
		// have already been fired (and hence the call to <-run() is already
		// scheduled in the mailbox of this actor). To prevent the task from running
		// anyway, we perform an additional check on the boolean. This *guarantees*
		// that after invoking pub.cancel(), the scheduled code is no longer ran
		def canceled := false;
		def ttask := RunnableTimerTask.new(object: {
			def run() { canceled.ifFalse: { code() } };
		});
		scheduleAtFixedRateMethod(ttask, timeout, timeout);
		object: {
			def cancel() {
				canceled.ifFalse: {
					canceled := true;
					ttask.cancel();
					ttask := nil;
				}
			}
		}
	};
	
	def has: period passedSince: timestamp {
	  now() - timestamp > period
	};
	
	def every: period until: condClosure do: body {
		def pub := whenever: period elapsed: {
			if: condClosure() then: {
				pub.cancel();
			} else: {
				body()	
			};
		};
	};
	
	def every: period while: condClosure do: body {
		every: period until: { !condClosure() } do: body;
	};
	
	def TimerTest() {
	 extend: /.at.unit.test.UnitTest.new("TimerTest") with: {
      def FuturesModule := /.at.lang.futures; FuturesModule.enableFutures(false);
		
	  def testAsyncWhenElapsed() {
		def [fut,res] := FuturesModule.makeFuture();
		when: millisec(200) elapsed: {
		  res.resolve(true);
	    };
		fut;
	  };
		def testAsyncWhenEverElapsed() {
			def run := 0;
			def [fut,res] := FuturesModule.makeFuture();
			def sub := whenever: millisec(200) elapsed: {
				run := run + 1;
				if: (run == 3) then: {
					sub.cancel();
					res.resolve(true);
				};
			};
			fut;
		};
		def testAsyncEveryUntil() {
			FuturesModule.future: { |reply|
				def stop := false;
				def run := 0;
				every: millisec(200) until: { stop } do: {
					run := run + 1;
					if: (run == 2) then: {
						stop := true;
						reply(true);
					};
				};
			};
		};
	};
 };
	
};