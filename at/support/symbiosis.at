/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* Support file to easily create and manipulate Java primitive types
 * from within AmbientTalk.
 *
 * @author tvcutsem
 */
 
 def PrimitiveJavaConversion := jlobby.at.support.PrimitiveJavaConversion;
 def Long := jlobby.java.lang.Long;
 def Coercer_coerce := jlobby.edu.vub.at.objects.coercion.Coercer.&coerce;

 def SymbiosisModule := object: {
 
   /**
    * for the returned ambienttalk object, it holds that
    * obj instanceof interface
    * @param obj an AmbientTalk object to cast into a Java interface type
    * @param interface a java.lang.Class object denoting a Java interface type
    */
   def cast: obj into: interface {
	   Coercer_coerce(obj, interface);
   };
   
 
   def long(nbr) { PrimitiveJavaConversion.intToLong(nbr) };
   def short(nbr) { PrimitiveJavaConversion.intToShort(nbr) };
   def float(frc) { PrimitiveJavaConversion.doubleToFloat(frc) };
   def byte(nbr) { PrimitiveJavaConversion.intToByte(nbr) };  

	//Arithmetic operations on longs
	def Long.+(other) {
  		PrimitiveJavaConversion.addLongs(self, other)
	};
	def Long.-(other) {
  		PrimitiveJavaConversion.subtractLongs(self, other)
	};
	def Long.*(other) {
  		PrimitiveJavaConversion.multiplyLongs(self, other)
	};
	def Long./(other) {
  		PrimitiveJavaConversion.divideLongs(self, other)
	};
	def Long.>(other) {
  		PrimitiveJavaConversion.opgtxLongs(self, other)
	};
	def Long.<(other) {
  		PrimitiveJavaConversion.opltxLongs(self, other)
	};
	def Long.inc() {
		  PrimitiveJavaConversion.addLongs(self, PrimitiveJavaConversion.intToLong(1));
	};
	
	def getClassInstanceMethod(class, name, paramtypes) {
	    PrimitiveJavaConversion.getClassInstanceMethod(class, name, paramtypes);
	};

}
