/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * @author Christophe Scholliers
 * @email cfscholl@vub.ac.be
 */

import /.at.support.symbiosis; 
import /.at.support.inspectorMirrors;
import /.at.support.ATextArea;
import /.at.support.cellValues;

/*  
 *  Inspector GUI
 *  ------------------------------------
 *  - FieldNames   - Field Values      -
 *  -              -                   -
 *	------------------------------------
 *	- Input Text                       -
 *	-                                  -
 *	------------------------------------
 *	- Output Text                      -
 *	-                                  -
 *  ------------------------------------
 *
 *  The inspector allows the programmer to open a window 
 *  that shows the fields and the values of the object
 *  These values are shown in a table, when the field values are 
 *  primitive types these can be changed by the user.
 *  Changing these values is done by typing a valid ambienttalk expression.
 *  This value will be evaluated in the context of the inpspected object. 
 *  When the fieldvalue is a methodbody, the user can change this body as well.
 *  This is implemented by removing the method and then inserting 
 *  a new one with the newly specified method body.
 *
 */

def inspect(value) {
	def valueMirror := (reflect: value);
	//Create the table view for the fields
	def fieldList := ImmutableModel.new(["Field Name","Field Value"], 0);
	def table := swing.JTable.new(fieldList);
	def scrollPane := swing.JScrollPane.new(table);
	//The input area for evaluating ambienttalk expressions
	def textArea := swing.JTextPane.new();
	def scrollPaneText := swing.JScrollPane.new(textArea,
	swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
	swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	//The output area for showing the evaluated expressions or error
	def textOutput := swing.JTextPane.new();
	def scrollPaneTextOutput := swing.JScrollPane.new(textOutput,
			swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
			swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	//Create and set up the window.
	def frame :=  swing.JFrame.new((reflect: value).print);
	def contentPane := frame.getContentPane;
	//Set the font of the textarea's		
	def font := awt.Font.new("Monaco", awt.Font.ITALIC, 10);
	textOutput.setFont(font);
	textArea.setFont(font);
	textOutput.setEditable(false);
	//=========================================================
	// Make and install a listner on table Model
	//=========================================================
	def tableModelListner := object: {
		def tableChanged(tableModelEvent) {
			def row := tableModelEvent.getFirstRow();
			def column := tableModelEvent.getColumn();
			def model := tableModelEvent.getSource();
			if: (column >= 0) then: {
				def data := model.getValueAt(row, column);
				data.update(valueMirror,value);
				updateInspector();
			};
		};
	};
	fieldList.addTableModelListener(tableModelListner);
	//=========================================================
	// Install a mouse lisner on the table
	//=========================================================
	def mouseListner := object: {
		 def	mouseEntered(e){}; 
		 def	mouseExited(e) {};
		 def	mousePressed(e) {};
		 def	mouseReleased(e){};
	   def mouseClicked(e) {
	      if: (e.getClickCount() == 2) then: {
	         def model := e.getSource().getModel();
					 def target := e.getSource();
	         def row := target.getSelectedRow();
	         def column := target.getSelectedColumn();
	         // do some action
					 def data := model.getValueAt(row, column);
					 inspect(data.getVal);
	       }
	   }
	};
	table.addMouseListener(mouseListner);
	//=========================================================
	// Install a keypressed on the textarea (F9)
	//=========================================================
	def keylistner := object: {
  	def keyTyped(e) {};
		def keyReleased(e) {};
		def keyPressed(e) {
			 	ambientTalkSyntaxColor(textArea);
	     	if: (e.getKeyCode() == awt.event.KeyEvent.VK_F9) then: {
						try: {
							textOutput.setText(""+(eval: (read: textArea.getText) in: value));
							textOutput.getStyledDocument().setCharacterAttributes(0, textOutput.getStyledDocument().getLength() + 1, asetb, true);							
						} using: object: {
								def canHandle(e) {true}; 
						  	def handle(e) { 
									textOutput.setText(e.getMessage);
									textOutput.getStyledDocument().setCharacterAttributes(0, textOutput.getStyledDocument().getLength() + 1, asetr, true);
							 };
						};
						updateInspector();
	     	};
		};
	};
	textArea.addKeyListener(keylistner);
	//=========================================================
	// Set the frame layout and add the gui elements
	//=========================================================
	def layout := awt.GridLayout.new(3, 1);
	contentPane.setLayout(layout);
	contentPane.add(scrollPane);
	contentPane.add(scrollPaneText);
	contentPane.add(scrollPaneTextOutput);
	frame.setDefaultCloseOperation(swing.JFrame.DISPOSE_ON_CLOSE);
	//=========================================================
	// Show the frame
	//=========================================================
	frame.pack();
	frame.setVisible(true);
	frame.setSize(500, 500);	
	//=========================================================
	// Update the fields and methods of inspector
	//=========================================================
	def updateInspector := {
		def methods 		:= valueMirror.listMethods();
		def fields 			:= valueMirror.listFields();
		fieldList.getDataVector().removeAllElements();
		fields.each: { | field | 	fieldList.addRow( cellValue(field.name,value),  changeableCell(field,value)); };
		methods.each: { | method |
			def printedForm := method.name.text + "( ";
			method.parameters.each: { |param|
				printedForm := printedForm + param + ","
			};
			printedForm := printedForm.explode;
			printedForm.atPut(printedForm.length()," ");
			printedForm := printedForm.implode;
			printedForm := printedForm + ")";
			fieldList.addRow(cellValue(printedForm,value), changeableMethod(printedForm,method.bodyExpression,method.name,value));
		};
	};
	//Update the inspector
	updateInspector();
	//Register an after advice on the inspectedObject to update the inspector
	on: value after: (matchMethod: ".*") do: {|invocation, value| updateInspector(); value; };
};


def testMirror() {
	mirror: {
		def invoke(delegate, invocation) {
			super^invoke(delegate,invocation);
		};
	};
};

def testObjectB := object: {
	def foo := "bar";
} taggedAs: [Object] mirroredBy: testMirror();


def testObjectA := object: {
	def id := "testObjectA";
	def objectTest := testObjectB;
	def setId(new) {
		id := new;
	};	
};

inspect(testObjectA);
testObjectB.foo := 3;
testObjectA.id := 129;