/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * @author Christophe Scholliers
 * @email cfscholl@vub.ac.be
 */

def printMirror() {
	mirror: {
		def printValue;
		def print() { (reflect: printValue).print;};
		def setPrint(val) { printValue := val; };
	};
};

def cellValue(theValue,value) {
	object: { 
		def isField() { 
			false; 
		};
		def setValue(val) {
			theValue := eval: (read: val) in: value;
			(reflect: self).setPrint(theValue);
		};
		def getVal() {
			theValue;
		};
		(reflect: self).setPrint(theValue);
	} mirroredBy: printMirror;
};


def changeableCell(field,value) {
	def cellValueField := cellValue(field.readField(),value);
	extend: cellValueField with: {		
		def update(mirror,value) {
			mirror.grabField(field.name).writeField(super.getVal());
	 	};
	
	 	def isField() {
			!(is: (super.getVal) taggedAs: /.at.support.inspector.inspectorMirrors.Object );
		};
	} mirroredBy: (reflect: cellValueField);
};

def changeableMethod(methodSignature, theValue, name, value) {
	object: {
		def isField() {
			true;
		};
 		def setValue(value) {
				theValue := value;
		};
		def update(mirror,value) {
				mirror.removeSlot(name);
				def result := eval: (read: "def "+methodSignature+"{"+theValue+"}") in: value;
				(reflect: self).setPrint(theValue);
		};
		
		(reflect: self).setPrint(theValue);
	} mirroredBy: printMirror;
};

self;