/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2008
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * @author Christophe Scholliers
 * @email cfscholl@vub.ac.be
 */

def swing := jlobby.javax.swing;
def awt   := jlobby.java.awt;
def ImmutableModel := jlobby.at.support.inspector.ImmutableModel;

//=========================================================
// Interface for key events
//=========================================================
def keyListnerInterface := object: {
	def keyTyped(e) {};
	def keyReleased(e) {};
	def keyPressed(e) {};
};

def keyListnerInstaller(object, listner) {
	object.addKeyListener(keyListner);
};

def whenEvent: event withInterface: interface install: installer on: object do: code {
	def override := createMethod( event, [], code, []);
	def listner := interface.new();
	(reflect: listener).addMethod(override);
	installer(object,listner);
};

def whenKeyTypedOn: object do: code {
	whenEvent: `keyTyped withInterface: keyListnerInterface install: keyListnerInstaller  on: object do: code;
};

def whenkeyReleasedOn: object do: code {
	whenEvent: `keyReleased withInterface: keyListnerInterface install: keyListnerInstaller  on: object do: code;
};

def whenKeyPressedOn: object do: code {
	whenEvent: `keyPressed withInterface: keyListnerInterface install: keyListnerInstaller  on: object do: code;
};
//=========================================================
// Interface for mouse events
//=========================================================
def mouseListenerInterface := object: {
	 def	mouseEntered(e){}; 
	 def	mouseExited(e) {};
	 def	mousePressed(e) {};
	 def	mouseReleased(e){};
   def  mouseClicked(e) {};
};

def mouseListnerInstaller(object, listner) {
	object.addMouseListener(keyListner);
};

def whenMouseEnteredOn: object do: code {
	whenEvent: `mouseEntered withInterface: mouseListenerInterface install: mouseListnerInstaller  on: object do: code;
};

def whenMouseExitedOn: object do: code {
	whenEvent: `mouseExited withInterface: mouseListenerInterface install: mouseListnerInstaller  on: object do: code;
};

//=========================================================
// Syntax HighLighting
//=========================================================
def scb := swing.text.StyleContext.getDefaultStyleContext();
def asetb := scb.addAttribute(swing.text.SimpleAttributeSet.EMPTY, swing.text.StyleConstants.Foreground, jlobby.java.awt.Color.BLACK);

def scr := swing.text.StyleContext.getDefaultStyleContext();
def asetr := scb.addAttribute(swing.text.SimpleAttributeSet.EMPTY, swing.text.StyleConstants.Foreground, jlobby.java.awt.Color.RED);

def scg := swing.text.StyleContext.getDefaultStyleContext();
def asetg := scb.addAttribute(swing.text.SimpleAttributeSet.EMPTY, swing.text.StyleConstants.Foreground, jlobby.java.awt.Color.GREEN);

def highlight(textComp, patterns) { 
	// First remove all old highlights
	textComp.getStyledDocument().setCharacterAttributes(0, textComp.getStyledDocument().getLength() + 1, asetb, true);
	patterns.each: {|patternDescr|
		def [pattern, color] := patternDescr;
	
		def doc := textComp.getDocument();
		def text := doc.getText(0, doc.getLength());
		def pos := ImmutableModel.indexOf(text,pattern, 0);

		def p := jlobby.java.util.regex.Pattern.compile(pattern);
		def matcher := ImmutableModel.matcher(p,text);

		def sc := swing.text.StyleContext.getDefaultStyleContext();
  	def aset := sc.addAttribute(swing.text.SimpleAttributeSet.EMPTY, swing.text.StyleConstants.Foreground, color);

		while: { matcher.find() } do: {
				textComp.getStyledDocument().setCharacterAttributes(matcher.start() , matcher.end() - matcher.start(), aset, true);
		};
	};	
};
//=========================================================
// Ambienttalk specific highLighting
//=========================================================
def ambientTalkSyntaxColor(textArea) {
 	highlight(textArea, [["def",jlobby.java.awt.Color.BLUE],
											 ["[a-zA-Z]+:",jlobby.java.awt.Color.RED],
											 ["[0-9]+" ,jlobby.java.awt.Color.GREEN]]);
};

self;