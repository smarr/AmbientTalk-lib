/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* Implementation of a minimal but useful logging framework for AmbientTalk
 * Usage:
 *  import /.at.support.logger;
 *  def log := makeLogger("my prefix", INFO); // do not log DEBUG
 *  log("message", ERROR); // message level is optional and defaults to INFO
 *
 * Available error levels are: NONE, DEBUG, WARNING, INFO, ERROR and FATAL
 * in order of exceeding importance.
 *
 * @author tvcutsem
 */

def NONE    := 1;
def DEBUG   := 2;
def WARNING := 3;
def INFO    := 4;
def ERROR   := 5;
def FATAL   := 6;

// returns a logging function
def makeLogger(prefix := "", minLevel := DEBUG, output := system) {
	// made private to this scope in order not to interfere with other names
	def levelToString := ["NONE","DEBUG","WARNING","INFO","ERROR","FATAL"];
	if: (minLevel == NONE) then: {
		// don't log anything at all, just consume the message
		{ |@args| nil }
	} else: {
		{ |msg, level := INFO|
			// only log a message if its log level exceeds the minimum accepted
			if: (level >= minLevel) then: {
				output.println(prefix + "[" + levelToString[level] +"]: " + msg);
			}
		}	
	}
};

// all definitions in this file become visible
self;