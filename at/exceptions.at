/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def Types := /.at.types;

def createException(ofType) {
	object: {
		def stackTrace := "unknown trace for " + ofType.typeName;
		def message := ofType.typeName.text + " exception";
		def getMessage() { message };
		def init(msg := "no message given") {
			message := msg;
		};
	} taggedAs: [ofType];
};

def IndexOutOfBoundsPrototype := extend: createException(Types.IndexOutOfBounds) with: {
	def min;
	def max;
	def idx;
	def init(min, max, idx) {
		super^init("Index out of bounds: given " + idx + " allowed: [" + min + "," + max + "]");
		self.min := min;
		self.max := max;
		self.idx := idx;
	}; 
} taggedAs: [ Types.IndexOutOfBounds ];

def ExceptionModule := object: {
	def createException := &createException;
	def XException := createException(Types.Exception);

  def error(msg) { raise: XException.new(msg) };

	def XArityMismatch := 
		jlobby.edu.vub.at.exceptions.XArityMismatch.new("uninitialized arity mismatch", 0, 0);
	def XIllegalOperation := 
		jlobby.edu.vub.at.exceptions.XIllegalOperation.new("uninitialized illegal op");
	def XParseError := 
		jlobby.edu.vub.at.exceptions.XParseError.new("uninitialized parse error", nil);
	def XSelectorNotFound := 
		jlobby.edu.vub.at.exceptions.XSelectorNotFound.new(`uninitialized, root);

	def XIndexOutOfBounds := IndexOutOfBoundsPrototype;
};