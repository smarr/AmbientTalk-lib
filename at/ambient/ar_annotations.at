/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* This module implements the shared behaviour for both the intensional
 * and extensional implementation of ambient references.
 *
 * @author tvcutsem
 */

def Util := /.at.support.util;

def ARAnnotationModule(AmbientRefsModule) {
	object: {
	
		deftype IllegalAnnotation <: /.at.types.Exception;
		def XIllegalAnnotation := /.at.exceptions.createException(IllegalAnnotation);

		deftype ARAnnotation;

		deftype MsgArity <: ARAnnotation;
		deftype One <: MsgArity;
		deftype All <: MsgArity;

		deftype MsgDiscoveryLifetime <: ARAnnotation;
		deftype Instant <: MsgDiscoveryLifetime;
		deftype TransientT <: MsgDiscoveryLifetime;
		deftype Sustain <: MsgDiscoveryLifetime;

		def Transient(period) {
			extend: TransientT with: { |period|
				def ==(other) { super == other };
			} taggedAs: [/.at.types.Isolate, /.at.types.TypeTag ];
		};

		deftype MsgCommunicationLifetime <: ARAnnotation;
		deftype Oneway <: MsgCommunicationLifetime;
		deftype Twoway <: MsgCommunicationLifetime;
		deftype Reply <: Twoway;
		deftype DueT <: Twoway;

		def Due(timeout) {
			extend: DueT with: { |timeout|
				def ==(other) { super == other };
			} taggedAs: [/.at.types.Isolate, /.at.types.TypeTag ];
		};

		deftype Expirable <: TransientT, DueT;
		def Expires(timeout) {
			extend: Expirable with: { |timeout|
				def ==(other) { super == other };
			} taggedAs: [/.at.types.Isolate, /.at.types.TypeTag ];
		};

		deftype AmbientReference;

		def extendWithHandle(msg, handle) { extend: msg with: {|handle|} };

		def createHandler(msg, dfltArityType, dfltLifetimeType, dfltReplyType) {
			def ArityTrait := arityTraitFor( (is: msg taggedAs: MsgArity).ifTrue: {
			  Util.getAnnotationOfType(msg, MsgArity);
			} ifFalse: { dfltArityType });

			def CommLTTrait;
			def DiscLTTrait;

			// EXPIRABLE => LIFETIME = TRANSIENT AND REPLY = DUE
			if: (is: msg taggedAs: Expirable) then: {
				def ann := Util.getAnnotationOfType(msg, Expirable);
				DiscLTTrait := AmbientRefsModule.makeTExpires(ann.timeout);
				CommLTTrait := nil;
			} else: {
				DiscLTTrait := discLTTraitFor((is: msg taggedAs: MsgDiscoveryLifetime).ifTrue: {
					Util.getAnnotationOfType(msg, MsgDiscoveryLifetime);
				} ifFalse: { dfltLifetimeType });

				CommLTTrait := commLTTraitFor((is: msg taggedAs: MsgCommunicationLifetime).ifTrue: {
					Util.getAnnotationOfType(msg, MsgCommunicationLifetime);
				} ifFalse: { dfltReplyType });
			};

			// perform trait composition and fill in the required message slot
			// to bind the traits to the message
			object: {
			  import ArityTrait;
			  import CommLTTrait;
			  import DiscLTTrait;
		  };
		};

		def arityTraitFor(annotation) {
		  // ARITY = ONE | ALL
			if: (annotation.isSubtypeOf(One)) then: {
				AmbientRefsModule.TOne;
			} else: {
				if: (annotation.isSubtypeOf(All)) then: {
					AmbientRefsModule.TAll;
				} else: {
				  raise: XIllegalAnnotation.new("Illegal arity annotation: " + annotation);
				}
			};
		};

		def commLTTraitFor(annotation) {
			// REPLY = DUE | ONEWAY | FUTURE
			if: (annotation.isSubtypeOf(Oneway)) then: {
				AmbientRefsModule.TOneway;
			} else: {
				if: (annotation.isSubtypeOf(DueT)) then: {
					AmbientRefsModule.makeTDue(annotation.timeout);
				} else: {
					if: (annotation.isSubtypeOf(Reply)) then: {
						AmbientRefsModule.TReply;
					} else: {
					  raise: XIllegalAnnotation.new("Illegal commLT annotation: " + annotation);				
					}
				}
			};
		};

		def discLTTraitFor(annotation) {
			// LIFETIME = INSTANT | TRANSIENT | SUSTAINABLE
			if: (annotation.isSubtypeOf(Instant)) then: {
				AmbientRefsModule.TInstant;
			} else: {
				if: (annotation.isSubtypeOf(TransientT)) then: {
					AmbientRefsModule.makeTTransient(annotation.period)
				} else: {
					if: (annotation.isSubtypeOf(Sustain)) then: {
						AmbientRefsModule.TSustain;
					} else: {
					  raise: XIllegalAnnotation.new("Illegal discLT annotation: " + annotation);				
					}
				}
			};
		};
		
	} // end anonymous module object
}; // end ARAnnotationModule