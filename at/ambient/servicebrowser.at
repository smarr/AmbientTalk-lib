/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * A small utility GUI to show services in the nearby environment
 *
 * @author tvcutsem
 */
def awt := jlobby.java.awt;
def Frame := awt.Frame;
def List := awt.List;

def Label := awt.Label;
def TextField := awt.TextField;
def GridLayout := awt.GridLayout;
//def BoxLayout := javax.swing.BoxLayout;

deftype ServiceDescription;

def makeServiceBrowser(DiscoveryProtocol) {
	// use whenever:discovered: etc. as provided by the DiscoveryProtocol
	def provider := "anonymous";
	
	def window := Frame.new("Service Browser of " + provider);
	def providedServices := List.new();
	def discoveredServices := List.new();
	def serviceDescriptionField := TextField.new(20);
	def providerField := TextField.new(20);
	providerField.setText(provider);
	
	serviceDescriptionField.addActionListener(object: {
		def actionPerformed(actionEvent) {
			// new text entered in the text field
			def description := serviceDescriptionField.getText;
			if: !(description == "") then: {
				def serviceDescr := isolate: { |provider,description|
					def toString() { description + " provided by " + provider };
					def ==(other) { description == other.description };
				};
				DiscoveryProtocol.export: serviceDescr as: ServiceDescription;
				providedServices.add(serviceDescr.toString);
			};
		};
	});
	providerField.addActionListener(object: {
		def actionPerformed(actionEvent) {
			// new text entered in the provider field
		  provider := providerField.getText;
		  window.setTitle("Service Browser of " + provider);
		};
	});
	
	// start COMPOSITION
	//def topToBottomLayout := BoxLayout(window, BoxLayout.Y_AXIS);
	window.setLayout(GridLayout.new(8,1));
	window.add(Label.new("Provider name: "));
	window.add(providerField);
	window.add(Label.new("Provided Services: "));
	window.add(providedServices);
	window.add(Label.new("Required Services: "));
	window.add(discoveredServices);
	window.add(Label.new("Provide new service: "));
	window.add(serviceDescriptionField);
	window.pack();
	window.setVisible(true);
	// end COMPOSITION
	
	DiscoveryProtocol.whenever: ServiceDescription discovered: { |sd|
	  discoveredServices.add(sd.toString)	
	};
	DiscoveryProtocol.whenever: ServiceDescription lost: { |sd|
		discoveredServices.remove(sd.toString)
	};
	
	window
};

def browser := makeServiceBrowser(/.at.ambient.deapspace);