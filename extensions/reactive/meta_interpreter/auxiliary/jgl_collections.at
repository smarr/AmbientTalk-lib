def Set		:= jlobby.com.objectspace.jgl.HashSet;
def Stack	:= jlobby.com.objectspace.jgl.Stack;

def makePriorityQueue := do: {
	def PQ 		:= jlobby.com.objectspace.jgl.PriorityQueue;
	def BP 		:= jlobby.com.objectspace.jgl.BinaryPredicate;
	
	def maker := PQ.&new;
	
	{ | predicate | 
		if: (is: predicate taggedAs: BP)
			then: { maker.cast(BP).run(predicate) }
			else: { 
				maker.cast(BP).run( 
				// This object implements the BinaryPredicate interface
				// which matches the PriorityQueue constructor expected
				// argument type.
					object: { 
						def execute(alreadySorted, newElement) { 
							predicate.run(alreadySorted, newElement) 
						} 
					} taggedAs: [BP]
				) 
			}
		
	}
};

def Set.each: clo {
	def theSetElements	:= self.elements();
		
	while: { theSetElements.hasMoreElements() }
	  do:  { clo.run(theSetElements.nextElement()) }
};

def makeInvocation(selector, args) {
	lobby.at.lang.values.createInvocation(selector, args, [])
};

self