/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2010
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
**/

/**
 * This file contains a small demo client application
 * to use in combination with the RFID service
**/


import /.at.lang.futures exclude minutes, seconds, millisec;
import /.at.support.timer;
import /.at.support.util;
enableFutures(true);

import /.at.collections.java.vector;
import /.at.collections.java.hashmap;

def DEBUG := true;
def INFO  := true;

deftype RFIDTag;
deftype Foo;
def createRFIDClient() {
	
	def debug(@args) {
		if: (DEBUG) then: {
			system.println("[DEBUG] " + args);
		};
	};
	
	def info(@args) {
		if: (INFO) then: {
			system.println("[INFO] " + args);
		};
	};
	
	def availableTags := HashMap.new;
	
	def lastTag := nil;
	
	def localFacade := object: {
		// local methods
		
		def testFarRef() {
			debug("testFarRef: ");
			if: (lastTag == nil) then: {
				debug("no last tag!");
			} else: {
				when: lastTag<-inc()@Due(seconds(30)) becomes: { |data|
					debug("inc gave: " + data);
				};
			};
		};
		
		def initLast(anIsolate) {
			lastTag := lastTag<-initialize(anIsolate);
		};
		
		def testInit() {
			def i := isolate: { 
				def ctr := 0 ;
				def inc(n := 1)@Mutator {
					ctr := ctr + n;
				};
			} taggedAs: [Foo];
			when: lastTag<-initialize(i) becomes: {|newObject|
				info("new object aquired: " + newObject);
			};
		};
		
		def getTag(serial) {
			availableTags.get(serial).clone();
		};
		
		def run() {
			
			whenever: Foo discovered: { |foo|
				debug("foo discovered: " + foo);
				lastTag := foo;
				whenever: foo disconnected: {
					debug("foo disconnected: " + foo);
				};
				whenever: foo reconnected: {
					debug("foo reconnected: " + foo);
				};
			};
			
			whenever: RFIDTag discovered: { |tag|
				when: tag<-getSerial() becomes: { |serial|
						lastTag := tag;
						if: (!(availableTags.contains(serial))) then: {
							debug("discovered: " + serial);
							availableTags.put(serial, tag);
                        	
							whenever: tag disconnected: {
								debug("tag disconnected: " + serial);
							};
							whenever: tag reconnected: {
								debug("tag reconnected: " + serial);
							};
							when: tag takenOffline: {
								debug("offline: " + serial);
								availableTags.remove(serial);
							};
						} else: {
							debug("ack: " + serial);
							// update far ref
							availableTags.put(serial, tag);
						};
					};
			};
		};
	};
	
	network.online();
	localFacade.run();
	localFacade;
};

def c := createRFIDClient();
c;