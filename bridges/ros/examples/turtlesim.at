import /.bridges.ros.rosbridge;
//import /.experimental.extensions.reactive.main;
import /.at.support.timer;

def _SECONDSVALUE := 1;

// Velocity object that cycles every second between linear 0..5, angular 0..5.
def velocityB := risolate: {
	def linear := (/.experimental.extensions.reactive.main.rfield: (_SECONDSVALUE % 5));		// XXX Why can't I refer to rfield:?
	def angular := (/.experimental.extensions.reactive.main.rfield: (_SECONDSVALUE % 5));
};

whenever: millisec(1000) elapsed: {
	_SECONDSVALUE := _SECONDSVALUE + 1;
	velocityB.linear := (_SECONDSVALUE % 5);	// XXX Assignment of rfield does not trigger reactive update???
	velocityB.angular := (_SECONDSVALUE % 5);
};

// turtlesim TEST

def bridge := makeRosbridge("localhost", 9090);


// TODO: atomic operations so that only an event is triggered when the atomic operations is complete.
// Example:
//atomic: {
//	velocity.linear := 4;
//	velocity.angular := 7;
//};


// Publish velocity behavior to turtle1.
publish(
	bridge,
	"/turtle1/command_velocity",
	"turtlesim/Velocity",
	velocityB);


// Subscribe behavior that every 2 seconds contains the pose of the turtle1
// TODO: fix json isolate equality!
def poseB := subscribeBehavior(
	bridge, 
	"/turtle1/pose", 
	2000, 
	isolate: { def x := 0; def y := 0; });	

def printPose(poseMsg) {
	system.println("The new pose of the turtle is: x: " + poseMsg.x + ", y: " + poseMsg.y);
};

printPose(poseB);