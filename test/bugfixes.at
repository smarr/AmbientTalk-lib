/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def BugFixTest := extend: /.at.unit.test.UnitTest.new("BugFixTest") with: {

  import /.at.lang.futures;
	enableFutures(false);

	// Tests whether the same async message can be sent multiple times.
	def testAsyncMultipleAsyncMessages() {
		def [f1, res1] := makeFuture();
		def o1 := object: {
			def m() { res1.resolve(1) };
		};
		def [f2, res2] := makeFuture();
		def o2 := object: {
			def m() { res2.resolve(2) };
		};
		def msg := <-m();
		o1 <+ msg;
		o2 <+ msg;
		when: (group: [ f1, f2 ]) becomes: { |values|
			self.assertEquals(1, values[1]);
			self.assertEquals(2, values[2]);
		};
	};
	
	// Tests whether using import in isolates still makes them pass-by-copy
	// and allows the imported methods to be invoked on the copied isolate
	def testAsyncIsolatesAndImports() {
		def i := isolate: {
			def m() { "foo" }
		};
		def j := isolate: { |i|
			import i;
		};
		def a := actor: {
			def accept(obj) { obj.m() }
		};
		when: a<-accept(j)@FutureMessage becomes: { |v|
			self.assertEquals("foo", v)
		}
	};
	
	// test following bug #49 in which the discovery actor failed
	// to access 'system' and 'lobby' slots in deserialized code
	def testAsyncDeserializationInDiscoveryActor() {
		def peer := actor: {
			def obj := object: { } taggedAs: [/.at.lang.types.Isolate] mirroredBy: (extend: defaultMirror with: {
				def x := 5;
			  def pass() {
				  /.at.support.util.uponArrivalBecome: { |x|
					  system; // ensure we can access system and the root
					  /.at;
					  x
					}
			  }
			} taggedAs: [/.at.lang.types.Isolate]);
			deftype DeserializationBugfixTest;
			export: obj as: DeserializationBugfixTest;
		};

		deftype DeserializationBugfixTest;
		future: { |reply|
			when: DeserializationBugfixTest discovered: { |o|
			  reply(o);
		  };
		};
	};
	
	// test whether invocation on a far ref fails with an illegal
	// operation exception
	def testAsyncInvocationOnFarRefFails() {
		(actor: {
			// ref is a far reference
			def get(ref) {
			  /.at.unit.test.UnitTest.assert: /.at.lang.types.IllegalOperation raisedIn: { ref.m() };
		  };
		})<-get(object: { def m() { 42 } })@FutureMessage;
	};
	
	// following bug report #50, test whether an object that is parameter-passed
	// by far reference twice receives the same globally unique ID such that two
	// far references to the same object can be properly compared for equality
	def testAsyncUniqueObjectExport() {
		def peer := actor: {
			def first;
			def receive1(x) { first := x; };
			def receive2(y) { first == y };
		};
		def o := object: { };
		peer<-receive1(o);
		when: peer<-receive2(o)@FutureMessage becomes: { |answer|
			self.assertTrue(answer);
		};
	};
	
	// tests whether fields and methods with the same name cannot
	// co-exist within the same object (bug #51)
	def testFieldMethodDuplicates() {
		self.assert: /.at.lang.types.DuplicateSlot raisedIn: {
			object: { def m; def m(); }
		}
	};

	def testAsyncSymbioticFutures() {
		def [testF,testR] := makeFuture();
		jlobby.test.SymbioticFuturesTest.test(object: {
			import /.at.support.timer;
			def access() {
				def [f,r] := makeFuture();
				when: seconds(3) elapsed: {
					r.resolve(1);
				};
				f;
			}
		}, object: {
			// this method is invoked when the SymbioticFuturesTest has the resolved
			// value for the future
			def run() {
				testR.resolve(`ok);
			}
		});
		testF;
	};
	
	def testAsyncFutureTypeSymbioticInvocations() {
		def [testF,testR] := makeFuture();
		jlobby.test.SymbioticFuturesTest.testFuture(object: {
			import /.at.support.timer;
			def accessFuture(x) {
				def [f,r] := makeFuture();
				when: seconds(3) elapsed: {
					r.resolve(x+1);
				};
				f;
			}
		}, object: {
			// this method is invoked when the SymbioticFuturesTest has the resolved
			// value for the future
			def run() {
				testR.resolve(`ok);
			}
		});
		testF;
	};
	
	// test whether futures work on unannotated messages when enabling them by default
	def testAsyncDefaultFutures() {
		def [f,r] := /.at.lang.futures.makeFuture();
		def a := actor: { |r|
			import /.at.lang.futures;
			enableFutures(true);
			
			def obj := object: { def m() { 5 } };
			when: obj<-m() becomes: { |x|
			  r<-resolve(x);
			};
		};
		f
	};
	
	// test whether a single message can be sent multiple times and that
	// each message send carries its own, independently resolvable future.
	def testAsyncFuturePerSend() {
		def msg := <-m()@FutureMessage;
		def rcvr := object: {
			def count := 0;
			def m() { count := count + 1 };
		};
		def sync1 := when: (rcvr <+ msg) becomes: { |val|
			self.assertEquals(1, val);
		};
		def sync2 := when: (rcvr <+ msg) becomes: { |val|
			self.assertEquals(2, val);
		};
		group: [sync1, sync2]
	};
	
	// Tests the new slot-based reflective interface defined on mirrors.
	def testSlotbasedReflection() {
		def o := object: {
			def x := 5;
			def y() { 6 };
			def sum(x,y) { x + y };
		};
		
		def m := (reflect: o);
		
		// [super, super:=, x, x:=, y, sum]
		self.assertEquals(6, m.listSlots.length);
		
		def xAccessor := m.grabSlot(`x);
		def xMutator := m.grabSlot(`x:=);
		
		def ctx := /.at.lang.values.createContext(o, o);
		
		// o.x == 5
		self.assertEquals(5, xAccessor.apply([],ctx));
		// o.x := 1
		self.assertEquals(1, xMutator.apply([1],ctx));
		// o.x == 1
		self.assertEquals(1, xAccessor.apply([],ctx));

		def [acc, mut] := /.at.lang.values.createFieldSlot(`foo, 7);
		// def o.foo() { 7 }		
		m.addSlot(acc);
		// [super, super:=, x, x:=, y, sum, foo]
		self.assertEquals(7, m.listSlots.length);
		
		def fooAccessor := m.grabSlot(`foo);
		// o.foo == 7
		self.assertEquals(7, o.foo);
		
		// def o.foo:=(v) { foo := v }
		m.addSlot(mut);
		o.foo := 10;
		// o.foo == 10
		self.assertEquals(10, o.foo);
		
		// o.foo := 8
		m.invoke(o, /.at.lang.values.createInvocation(`foo:=, [8], []));
		// o.foo == 8
		self.assertEquals(8, o.foo);
	};
	
	// Tests the new slot-based reflective interface on mirrors of mirages.
	def testSlotbasedReflectionOnMirages() {
		def o := object: {
			def x := 5;
			def y() { 6 };
			def sum(x,y) { x + y };
		} mirroredBy: (extend: defaultMirror with: {
			
			// automatically removes super/super:= from the list
			def listSlots() {
				def slots := super^listSlots();
				slots.filter: { |slot| !((slot.name == `super).or: { slot.name == `super:= }) };
			};
			
		});
		
		def m := (reflect: o);
		
		// [x, x:=, y, sum]
		self.assertEquals(4, m.listSlots.length);
		
		def xAccessor := m.grabSlot(`x);
		def xMutator := m.grabSlot(`x:=);
		
		def ctx := /.at.lang.values.createContext(o, o);
		
		// o.x == 5
		self.assertEquals(5, xAccessor.apply([],ctx));
		// o.x := 1
		self.assertEquals(1, xMutator.apply([1],ctx));
		// o.x == 1
		self.assertEquals(1, xAccessor.apply([],ctx));

		def [acc, mut] := /.at.lang.values.createFieldSlot(`foo, 7);
		// def o.foo() { 7 }		
		m.addSlot(acc);
		// [x, x:=, y, sum, foo]
		self.assertEquals(5, m.listSlots.length);
		
		def fooAccessor := m.grabSlot(`foo);
		// o.foo == 7
		self.assertEquals(7, o.foo);
		
		// def o.foo:=(v) { foo := v }
		m.addSlot(mut);
		o.foo := 10;
		// o.foo == 10
		self.assertEquals(10, o.foo);
		
		// o.foo := 8
		m.invoke(o, /.at.lang.values.createInvocation(`foo:=, [8], []));
		// o.foo == 8
		self.assertEquals(8, o.foo);
	};
	
	// Tests whether one can add and remove slots to an object dynamically.
	def testSlotRemoval() {
		def o := object: { def x := 1; def m() { x } };

		self.assertEquals(1, o.x);
		self.assertEquals(1, o.m);
		self.assertEquals(1, (reflect: o).removeSlot(`x));
		
		// test that x is no longer present
		self.assert: /.at.lang.types.SelectorNotFound raisedIn: { o.x };
		// even when accessed from within a method
		self.assert: /.at.lang.types.UndefinedSlot raisedIn: { o.m };

		def [acc,mut] := /.at.lang.values.createFieldSlot(`x, 5);
		(reflect: o).addSlot(acc);

		self.assertEquals(5, o.m);

		(reflect: o).addSlot(mut);
		o.x := 6;
		self.assertEquals(6, o.m);
		(reflect: o).removeSlot(`x);

		(reflect: o).addSlot(acc);
		(reflect: o).removeSlot(`x:=);
		self.assertEquals(6, o.m);
	};
	
	// tests whether the functor: construct defined in init.at works
	def testFunctor() {
		def f := functor: { def x := 1; def run(y) { x + y } };
		self.assertEquals(6, f(5));
	};
	
	def testDiamondImport() {
		def A := object: {
			def a() { "A" };
			def d() { "D" };
		};
		def B := object: {
			import A;
			def b() { "B" };
		};
		def C := object: {
			import A;
			def c() { "C" };
		};
		def D := object: {
			import B alias d := e;
			import C alias d := e;
		};
		self.assertEquals("A", D.a());
		self.assertEquals("B", D.b());
		self.assertEquals("C", D.c());
		self.assertEquals("D", D.e());
		self.assertFalse((reflect: D).respondsTo(`d));
	};
	
	def testConflicts() {
		def A1 := object: {
			def a() { "A1" };
		};
		def A2 := object: {
			def a() { "A2" };
		};
		def B := object: {
			import A1;
			def b() { "B" };
		};
		def C := object: {
			import A2;
			def c() { "C" };
		};
		self.assert: /.at.lang.types.ImportConflict raisedIn: {
			def D := object: {
				import B;
				import C; // A2's a conflicts with A1's a
			}
		};
	};
	
	// test whether methods tagged as @Required are not included in the composite
	def testRequiredMethodsAreFiltered() {
		def T := object: {
			def m() { self.n() };
			def n() @[/.at.lang.types.Required];
		};
		def o := object: {
			import T;
		};
		self.assertFalse((reflect: o).respondsTo(`n));
		
		def o2 := object: {
			import T;
			def n() { 42 };
		};
		self.assertEquals(42, o2.m());
	};
	
	def testMirageMirroredByIntrospectiveMirror() {
		def nativeObj := object: { };
		def newMirage := object: { def m() { 42 } } mirroredBy: (reflect: nativeObj);
		self.assertEquals(42, newMirage.m());
	};
	
	// test whether serve() is only invoked once per 'remote' async send
	def testAsyncServeOncePerRemoteAsyncMessage() {
		def a := actor: {
			def count := 0;
			def m() { };
			def getCount() { count };
			def actor := reflectOnActor();
			actor.becomeMirroredBy: (extend: actor with: {
				def serve(@args) {
					count := count + 1;
					super^serve(@args);
				}
			});
		};

		a<-m();
		when: a<-getCount()@FutureMessage becomes: { |cnt|
			// cnt = 2, 1 for init(), 1 for m()
			self.assertEquals(2, cnt);
		};
	};
	
	def testAsyncExplicitScheduling() {
		def [fut,res] := makeFuture(seconds(5));
		def a := <-m(1);
		def rcvr := object: {
			def m(i) { res.resolve(`ok) }
		};
		reflectOnActor().schedule(rcvr, a);
	  fut
	};
	
	def testAsyncHandlerTriggerConcurrencyBug() {
		def [fut,res] := makeFuture(seconds(6));
		deftype testAsyncHandlerTriggerConcurrencyBug;
		
		def actor := reflectOnActor();
		actor.becomeMirroredBy: (extend: actor with: {});
		
		def ref; // we need to keep a reference to the remote ref until its
		         // when:disconnected: listener triggered, otherwise the ref
		         // may simply be garbage collected and its when:disconnected:
		         // listener will never be triggered!
		         // alternatively, we could have stored a ref to the subscription
		         // of the when:disconnected: listener
		when: testAsyncHandlerTriggerConcurrencyBug discovered: { |r|
			system.println("[TEST] discovered: " + r);
			ref := r;
			when: r disconnected: {
				system.println("[TEST] disconnected: " + r);
				
				// if this when:disconnected: listener successfully triggers,
				// the test is successful
				res.resolve(`ok);
			}
		};
		
		def makeServerActor() {
			actor: { |testAsyncHandlerTriggerConcurrencyBug|
				import /.at.support.timer;

				def go() {
					def o := object: { };
					export: o as: testAsyncHandlerTriggerConcurrencyBug;
					system.println("[TEST] exported: " + o);
					
					when: seconds(3) elapsed: {						
						disconnect: o; // to trigger a disconnect
						system.println("[TEST] o taken offline");
					}
				}
			}	
		};
		
		makeServerActor()<-go();
		
	  fut
	};
	
	// test order in outbox of (local) far references is kept after reconnection and when using retract.
	def testAsyncRetract() {
		def [fut,res] := makeFuture();
		def [mfut,mres] := /.at.lang.multifutures.makeMultiFuture(2);
		def makeServerActor(res) {
			actor: { |res |
					def foo(){res.resolve(24)}; 
					def bar(){res.resolve(42)};
			};
		};
		def refToServer := makeServerActor(mres);
		def s := disconnect: refToServer;
		def send2Msgs() {
		  refToServer<-foo();
		  refToServer<-bar();
		};
		
		send2Msgs();
		// retract and check order of messages.
		def outbox := retract: refToServer;
		self.assertEquals(2, outbox.length);
		self.assertEquals(`foo, (outbox[1]).selector);
		self.assertEquals(`bar, (outbox[2]).selector);
		s.reconnect();
		
		send2Msgs();
		// check that order when flushing is kept.
		res.resolve( /.at.lang.multifutures.whenAll: mfut resolved: { |tbl|
		system.println("hallo");
			self.assertEquals(24, tbl[1]);
		    self.assertEquals(42, tbl[2]);
		});
		fut;
	};
	
	// test whether exception stack traces are serialized across actors
	def testAsyncSerializedStackTrace() {
	  def [fut,res] := makeFuture();
	  def o := object: {
	    def m() { raise: /.at.lang.exceptions.XIllegalOperation.new("test"); }
	  };
	  def a := actor: { |o,res|
	    import /.at.lang.futures;
	    def run() {
	      when: o<-m()@FutureMessage becomes: { |val|
	        res<-ruin("expected exception"); 
	      } catch: /.at.lang.types.IllegalOperation using: { |e|
	        if: (is: e.stackTrace taggedAs: /.at.lang.types.Text) then: {
	          res<-resolve("ok");
	        } else: {
	          res<-ruin(/.at.lang.exceptions.XIllegalOperation.new("incompatible stack trace:"+e.stackTrace));
	        }
	      }
	    }
	  };
	  a<-run();
	  fut;
	};
	
	// test whether a "local" object that cannot be parameter-passed
    // can't escape as return value from a remote message send
    def testAsyncLocalObjectRefAsReturnValue(){
	  def [fut,res] := makeFuture();
	  def localObj := object: { def foo(){5} } mirroredBy: ( mirror:{
	    def pass() {
		  super^pass();
		  raise: /.at.lang.exceptions.XIllegalOperation.new(
		           "Cannot expose reference to local object"); 
		};
	  });	
	  def remoteInterface := object: {
	    def returnLocalObject(){ localObj };
	  };
	  def a := actor: { |res, remoteInterface|
	    import /.at.lang.futures;
		when: remoteInterface<-returnLocalObject()@FutureMessage becomes: { | val|
		  res<-ruin("unexpected resolved future");
		} catch: /.at.lang.types.IOProblem using: { |e| 
		  res<-resolve("ok");
		};	
	  };
	  fut;
	};
	
	// originally (1.to: n do: block) was defined so that
    // the upper bound was exclusive. It is now inclusive (AT 2.24)
	def testToDo() {
	  def sum := 0;
	  1.to: 3 do: { |i| sum := sum + i; };
	  self.assertEquals(6, sum);
	  
	  sum := 0;
	  1.to: 1 do: { |i| sum := sum + i; };
	  self.assertEquals(1, sum);
	  
	  sum := 0;
	  3.downTo: 1 do: { |i| sum := sum + i; };
	  self.assertEquals(6, sum);
	  
	  sum := 0;
	  2.to: 1 do: { |i| sum := sum + i; };
	  self.assertEquals(0, sum);
	  
	  sum := 0;
	  1.downTo: 2 do: { |i| sum := sum + i; };
	  self.assertEquals(0, sum);
	};

};

self