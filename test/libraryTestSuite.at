/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Authors: Ambient Group at SOFT
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
def LibraryTestSuiteModule := object: {

 /*
  * Unit test suite that tests the entire AmbientTalk/2 library.
  */
  def StandardTestSuite := /.at.unit.test.TestSuite.new("atlib testsuite", [
    /.at.collections.vector.VectorTest(),
    /.at.collections.list.ListTest(),
    /.at.collections.queue.queueTest(),
		/.bridges.crime.CrimeConnection.CrimeTest(),
    /.demo.instantmessenger.InstantMessenger.InstantMessengerTest(),
    /.demo.mobiTunes.MobiTunesTest(),
    /.demo.metaprogramming,
    /.at.lang.futures.FuturesTest(),
    /.at.lang.multifutures.MultiFuturesTest(),
    /.at.lang.ambientrefs_old.AmbientRefsTest(),
    /.at.lang.structuraltypes.StructuralTypeTest(),
    /.at.lang.traits.TraitsTest(),
    /.at.lang.dynvars.DynVarTest(),
    /.at.lang.multivalues.MultivalueTest(),
		/.at.lang.leasedrefs.LeasedRefsTest(),
		/.at.lang.oomatching.OOMatchModuleTest,
    /.at.support.timer.TimerTest(),
    /.at.support.util.UtilTest(),
    /.at.lang.totam.TotamTest(),
    /.test.bugfixes.BugFixTest(),
    /.test.disconnectTest.DisconnectTest(),
		/.test.tutorial.tutorialTestSuite,
	  // TODO: integrate BOTH ambient ref unit tests with the test suite
  	// /.at.lang.ambientrefs(/.at.discovery.ar_extensional_impl).AmbientRefsTest,
  	/.at.lang.ambientrefs(/.at.discovery.ar_intensional_impl).AmbientRefsTest,
    /.bridges.m2mi.api.M2MITest,
    /.at.discovery.discovery.DiscoveryModuleTest,
    /.at.discovery.templatediscovery.TemplateDiscoveryModuleTest,
    /.at.discovery.composition.DiscoveryCompositionModuleTest,
    /.at.lang.ref_adaptors.AdaptorModuleTest,
    /.demo.locationtracker.LocationTrackerTest,
    /.test.serialization.SerializationTest(),
    // /.at.discovery.deapspace.DEAPspaceProtocolTest,	
	/.test.collections.java.main.JavaCollectionsTestSuite
	]);

  def testATDistribution() {
    // first perform a self-test to see if unit tests work
    /.at.unit.test.selfTest()<-ifTrue: {
	    // then perform the standard unit test suite
	    StandardTestSuite.runTest();
    };
  };
  
};