/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * unit test for the basic programming tutorial chapter
 * @author tvcutsem
 * @author egonzale
 */
extend: /.at.unit.test.UnitTest.new("OOProgTutorial") with: {

		def testPoint(){
		  // Object,fields and methods
		  def Point := object: { 
		    def x := 0;
		    def y := 0;
		    def init(aX,aY) {
		      x := aX;
		      y := aY;
		    };
		    def sumOfSquares() { x*x + y*y };
		  };
		  
		  // Sending messages
		  self.assertEquals(Point.x,0);
		  self.assertEquals(Point.sumOfSquares(),0);
		  
		  // Cloning and instantiation
		  def anotherPoint := Point.new(2,3);
		  self.assertEquals(anotherPoint.x,2);
		  self.assertEquals(Point.x,0);
		  anotherPoint.x := 3;
		  self.assertEquals(Point.x,0);
		  
		  // Delegation and Cloning
		  def clonedPoint := clone: Point;
		  self.assertEquals(clonedPoint.x,0);
		  clonedPoint.x := 2;
		  self.assertEquals(Point.x,0);
		  def Point3D := extend: Point with: {
		    def z := 0;
		    def sumOfSquares() {
		      super^sumOfSquares() + z*z;
		    };
		  };
		  self.assertEquals(Point3D.sumOfSquares(),0);
		  
		  // Delegation and Dynamic Inheritance
		  def openConnection := object: {
		    def send(msg) { nil };
		  };
		  def closedConnection := object: {
		    def send(msg) { nil };
		  };
		  def connection := object: {
		    def init() {
		      super := closedConnection;
		    };
		    def open() {
		      super := openConnection;
		    };
		    def close() {
		      super := closedConnection;
		    };
		  };
		  
		  // First-class Delegation
		  def Enumerable := object: {
		    def collect: closure {
		      def c := self.new();
		      self.each: { |v|
		        //c.add(closure(v));
		        closure(v);
		      };
		      c;
		    };
		  };
		  def Array := object: {
		    def elements := [];
		    def add(v) { elements := elements + [v]; self };
		    def collect: closure {
		      Enumerable^collect: closure;
		    };
		    def each: clo {
		      1.to: elements.length + 1 do: { |i|
		        //clo(elements[i]);
		        elements[i] := clo(elements[i]);
		      };
		    };
		  };
		  
		  Array.add(1).add(2).add(3);
		  def c := Array.collect: { |v| v+1 };
		  self.assertEquals("[2, 3, 4]", print: c.elements);
		  
		  def anotherPoint3D := extend: Point with: {
		    def z := 0;
		    def init(aX, aY, aZ) {
		      super^init(aX, aY);
		      z := aZ;
		    };
		  };
		  
		  // Encapsulation
		  def makeBankAccount(balance) {
		    object: {
		      def deposit(amnt) {
		        balance := balance + amnt;
		        "ok";
		      };
		    };
		  };
		  self.assert: /.at.lang.types.SelectorNotFound raisedIn: {
	        makeBankAccount(100).balance;
	      };
		  
		};

};