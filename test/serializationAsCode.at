/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

def AsCodeTest := extend: /.at.unit.test.UnitTest.new("AsCodeTest") with: {
	
	import /.at.lang.types;
	
	// helper methods
	
	def fromCode: code in: scope {
		eval: (read: code) in: scope;
	};
	
	def fromCode: code {
		eval: (read: code) in: {};
	};

	def fromCodeAsCode(o) {
		def s := asCode: o;
		fromCode: s in: {};
	};
	
	// tests
	
	def testNativeDataTypes() {
		self.assertEquals(fromCodeAsCode(nil), nil);
		self.assertTrue(fromCodeAsCode(true));
		self.assertFalse(fromCodeAsCode(false));
		self.assertEquals(fromCodeAsCode(42), 42);
		self.assertEquals(fromCodeAsCode("text"), "text");
		self.assertEquals(fromCodeAsCode([1,2,3][2]), 2);

		self.assertEquals(fromCodeAsCode(system), system);
		self.assertEquals(fromCodeAsCode(network), network);
	};

	def f(a,b) { a + b };
	
	def testFunctions() {
		self.assertEquals(fromCodeAsCode(&f)(1,2), 3);
		self.assertEquals(fromCodeAsCode({ 42 })(), 42);
		def c := { |a,b| a + b };
		self.assertEquals(fromCodeAsCode(c)(1,2), c(1,2));
	};
	
	def testObjectsSimple() {
		def o := object: {
			def field := 42;
			def ofield1 := object: { def field := 42 };
			def f() { ofield1 };
		};

		def do := fromCodeAsCode(o);
		self.assertEquals(do.field, 42);
		self.assertEquals(do.ofield1.field, 42);
		self.assertEquals(do.f().field, 42);
	};
	
	def testObjectScopeSimple() {
		def o1 := object: {
			def id := 43;
		};

		def o2 := object: {
			def x := o1;
			def y := o1;
			def t := [o1];
		};

		def do := fromCodeAsCode(o2);

		self.assertEquals(do.x.id, o1.id);
		self.assertEquals(do.x, do.y);
		self.assertEquals(do.x, do.t[1]);
	};
	
	def testObjectScope() {
		def o1 := object: {
			def id := 43;
		};
		
		def o2 := isolate: {
			def field := o1;
		};

		def o3 := object: {
			def field := o1;
		};

		def o4 := object: {
			def a := o2;
			def o := object: {
				def b := o2;
				def p := object: {
					def c := o2;
					def d := o3;
				};
				def e := o3;
			};
			def f := o3;
		};

		def do := fromCodeAsCode(o4);

		self.assertTrue((is: do.a taggedAs: Isolate));
		self.assertEquals(do.a.field.id, 43);
		self.assertEquals(do.a, do.o.b);
		self.assertEquals(do.f, do.o.p.d);
	};
	
	def testMirrors() {
		
		def so := object: {
			def id := 43;
		};
		
		def makeMirror(theBase) {
			extend: defaultMirror.new(theBase) with: {
				def a := 44;
				def getBase() { theBase };
				def b := so;
			};
		};

		def aMirror := mirror: {
			def c := 45;
			def getBase() { self.base };
			def d := so;
		};
		
		def o1 := object: {
			def id := 43;
		};

		def o2 := object: {
			def e := so;
		} mirroredBy: {|b| makeMirror(b)};

		def o3 := object: {
			def f := so;
		} mirroredBy: aMirror;

		def o4 := object: {
			def a := o2;
			def b := o3;
		};

		def do2 := fromCodeAsCode(o2);
		def do3 := fromCodeAsCode(o3);
		def do4 := fromCodeAsCode(o4);

		self.assertEquals(do2.e, (reflect: do2).b);
		self.assertEquals(do2, (reflect: do2).getBase());
		self.assertEquals(do3.f, (reflect: do3).d);
		self.assertEquals(do3, (reflect: do3).getBase());
		self.assertEquals((reflect: do4.a).a, (reflect: do4.b).c - 1);
		self.assertEquals((reflect: do4.a).b, (reflect: do4.b).d);
	};
	
	def testMessages() {
		def m1 := <-foo(5);

		def o1 := object: {
			def a := m1;
			def b := m1;
			def c := <-foo(5);
			def test1() { a == b };
			def test2() { a == c };
		};

		def do := fromCodeAsCode(o1);

		self.assertTrue(do.test1());
		self.assertFalse(do.test2());
	};
	
	def testNameSpaces() {
		self.assertEquals(/.at.lang, fromCodeAsCode(/.at.lang));
	};
	
	def testQuoting() {
		self.assertEquals(fromCodeAsCode(`foo), `foo);

		self.assertEquals(fromCodeAsCode({`foo})(), `foo);
		self.assertEquals(fromCodeAsCode(`[foo, 2])[1], `foo);
		self.assertEquals(fromCodeAsCode(`[foo, 2])[2], 2);
	};
	
	def testAnnotations() {
		deftype Bla;
		deftype Foo;
		self.assertEquals(fromCodeAsCode(Bla), Bla);
		
		def o := object: {
			def c := .boe(42)@[Bla, Foo];
			def g(a)@Bla {
				42;
			};
		};
				
		def do := fromCodeAsCode(o);
		def r := reflect: do;
		def mg := r.grabSlot(`g);
		def dcas := tagsOf: do.c;
		
		self.assertTrue(dcas.contains(Bla));
		self.assertTrue(dcas.contains(Foo));
		self.assertTrue(mg.annotations().contains(Bla));
	};
	
	def testJavaSymbiosis() {
		def v := jlobby.java.util.Vector;
		self.assertEquals(v, fromCodeAsCode(v));
		
		def constr := v.&new;
		self.assertEquals(constr, fromCodeAsCode(constr));
		
		def jpath := jlobby.java.lang;
		self.assertEquals(jpath, fromCodeAsCode(jpath));
		
		self.assertEquals(jlobby, fromCodeAsCode(jlobby));
	};
	
	def testReflection() {
		
		def serializationMirror := mirror: {
			def asCode() {
				"42";
			};
		};
		def o := object: { def n := 42 } mirroredBy: serializationMirror;
		self.assertEquals((asCode: o), "42");
	};
	

};

AsCodeTest.runTest();