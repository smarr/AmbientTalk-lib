/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Dries Harnie & Christophe Scholliers
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
 /* This mirror is supposed to sit in front of a collection that implements a given protocol
  * and forward any messages it understands. Synchronous access is not allowed.
  */
import /.at.lang.exceptions;

deftype DispatchingMirrorMarker;

def makeDispatchingMirror(base, group, protocol) { 
	extend: defaultMirror.new(base) with: {
		def invoke(delegate, invocation) {
			if: (protocol.includes(invocation.selector).and: { !(self.respondsTo( invocation.selector ))}) then: {
				raise: XIllegalOperation.new("Synchronous invocation " + invocation.selector  + " on an object "+ base + ","+ self.listMethods +"," +self.listSlots  +" mirrored by a DispatchingMirror");
			} else: {
				super^invoke(delegate, invocation);
			}
		};
	
		def receive(msg) {
			system.println("receive: " + msg + " prot: " + protocol.selectors);
			if: (protocol.includes(msg.selector)) then: {
					group().each: {|object| 
						system.println("sending to "+ base.selected.to_array);
						object<+msg;
					}
				} else: {
					super^receive(msg);
				}
		}
	}
};

def DispatchingMirrorModule := object: {
	def makeDispatchingMirror := &makeDispatchingMirror;
};