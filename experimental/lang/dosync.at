/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2010
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
**/


import /.at.lang.futures;
enableFutures(true);

def rootSync := object: {
	def dosync(script) {
		script(self);
	};
};

def syncObject: block {
	extend: rootSync() with: block;
};

def on: object dosync: block with: table {
		//def newBlockStatements := script: block carrying: table;
		def newBlock := script: block carrying: table;
		//block := eval: newBlockStatements in: block.context.lexicalScope;
		object<-dosync(newBlock);
};

def on: object dosync: block {
	 on: object dosync: block with: [];
};


def DoSyncModule := object: {
		
	def DoSyncTest := extend: /.at.unit.test.UnitTest.new("DoSync", false) with: {
	
		def stack := syncObject: {
			def vector := /.at.collections.vector.Vector.new();
			def pop() {
				vector.pop();
			};
			def push(element){
				system.println(element);
				vector.add(element);
			};
		};	
	
		def testAsyncDosync() {
			def [fut,res] := makeFuture();
			def resolve() {
					res.resolve(`ok);
			};
			def a := actor: { |stack, res| 
				import /.at.support.dosync;
				def fut := on: stack dosync: { |stack|
					stack.push(1);
					stack.push(2);
				};
				when: fut becomes: { |resloved|			
					res<-resolve(`ok);
				};	
			};
			fut;
		};
	};
};


self;