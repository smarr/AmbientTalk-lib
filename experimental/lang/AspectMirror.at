/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Dries Harnie & Christophe Scholliers
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
 /* Aspect mirrors for ambient contracts, as written in the CEDI2010 paper. 
    This mirror enables remote aspect deployment. */

deftype Service;
def filterMirror := /.at.lang.filterMirror;
def XSelectorNotFound := /.at.lang.exceptions.XSelectorNotFound;
def witnessSet := /.experimental.collections.witnessSet;
def vector := /.at.collections.vector.Vector;

import /.at.support.util;
import /.at.lang.futures;
enableFutures(false);
deftype ContractMetaMessage;

deftype Modifiable;
deftype Public;
deftype Private;
def theResolvedFuture := future: {|resolve| resolve(nil) };

def ExclusiveMethodAnnotation(conflicts,Type) {
	extend: Type with: { 
		def annotateMethod(method) {
			def index := method.annotations().find: {|a| conflicts.contains(a); };
			if: (nil != index) then: {
				raise: jlobby.edu.vub.at.exceptions.XIllegalOperation.new("Conflicting type found: " +method.annotations()[index]+ " for type "+ Type );
			};	
			method;		
		};
	} taggedAs: [/.at.lang.types.Isolate, /.at.lang.types.TypeTag, Type];
};

def AspectMirrorModule := object: {
	def Private := ExclusiveMethodAnnotation([Public,Modifiable],Private);
	def Public  := ExclusiveMethodAnnotation([Private,Modifiable],Public);
	def Modifiable := ExclusiveMethodAnnotation([Private,Public],Modifiable);
	def ContractMetaMessage := ContractMetaMessage;
	

	def makeAspectMirror(base) { 
		extend: defaultMirror.new(base) with: {
			def aspectBeforeSet := witnessSet.new();
			def aspectAfterSet  := witnessSet.new();
			def messages := vector.new();
			def censoring := false;
			def contracts := witnessSet.new();
			
			def afterCallBack(joinpoint, advice, caller) {
			 	install(joinpoint, advice, caller, [Public, Modifiable], aspectAfterSet); 
			};
			
			def afterCall(methodName, advice, caller) {
				install(joinpoint, advice, caller, [Modifiable], aspectAfterSet); 
			}; 
			
			def beforeCallBack(joinpoint, advice, caller) {
			 	install(joinpoint, advice, caller, [Public, Modifiable], aspectBeforeSet); 
			};
			
			def beforeCall(methodName, advice, caller) {
				install(joinpoint, advice, caller, [Modifiable], aspectBeforeSet); 
			}; 
				
			def install(joinpoint, advice, caller, types, set) {
				def mirror := self;
				def aspect := object: { 
				
					def executeJoinPoint(invocation, extra) {
						if: joinpoint(invocation.selector.text,invocation.arguments) then: {
								extra[1] := invocation.selector.text;
								extra[2] := invocation.arguments;
								advice<-notify(@extra)@FutureMessage;
						} else: {
								theResolvedFuture;
						};
					};
				
					def apply(@arguments) {
						def delegate   := arguments[1];
						def invocation := arguments[2];
						def isMethod := (nil != mirror.listMethods.find: { |m| m.name == invocation.selector });
						if: isMethod then: {							
							def method := mirror.grabMethod(invocation.selector);
							if: (nil != method.annotations().find: {|a| types.contains(a); }) then: {
								executeJoinPoint(invocation, arguments);
							} else: {
								theResolvedFuture;
							};
						} else: { 
							if: isMutator(invocation.selector) then: {
								system.println("mutator ");
								
								executeJoinPoint(invocation, arguments);
							} else: { theResolvedFuture }; 
						};
					};
				};
				set.addRebind(aspect,caller);
				system.println("Installed aspect on " + base + " ("+aspectBeforeSet.size+"/"+aspectAfterSet.size+")");
			};
			
			def joinContract(c) {
				contracts.addRebind(c,c);
				base.enteredContract(c);
				censoring := true;
			};
			
			def leaveContract(c) {
				contracts.remove(c);
				censoring := contracts.notEmpty();
			};
			
			def invokeField(slf, sel) { self.invoke(slf, `(.#sel())) };
			
			def invoke(delegate, invocation) {
			   	system.println("invoke Message... "+ invocation.selector);
			   
			   	def cancel := object: {
			   		def cancel() { system.println("halp! cancel called!"); };
			   	};
				aspectBeforeSet.each: { |aspect| aspect.apply(delegate,invocation, cancel); };			
				def return := super^invoke(delegate, invocation);
				aspectAfterSet.each: { |aspect|	aspect.apply(delegate, invocation, cancel, return, messages); };
				return;
			};
			
			// TODO If one of the aspects returns a future, the method is not invoked until the future is resolved (potentially never!). Fix with @Due :)
			def invoke_async(delegate, invocation) {
				def cancel := object: {
					def sendTheMessages := true;
			   		def cancel() { system.println("*** halp! cancel called!"); sendTheMessages := false; };
			   	};
				def futures := ([theResolvedFuture] + aspectBeforeSet.map: { |aspect| aspect.apply(delegate, invocation, cancel); });
				when: (group: futures) becomes: { |Idc| 	
					def return := super^invoke(delegate, invocation);
					def futures := [theResolvedFuture] + aspectAfterSet.map: { |aspect| aspect.apply(delegate, invocation, cancel, return, messages) };
					when: (group: futures) becomes: { |Idc|
						if: cancel.sendTheMessages then: {
							messages.each: { |m| m[1] <+ m[2] };
						};
						messages.clear();
						return;
					};
				};
			};
	
			//default behaviour to intercept meta-level messages.
			def metaIntercept(msg) {
				// have to go meta-meta because we need to know whether the
				// *mirror* itself can respond to the selector
				if: ((reflect: self).respondsTo(msg.selector)) then: {
					self <+ msg; // process meta-message myself
				} else: {
					system.println("Meta fuuuuuucccccckkkkkk ... ");
					super.receive(msg);//TODO ERROR !!!
				}
			};
			
			def send(rcv, msg) {
				if: censoring then: {
					messages.add([rcv,msg]);
				} else: {
					super^send(rcv, msg);
				};
			};
			
			def censorMessages() {
				system.println("*** Censoring message " + messages);
				def messages2 := messages.map: { |m| [ jlobby.edu.vub.at.actors.natives.Packet.new(m[1]), m[2] ] };
				system.println("messages2: " + messages2.asTable());
				def futures := group: contracts.map: {|c| c<-canExecute(messages2.asTable(), base)@[ContractMetaMessage,FutureMessage]};
				when: futures becomes: { |answers|
					system.println("*** Got answers: " + answers);
					if: (answers.contains(true)) then: {
						messages.each: { |m| super^send(m[1],m[2]) };
					} else: {
						system.println("*** Blocked messages:" + messages);
					}
				};
				messages.clear();
			};
			
			def receive(msg) {
				system.println("Receive Message... ");
				if: (is: msg taggedAs: ContractMetaMessage) then: {	
					system.println("Meta Message... ");
					self.metaIntercept(msg); 
			  } else: {
			  		system.println("Base Message... ");
			  		
				  	super^receive(extend: msg with: {
				  		def process(receiver) {
				  			// If the message was tagged with FutureMessage, we need to pipeline the future to the future returned by invoke_async.
					  		def result := (reflect: receiver).invoke_async(receiver, self);
					  		if: (reflect: msg).respondsTo(`future) then: {
						  		self.future<-resolveWithValue(result)@[/.at.lang.firstclassrefs.MetaMessage,
		      						 								   /.at.lang.futures.OneWayMessage,
		      													 	   /.at.support.tracer.TraceResolved(self.futureId, receiver, msg)];
	      					};
	      					result
	      				}
      				} taggedAs: (tagsOf: msg) );
			  }
			};
		};	
	};
	
	
	def service: block taggedAs: tags {
		object: block taggedAs: tags + [Service] mirroredBy: { |base| makeAspectMirror(base) };
	};
	
	def service: block {
		service: block taggedAs: [];
	};
	
	def advice: block { 
		object:{
			def notify(@arguments) {
				block.apply(arguments);
			};
		};
	};
	
	def on: obj before: script CallBack: advice {
		obj<-beforeCallBack(
			script: script, 
			advice: advice, 
			advice)@[ContractMetaMessage];
	};
	
	
};

def TestModule := object: {
	import AspectMirrorModule;
	
	def run() {
		def Television :=  service: {
			def location := "Living Room";	
			//Annotate
			def setPause()@[Public] {
				system.println("Set pause");
				42;
			}
		};
				
		export: Television as: Service;
			 
			 
		def jos := actor: {
			deftype ContractMetaMessage;
			import /.at.lang.futures;
			enableFutures(false);
			def publication;
				
			def advice := object:{
				def notify(methodName,arguments) {
					system.println("notified");
				};
			};
			
			def reconnect() {
				publication.reconnect();
			};
			
			when: Service discovered: { |s|
				when: s<-beforeCallBack( script:{|methodName,arguments| methodName~="set.*" },advice,advice)@[ContractMetaMessage,FutureMessage] becomes: { |f|
					when: Television<-setPause()@FutureMessage becomes: { |x|
						system.println("Die antwoord: " + x);
						publication := disconnect: advice;
					};
				};
			};
		}; 
	}
};


//TestModule.run();

AspectMirrorModule;