/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * Isolates that keep everybody that has a copy of them
 * up to date with their changes.
 *
 * @author alombide, cfscholl, egonzale
 */


deftype SyncIsolate;
def HashMap := jlobby.java.util.HashMap;
def Vector := jlobby.java.util.Vector;


def makeSyncIsolateMirror() {
	mirror: { 
		def id := /.at.support.timer.now().toString();
		def notifiers := [];
	
		def pass() {
			copyIsolateWithMirror(self.base, makeFrozenIsolateMirror(id));
		};
	
		def addChangeListener(notifier) {
			// Register change listener to the isolate
			notifiers := notifiers + [ notifier ];
		};
	
		def removeChangeListener(notifier) {
			notifiers := notifiers.filter: { |el|
				el != notifier;
			};
		};
		
		def defineField(name, value) {
			def theBase := self.base;
			def makeNotifyingField(nam, val) {
			   object: {
			     def new(newHost) { self }; // singleton pattern
			     def name := nam;
			     def readField() { val };
			     def writeField(newVal) { 
					val := newVal; 
					notifiers.each: { |notifier| notifier.notifyChanged(theBase) };
					val;
				};
				 def accessor() { readField };
				 def mutator() { writeField }
			   } taggedAs: [ /.at.types.Field ];
			 };
			 self.addField(makeNotifyingField(name, value));
			nil;
		};
	};
};


def makeFrozenIsolateMirror(id) {	
	extend: defaultMirror with: {
		deftype IllegalOperation;
		def XIllegalOperation := lobby.at.exceptions.createException(IllegalOperation);
		
		def getId() { id };
		
		def addSlot(slot) { 
			raise: XIllegalOperation.new("Cannot add slots to a sealed object."); 
		};
		def removeSlot(selector){
			raise: XIllegalOperation.new("Cannot remove slots from a sealed object."); 
		};
		def defineField(name, value) {
			def theBase := self.base;
			def makeFrozenField(nam, val) {
			   object: {
			     def new(newHost) { self }; // singleton pattern
			     def name := nam;
			     def readField() { val };
			     def writeField(newVal) { 
					raise: XIllegalOperation.new("Cannot change slots of a sealed object.");
				 };
				 def accessor() { readField };
				 def mutator() { writeField }
			   } taggedAs: [ /.at.types.Field, /.at.types.Isolate ];
			 };
			 self.addField(makeFrozenField(name, value));
			nil;
		};
	} taggedAs: [ /.at.types.Isolate ];
};

def copyIsolateWithMirror(iso, mirror) {
	def result := object: { } taggedAs: [ /.at.types.Isolate ] mirroredBy: mirror;
	def fields := (reflect: iso).listFields();
	fields.each: { |field| 
	   if: !(field.name ==`super) then: {
	   	(reflect: result).defineField(field.name, field.readField); 
	   };
	};
	def methods := (reflect: iso).listMethods();
	methods.each: { |method|
		(reflect: result).addMethod(method);
	};
	result;
};



// Receiver

def typesAndObservers := HashMap.new();
def subscribersAndNotifiers := HashMap.new();
def discoveredIsolates := Vector.new();

whenever: SyncIsolate discovered: { |syncIso|
	discoveredIsolates.add(syncIso);
	def isolateUpdater := object: {
		def update(newIsoValue) {
			syncIso.setIsolate(newIsoValue);
		};
	};
	syncIso.getNotifier<-addUpdater(isolateUpdater);
	def handlers := typesAndObservers.get(syncIso.getType());
	if: (nil != handlers) then: {
		handlers.each: { |subscriber|
			subscriber.notifyDiscovered(syncIso.getIsolate());
			syncIso.getNotifier()<-addSubscriber(subscriber);
			subscribersAndNotifiers.put(subscriber, syncIso.getNotifier());
		};
	};
	when: syncIso.getNotifier() disconnected: {
		discoveredIsolates.remove(syncIso);
		def handlers := typesAndObservers.get(syncIso.getType());
		if: (nil != handlers) then: {
			handlers.each: { |subscriber|
				subscriber.notifyDisconnected(syncIso.getIsolate());
			};
		};
	};
	when: syncIso.getNotifier() reconnected: {
		discoveredIsolates.add(syncIso);
		def handlers := typesAndObservers.get(syncIso.getType());
		if: (nil != handlers) then: {
			handlers.each: { |subscriber|
				subscriber.notifyReconnected(syncIso.getIsolate());
			};
		};
	};
};


def SyncIsolateModule := object: {
	def SyncIsolate := SyncIsolate;
	
	def syncIsolate: isoCode {
		object: isoCode taggedAs: [ /.at.types.Isolate ] mirroredBy: makeSyncIsolateMirror();
	};

	def publish: iso as: type {
		def notifier := object: {
			def subscribers := [];
			def updaters := [];

			def cancel(subscriber) {
				subscribers := subscribers.filter: { |el|
					!(el == subscriber);
				};
				nil;
			};

			def notifyChanged(newIso) {
				updaters.each: { |updater| updater<-update(newIso) };
				subscribers.each: { |sub| sub<-notifyChanged(newIso) };
			};
			

			def addSubscriber(subscriber) {
				subscribers := subscribers + [ subscriber ];
				nil;
			};
			
			def addUpdater(updater) {
				updaters := updaters + [ updater ];
				nil;
			};
		};
		def wrappedIsolate := isolate: { |iso, notifier, type|
			def theIsolate := iso;
			def getIsolate() { theIsolate };
			def setIsolate(newIso) { theIsolate := newIso };
			def getNotifier() { notifier };
			def getType() { type }
		};
		(reflect: iso).addChangeListener(notifier);
		def subs := export: wrappedIsolate as: SyncIsolate;
		object: {
			def disconnectNotifier() {
				disconnect: notifier;
			};
			def cancel() {
				subs.cancel();
				notifier.subscribers := [];
				notifier.updaters := [];
				(reflect: iso).removeChangeListener(notifier);
			};
		};
	};
	
	// Subscriber should understand:
	// - notifyDiscovered(obj)
	// - notifyDisconnected(obj)
	// - notifyReconnected(obj)
	// - notifyChanged(obj)
	def subscribe: subscriber to: type {
		def oldSubscribers := typesAndObservers.get(type);
		if: (nil == oldSubscribers) then: {
			typesAndObservers.put(type, [ subscriber ]);
		} else: {
			typesAndObservers.put(type, oldSubscribers + [ subscriber ]);
		};
		def iterator := discoveredIsolates.iterator();
		while: { iterator.hasNext() } do: {
			def syncIso := iterator.next();
			if: (type == syncIso.getType()) then: {
				subscriber.notifyDiscovered(syncIso.getIsolate());
			} 
		};
		object: {
			def cancel() {
				def subscribers := typesAndObservers.get(type).filter: { |el|
					!(subscriber == el)
				};
				typesAndObservers.put(type, subscribers);
				def notifier := subscribersAndNotifiers.get(subscriber);
				subscribersAndNotifiers.remove(subscriber);
				notifier<-cancel(subscriber)@/.at.lang.futures.FutureMessage;
			}; 
		};
	};
	
	// Tests
	def SyncIsolateTest() {
	    extend: /.at.unit.test.UnitTest.new("synchronized isolates test", false) with: {
		
			def publishingActor;

			def setUp() {
			  publishingActor := actor: {
				import /.experimental.lang.syncIsolates;
				def iso1 := syncIsolate: { 
					def field := "iso1";
					def setField(x) {
						field := x;
					}; 
				};
				def iso2 := syncIsolate: { 
					def field := "iso2";
					def setField(x) {
						field := x;
					};
				};
				def iso3 := syncIsolate: { 
					def field := "iso3";
					def setField(x) {
						field := x;
					};
				 };
				
				def changeIso1() {
					iso1.field := "changed iso1";
				};
				def changeIso2() {
					iso2.field := "changed iso2";
				};
				def changeIso3() {
					iso3.field := "changed iso3";
				};
				
				def invokeChangeIso1() {
					iso1.setField("invoked iso1");
				};
				def invokeChangeIso2() {
					iso2.setField("invoked iso2");
				};
				def invokeChangeIso3() {
					iso3.setField("invoked iso3");
				};
				
				deftype testType1;
				deftype testType2;
				
				def canceller1 := nil;
				def canceller2 := nil;
				def canceller3 := nil;
				
				def publishIso1() {
					canceller1 := publish: iso1 as: testType1;
				};
				def publishIso2() {
					canceller2 := publish: iso2 as: testType1;
				};
				def publishIso3() {
					canceller3 := publish: iso3 as: testType2;
				};
				
				def cancelIso1Publication() {
					canceller1.cancel();
				};
				def cancelIso2Publication() {
					canceller2.cancel();
				};
				def cancelIso3Publication() {
					canceller3.cancel();
				};
				
				def disconnection1 := nil;
				def disconnection2 := nil;
				def disconnection3 := nil;
				
				def disconnect() {
					disconnection1 := canceller1.disconnectNotifier();
					disconnection2 := canceller2.disconnectNotifier();
					disconnection3 := canceller3.disconnectNotifier();
				};
				def reconnect() {
					disconnection1.reconnect();
					disconnection2.reconnect();
					disconnection3.reconnect();
				};
			  };
			};

			def testSyncIsolate() {
				def changed := false;
				def syncIso := syncIsolate: {
					def foo := 1;
				};
				def theTestModule := self;
				def listener := object: {
					def notifyChanged(newIso) {
						changed := true;
						theTestModule.assertEquals(5, newIso.foo);
					};
				};
				(reflect: syncIso).addChangeListener(listener);	
				syncIso.foo := 5;
				self.assertTrue(changed);
				self.assertEquals(5, syncIso.foo);	
			};
			
			def testSyncIsolate2() {
				def changed := false;
				def syncIso := syncIsolate: {
					def foo := 1;
					def bar() {
						foo := 5;
					};
				};
				def theTestModule := self;
				def listener := object: {
					def notifyChanged(newIso) {
						changed := true;
						theTestModule.assertEquals(5, newIso.foo);
					};
				};
				(reflect: syncIso).addChangeListener(listener);	
				syncIso.bar();
				self.assertTrue(changed);
				self.assertEquals(5, syncIso.foo);	
			};
			
			def testAsyncNotifications() {
				def notifyDiscovered := nil;
				def notifyDisconnected := nil;
				def notifyReconnected := nil;
				def notifyChanged := nil;
				
				def subscriber := object: {
					def notifyDiscovered(iso) {
						notifyDiscovered := iso;
					};
					def notifyDisconnected(iso) {
						notifyDisconnected := iso;
					};
					def notifyReconnected(iso) {
						notifyReconnected := iso;
					};
					def notifyChanged(iso) {
						notifyChanged := iso;
					};
				};
				
				deftype testType1;
				deftype testType2;
				def canceller := subscribe: subscriber to: testType1;
				
				def timer := /.at.support.timer;
				
				publishingActor<-publishIso1();
				timer.when: timer.seconds(5) elapsedWithFuture: {
					self.assertEquals(notifyDiscovered.field, "iso1");
					
					publishingActor<-publishIso2();
					timer.when: timer.seconds(5) elapsedWithFuture: {
						self.assertEquals(notifyDiscovered.field, "iso2");
						
						publishingActor<-publishIso3();
						timer.when: timer.seconds(5) elapsedWithFuture: {
							self.assertEquals(notifyDiscovered.field, "iso2"); // not discovered, different type tag
							
							publishingActor<-changeIso1();
							timer.when: timer.seconds(5) elapsedWithFuture: {
								self.assertEquals(notifyChanged.field, "changed iso1");
								
								publishingActor<-changeIso2();
								timer.when: timer.seconds(5) elapsedWithFuture: {
									self.assertEquals(notifyChanged.field, "changed iso2");
									
									publishingActor<-changeIso3();
									timer.when: timer.seconds(5) elapsedWithFuture: {
										self.assertEquals(notifyChanged.field, "changed iso2"); // not notified
										
										publishingActor<-invokeChangeIso1();
										timer.when: timer.seconds(5) elapsedWithFuture: {
											self.assertEquals(notifyChanged.field, "invoked iso1");
											
											publishingActor<-invokeChangeIso2();
											timer.when: timer.seconds(5) elapsedWithFuture: {
												self.assertEquals(notifyChanged.field, "invoked iso2");
												
												publishingActor<-invokeChangeIso3();
												timer.when: timer.seconds(5) elapsedWithFuture: {
													self.assertEquals(notifyChanged.field, "invoked iso2"); // not notified
													
													self.assertTrue(nil == notifyDisconnected);
													publishingActor<-disconnect();
													timer.when: timer.seconds(5) elapsedWithFuture: {
														self.assertTrue((notifyDisconnected.field == "iso1").or: { notifyDisconnected.field == "iso2" }, "Did not detect disconnection!");
														
														/*publishingActor<-changeIso1();
														timer.when: timer.seconds(5) elapsedWithFuture: {
															self.assertEquals(notifyChanged.field, "invoked iso1"); // not notified, actor offline*/
															
															self.assertTrue(nil == notifyReconnected);
															publishingActor<-reconnect();
															timer.when: timer.seconds(5) elapsedWithFuture: {
																self.assertTrue((notifyReconnected.field == "iso1").or: { notifyReconnected.field == "iso2" }, "Did not detect reconnection!");				
																												
																publishingActor<-changeIso1();
																timer.when: timer.seconds(5) elapsedWithFuture: {
																	self.assertEquals(notifyChanged.field, "changed iso1");

																	publishingActor<-changeIso2();
																	timer.when: timer.seconds(5) elapsedWithFuture: {
																		self.assertEquals(notifyChanged.field, "changed iso2");
																		
																		publishingActor<-changeIso3();
																		timer.when: timer.seconds(5) elapsedWithFuture: {
																			self.assertEquals(notifyChanged.field, "changed iso2"); // not notified
																			
																			publishingActor<-cancelIso1Publication();
																			timer.when: timer.seconds(5) elapsedWithFuture: {
																				publishingActor<-changeIso1();
																				timer.when: timer.seconds(5) elapsedWithFuture: {
																					self.assertEquals(notifyChanged.field, "changed iso2"); // not notified, cancelled publication
																					
																					canceller.cancel();
																					timer.when: timer.seconds(5) elapsedWithFuture: {
																						publishingActor<-invokeChangeIso2();
																						timer.when: timer.seconds(5) elapsedWithFuture: {
																							self.assertEquals(notifyChanged.field, "changed iso2");	// not notified, cancelled subscription
																						//};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		
		};
	};
};

