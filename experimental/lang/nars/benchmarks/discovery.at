/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
**/

import /.experimental.lang.nars.networkAwareReferences;
import /.at.support.timer;


def print(prefix, @args) {
	system.println("[" + prefix + "] " + (args.map: {|e| (print: e)}).join(" ; "));
};

def printPing(prefix) {
  print("ping " + prefix, jlobby.java.lang.System.currentTimeMillis().toString());
};


deftype NARTest;

def NETW := Bluetooth;


def receiver := object: {
  
  def receiverObject := object: {
    def ping(n) {
      printPing(n);
    };
  };
  
  def identify() {
    print("role", "receiver");
  };
  
  def init() {
    identify();
    export: receiverObject as: NARTest;
  };
  
  def start() {
    print("action", "going online", jlobby.java.lang.System.currentTimeMillis().toString());
    NETW.online();
  };
  
  def stop() {
    print("action", "stop");
  };
  
  
};


def MESSAGE_DELAY := millisec(100); //seconds(1); //millisec(100);

def setMessageDelay(newD) {
  MESSAGE_DELAY := newD;
};

def sender := object: {
  
  def ctr := 0;
  def handler;
  def stopB := false;
  
  def sendPing(nar) {
    nar<-ping(ctr);
    ctr := ctr + 1;
  };
  
  def identify() {
    print("role", "sender");
  };
  
  def stopSending() {
    stopB := true;
    handler.cancel();
  };
  
  def init() {
    NETW.online();
    identify();
    when: NARTest discovered: { |nar|
      handler := whenever: MESSAGE_DELAY elapsed: {
        if: !stopB then: {
          sendPing(nar);
        };
      };
    };
  };
  
  def start() {
    print("action", "start");
  };
  def stop() {
    print("action", "stop");
    stopSending();
  };
  
};




def DELAY := seconds(5);
def STOP_DELAY := seconds(30);

def run(role) {
  
  role.init();
  
  when: DELAY elapsed: {
    role.start();
    when: STOP_DELAY elapsed: {
      role.stop();
    };
  };
  
};

self;