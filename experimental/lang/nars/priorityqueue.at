/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2011
 * Author: Kevin Pinte
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
**/

/**
 * This file defines a priority queue
 *
**/
 
import /.at.collections.java.vector;
 
def defaultSorter := { |x, y|
	if: (x > y) then: {
 		1;
 	} else: {
 		if: (x < y) then: {
 			-1;
 		} else: {
 			0;
 		};
 	};
 };
 
def PriorityQueue := object: {
 
 	def queue;
 	def priorityClosure;
 	
 	def each: clo {
 		queue.each: clo;
 	};
 
 	def enqueue(el) {
 	  // don't process duplicates
 	  if: (!queue.contains(el)) then: {
 		  { |return|
 		  	def ctr := 0;
 		  	queue.each: { |c|
 		  		def priority := priorityClosure(el, c);
 		  		if: (priority > 0) then: {
 		  			queue.add_at(ctr, el);
 		  			return(ctr);
 		  		};
 		  		ctr := ctr + 1;
 		  	};
 		  	queue.add(el);
 		  }.escape();
 		};
 	};
 	
 	def dequeue() {
 		queue.remove_at(0);
 	};
 	
 	def remove(el) {
 		queue.remove(el);
 	};
 	
 	def contains(el) {
 	  queue.vc.contains(el);
 	};
 	
 	def first() {
 		queue.first();
 	};
 	
 	def isEmpty() {
 		queue.isEmpty();
 	};
 	
 	def notEmpty() {
 		!queue.isEmpty();
 	};
 	
 	def clear() {
 		queue.clear()
 	};
 	
 	def toTable() {
		queue.toTable();
	};
	
	def size() {
	  queue.size();
	};
 	
 	
 	// clone and init
 	def clone() {
 		def newQ := PriorityQueue.new(self.priorityClosure);
 		newQ.queue := self.queue.clone();
 		newQ;
 	};
 	
 	def init(priorityf := defaultSorter) {
 		queue := Vector.new;
 		priorityClosure := priorityf;
 	};
 
 
 };
 
 self;