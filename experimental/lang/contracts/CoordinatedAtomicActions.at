/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Christophe Scholliers & Dries Harnie
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
/* Coordinated Atomic Actions, as written in the journal paper. 
   This example consists of two services:
 	One service is a "kind service" and will not send out messages to untrusted objects.
	The second service is an "evil service" as it sends out a message to a leaking object.
	The contract will detect the outgoing messages and stop the message.
	Both services will be reverted upon failure.
*/

import /.experimental.lang.contracts.contracts;
network.online;



def otherActor :=  actor: {
	import /.experimental.lang.contracts.contracts;
	network.online;
	
	def LeakObject := object: {
		def leak() {
			system.println("Leaking Messages... ");	
		};
	};
	
	
	def MyAtomicActionParticipantKind := service: {
		def RollBack()@[Public] {
			system.println("Kind Service Reverted");	
		};
		
		def startAtomicAction()@[Public] {
			system.println("Atomic Action Started");
		};
	
		def endAtomicAction()@[Public] {
			system.println("Atomic Action Ended");	
		};
	
		def doActions()@[Public] {
			system.println("I am a kind service ...");
		};
	};
	
	export: MyAtomicActionParticipantKind as: protocolOf: MyAtomicActionParticipantKind;

	def MyAtomicActionParticipant := service: {
		def RollBack()@[Public] {
			system.println("Evil Service Reverted");	
		};
		
		def startAtomicAction()@[Public] {
			system.println("Atomic Action Started");
		};
	
		def endAtomicAction()@[Public] {
			system.println("Atomic Action Ended");	
		};
	
		def doActions()@[Public] {
			system.println("I am an evil service ...");
			LeakObject<-leak();
		};
	};
	
	export: MyAtomicActionParticipant as: protocolOf: MyAtomicActionParticipant;
};


def AtomicActionParticipantRole := role: {
	def startAtomicAction();
	def endAtomicAction();
	def doActions();
	def RollBack();
};


def makeCAA(numberOfParticiants, Role) { 
	contract: {
		def participants := Frail: exactly(numberOfParticiants, Role);
		
		invariant: {
			onCallBack: ".*" pre: { |methodName, args, cancel, caller|		
			} post: { |methodName, args, cancel, sentMessages, return|		
				//we know that the good service will not send any messages	
				if: ( sentMessages.length > 0 ) then: {
					cancel<-cancel();
				};
			};
		} on: participants;  
		
		initialise: {
			participants<-startAtomicAction();
			participants<-doActions();
		};
		
		fail: {
			participants<-RollBack();
			system.println("The contract was violated !! ");
		};
		
	}; 
};


def contractCAA := makeCAA(2, AtomicActionParticipantRole);
contractCAA.start();
