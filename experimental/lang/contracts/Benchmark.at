/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2010
 * Authors: Dries Harnie & Christophe Scholliers
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
 /* Benchmarking script for ambient contracts. Look at the bottom for instructions on how to run! */

import /.experimental.lang.contracts.contracts;

// Number of iterations the test actor should perform before returning
def numReceiverLoop := 50;

def testActor := actor: { |numReceiverLoop|
	import /.experimental.lang.contracts.contracts;
	def srv := service: {
		
		def message(num) {
			def x := 0;
			while: {x < numReceiverLoop } do: {
				x := x + 1;
			};
			num
		};
	};
	network.online();
	export: srv as: protocolOf: srv;
};

def normalTestActor := actor: {
	import /.experimental.lang.contracts.contracts;
	import /.at.support.timer exclude seconds, minutes, millisec;

	def startTime;
	
	def test(numMessages) {
		def Participant := role: {
			def message();
		};
		
		def c := contract: {
			def participant := Frail: one(Participant);
		};
		
		c.start();
		
		def [fut, res] := /.at.lang.futures.makeFuture();
		
		
		when: seconds(5) elapsed: {
			system.println("Sending " + numMessages + " messages WITHOUT an invariant");
			startTime := jlobby.java.lang.System.currentTimeMillis();
			def num := numMessages - 1;
			1.to: numMessages do: { |x|
				when: c.participant<-message(x)@FutureMessage becomes: { |idc|
					num := num - 1;
					if: (num == 0) then: {
						c.stop();
						system.println("Total end");
						def time :=  jlobby.java.lang.System.currentTimeMillis();
						system.println("Time for <"+numMessages+"> :: " + (time.intValue - startTime.intValue));
						res.resolve(nil);
					}
				};
			};
		};
	
		fut
	}
};



def invTestActor := actor: { 
	import /.experimental.lang.contracts.contracts;
	import /.at.support.timer exclude seconds, minutes, millisec;

	def startTime;
	
	def test(numMessages) {
		def Participant := role: {
			def message();
		};
		
		def c := contract: {
			def participant := Frail: one(Participant);
			
			invariant: {
				onCallBack: `message pre: { |methodName, args, cancel,caller|
					if: (args[1] < 200) then: {
						cancel<-cancel();
					};
				} post: { |methodName, args, cancel, sentMessages, return|
					if: (return != args[1]) then: {
						system.println("Return value does not match argument");
						cancel<-cancel();
					};
				};
			} on: participant;
		};
		
		c.start();
		
		def num := numMessages - 1;
		
		
		def [fut, res] := /.at.lang.futures.makeFuture();
		
		when: seconds(5) elapsed: {
			system.println("Sending " + numMessages + " messages WITH an invariant");
			startTime := jlobby.java.lang.System.currentTimeMillis();
			1.to: numMessages do: { |x|
				when: c.participant<-message(x)@FutureMessage becomes: { |idc|
					num := num - 1;
					if: (num == 0) then: {
						c.stop();
						system.println("Total end");
						def time :=  jlobby.java.lang.System.currentTimeMillis();
						system.println("Time for <"+numMessages+"> :: " + (time.intValue - startTime.intValue));
						res.resolve(nil);
					}
				};
			};
		};
		
		fut
	}
};

enableFutures(false);
def sendNext(tab,actor,i) {
	if: (i <= tab.length) then: {
		when: actor<-test(tab[i])@FutureMessage becomes: {|IDC|
			system.println("currently at " + tab[i] + " -> " + tab);
				sendNext( tab, actor, i+1);
		};
	};
};

def inputs := [10,10,10,10,10,10,10,10,10,10,
               20,20,20,20,20,20,20,20,20,20,
               30,30,30,30,30,30,30,30,30,30,
               40,40,40,40,40,40,40,40,40,40,
               50,50,50,50,50,50,50,50,50,50,
               60,60,60,60,60,60,60,60,60,60,
               70,70,70,70,70,70,70,70,70,70,
               80,80,80,80,80,80,80,80,80,80,
               90,90,90,90,90,90,90,90,90,90,
               100,100,100,100,100,100,100,100,100,100];
  
// *** Uncomment ONE of these lines and run this script. ***
// sendNext(inputs, normalTestActor, 1);
 sendNext(inputs, invTestActor, 1);