import /.experimental.collections.java.vector;
import /.experimental.collections.java.hashset;
import ~.util;


def TableTestModule := object: {


	def TableTest := extend: /.at.unit.test.UnitTest.new("TableTest") with: {
	
		def [a, b, c] := [nil, nil, nil];
		
		def setUp() {
			def vt[3] { HashSet.new() };
			[a, b, c] := vt;
		};
		
		def tearDown() {
			[a, b, c].each: { |v| v.clear() };
		};
		
		def testPlus() {
			a.addAll([1,2,3]);
			b.addAll([4,5,6]);
			def sum := a + b;
			self.assertEquals(sum.size(), 6);
			self.assertEquals(a.size(), 3);
			self.assertEquals(b.size(), 3);
		};
	
		def testEach() {
			a.addAll([1,2,3,4,5]);
			def sum := 0;
			def ctr := 0;
			a.each: { |e|
				sum := sum + e;
				ctr := ctr + 1;
			};
			self.assertEquals(ctr, 5);
			self.assertEquals(sum, 15);
		};
		
		def testFilter() {
			a.addAll([1,2,3,4,5,6,7,8,9]);
			def r := a.filter: { |e|
				(e % 2) == 0;
			};
			self.assertEquals(r.size(), 4);
			self.assertEquals(a.size(), 9);
			self.assertTrue(r.contains(2));
			self.assertTrue(r.contains(4));
			self.assertTrue(r.contains(6));
			self.assertTrue(r.contains(8));
			self.assertFalse(r.contains(1));
			self.assertFalse(r.contains(3));
			self.assertFalse(r.contains(5));
			self.assertFalse(r.contains(7));
			self.assertFalse(r.contains(9));
		};
		
		def testInjectInto() {
			a.addAll([1,2,3,4,5]);
			def r := a.inject: 42 into: { |acc, n| acc + n };
			self.assertEquals(r, 42 + 15);
		};
		
		def testLength() {
			a.addAll([1,2,3,4,5]);
			self.assertEquals(a.length(), 5);
			self.assertEquals(a.length(), a.size());
		};
		
		def testMap() {
			a.addAll([1,2,3,4,5]);
			def r := a.map: { |e| e + 1 };
			a.each: {|e|
				self.assertTrue(r.contains(e+1));
			};
		};
			
	
	};
	
	def TableListTest := extend: /.at.unit.test.UnitTest.new("TableListTest") with: {
	
		def [a, b] := [nil, nil];
		
		def setUp() {
			def vt[2] { Vector.new() };
			[a, b] := vt;
		};
		
		def tearDown() {
			[a, b].each: { |v| v.clear() };
		};
		
		def testAt() {
			a.addAll([5,6,7,8,9]);
			self.assertEquals(a.at(3), 8);
			self.assertEquals(a[2], 7);
		};
		
		def testAtPut() {
			a.addAll([5,6,7,8,9]);
			def r := a.atPut(2, 42);
			self.assertEquals(r, 42);
			self.assertEquals(a.at(2), 42);
			a[3] := 43;
			self.assertEquals(a[3], 43);
		};
		
		def testEachWithIndex() {
			a.addAll([5,6,7,8,9]);
			def at := a.toTable();
			def cat := [];
			def it := [];
			a.eachWithIndex: { |e,i|
				cat := cat + [e];
				it := it + [i];
			};
			self.assertTrue(sameElementsInOrder(at, cat));
			self.assertTrue(sameElementsInOrder(it, [0,1,2,3,4]));
		};
		
		def testFind() {
			a.addAll([5,6,42,8,9]);
			self.assertEquals(a.find: { |e| e == 42 }, 2);
		};
		
		def testImplode() {
			a.addAll(["b", "o", "o", "b", "i", "e", "s"]);
			def ttn := a.implode();
			self.assertEquals(ttn, "boobies");
		};
		
		def testJoin() {
			a.addAll(["b", "o", "o", "b", "i", "e", "s"]);
			self.assertEquals(a.join("-"), "b-o-o-b-i-e-s");
		};
			
		def testSelect() {
			a.addAll([9,8,7,6,5,4,3,2,1]);
			def suba := a.select(1,8);
			self.assertTrue(sameElementsInOrder(suba.toTable(), [8,7,6,5,4,3,2]));
		};
		
	
	};

};

TableTestModule;