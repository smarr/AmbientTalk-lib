import /.experimental.collections.java.hashmap;
import ~.traits.util;


def HashMapTestModule := object: {


	def HashMapTest := extend: /.at.unit.test.UnitTest.new("HashMapTest") with: {
	
		def [a, b, c] := [nil, nil, nil];
		
		def setUp() {
			def vt[3] { HashMap.new() };
			[a, b, c] := vt;
		};
		
		def tearDown() {
			[a, b, c].each: { |v| v.clear() };
		};
		
		def testAtPut() {
			def r := a.atPut("ftytwo", 42);
			self.assertEquals(r, 42);
			a["ftythree"] := 43;
			self.assertTrue(a.containsKey("ftytwo"));
			self.assertTrue(a.containsKey("ftythree"));
			self.assertTrue(a.containsValue(42));
			self.assertTrue(a.containsValue(43));
			self.assertEquals(a["ftytwo"], 42);
		};
		
		def testAt() {
			def r := a.atPut("ftytwo", 42);
			self.assertEquals(a.at("ftytwo"), 42);
			self.assertEquals(a["ftytwo"], 42);
		};
		
		def testEach() {
			def kt := [];
			def vt := [];
			def st := [];
			[1,2,3,4,5,6,7,8,9].each: { |n|
				a[n] := 10-n;
			};
			a.each: { |k, v|
				kt := kt + [k];
				vt := vt + [v];
				st := st + [k+v];
			};
			self.assertTrue(sameElements(kt, [1,2,3,4,5,6,7,8,9]));
			self.assertTrue(sameElements(vt, [1,2,3,4,5,6,7,8,9]));
			def cst[9] { 10 };
			self.assertTrue(sameElements(st, cst));
		};
		
		def testEachKey() {
			def kt := [];
			[1,2,3,4,5,6,7,8,9].each: { |n|
				a[n] := 10-n;
			};
			a.eachKey: { |k|
				kt := kt + [k];
			};
			self.assertTrue(sameElements(kt, [1,2,3,4,5,6,7,8,9]));
		};
		
		def testToTable() {
			def t := [[1,2], [3,4], [5,6]];
			a.putAll(t);
			def rt := a.toTable();
			self.assertEquals(rt.length(), 3);
			self.assertTrue(sameElementsInOrder([2,2,2], rt.map: { |e| e.length() }));
		};
		
	
	};

};

HashMapTestModule;