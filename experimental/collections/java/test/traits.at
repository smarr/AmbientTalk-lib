import /.experimental.collections.java.vector;
import /.experimental.collections.java.hashset;
import /.experimental.collections.java.hashmap;
import /.experimental.collections.java.linkedlist;

def TraitsTestModule := object: {

	// helpers
	def sameElementsInOrder(t1, t2) {
		{ |return|
			def i := 1;
			t1.each: { |e|
				if: !(e == t2[i]) then: {
					return(false);
				};
				i := i + 1;
			};
			return(true);
		}.escape();
	};
	
	def sameElements(t1, t2) {
		{ |return|
			def foundMatch := false;
			def keep;
			t1.each: { |e1|
				foundMatch := false;
				t2 := t2.filter: { |e2|
					// filter out first occurence
					if: (e1 == e2) then: {
						// found match
						if: foundMatch then: {
							// not first occurence
							true;
						} else: {
							foundMatch := true;
							false;
						};
					} else: {
						true;
					};
				};
				if: !foundMatch then: { return(false) };
			};
			return(t2.isEmpty());
		}.escape();
	};

	def CollectionTest := extend: /.at.unit.test.UnitTest.new("CollectionTest") with: {
	
		def [a, b, c, d, e] := [nil, nil, nil, nil, nil];
		
		def setUp() {
			def vt[5] { Vector.new() };
			[a, b, c, d, e] := vt;
		};
		
		def tearDown() {
			[a, b, c, d, e].each: { |v| v.clear() };
		};
			
		def testAdd() {
			self.assertTrue(a.add(1));
			self.assertEquals(a.size(), 1);
		};
		
		def testAddAll() {
			self.assertTrue(a.addAll([1,2,3,4,5]));
			self.assertEquals(a.size(), 5);
		};
		
		def testClear() {
			a := Vector.new([1,2,3,4,5]);
			a.clear();
			self.assertEquals(a.size(), 0);
		};
		
		def testContains() {
			self.assertFalse(a.contains(42));
			a.addAll([41,42,43]);
			self.assertTrue(a.contains(42));
		};
		
		def testContainsAll() {
			b.addAll([2,4,6]);
			a.addAll([7,6,5,4,3]);
			self.assertFalse(a.containsAll(b));
			a.add(2);
			self.assertTrue(a.containsAll(b));
		};
		
		def testEquals() {
			self.assertTrue(a.equals(a));
			self.assertFalse(a.equals(b));
		};
		
		def testIsEmpty() {
			self.assertTrue(a.isEmpty());
			a.add(42);
			self.assertFalse(a.isEmpty());
		};
		
		def testIterator() {
			a.addAll(["a", "b", "c"]);
			def it := a.iterator();
			it.next();
			self.assertEquals(it.next(), "b");
		};
		
		def testRemove() {
			a.addAll([1,2,3,4,5,6]);
			self.assertTrue(a.remove(3));
			self.assertEquals(a.size(), 5);
			self.assertFalse(a.remove(3));
			self.assertEquals(a.size(), 5);
		};
		
		def testRemoveAll() {
			b.addAll([2,4,6,8,42]);
			a.addAll([9,8,7,6,5,4,3,2,1]);
			self.assertTrue(a.removeAll(b));
			self.assertEquals(a.size(), 5);
			c.addAll([42,43,44]);
			self.assertFalse(a.removeAll(c));
		};
		
		def testRetainAll() {
			b.addAll([8,6,4,2,42]);
			a.addAll([1,2,3,4,5,6,7,8,9]);
			self.assertTrue(a.retainAll(b));
			self.assertEquals(a.size(), 4);
			self.assertFalse(a.retainAll(b));
		};
		
		def testToTable() {
			def t := [1,2,3,4,5,6];
			a.addAll(t);
			self.assertTrue(sameElementsInOrder(a.toTable(), t));
		};
		
		
	};
	
	def ListTest := extend: /.at.unit.test.UnitTest.new("ListTest") with: {
	
		def [a, b, c, d, e] := [nil, nil, nil, nil, nil];
		
		def setUp() {
			def vt[5] { LinkedList.new() };
			[a, b, c, d, e] := vt;
		};
		
		def tearDown() {
			[a, b, c, d, e].each: { |v| v.clear() };
		};
			
		def testGet() {
			a.addAll([42,43,44]);
			self.assertEquals(a.get(1), 43);
		};
		
		def testSet() {
			a.addAll([42,43,44]);
			self.assertEquals(a.set(1, 69), 43);
			self.assertEquals(a.get(1), 69);
			self.assertEquals(a.size(), 3);
		};
		
		def testAddAt() {
			a.addAll([2,3,4]);
			a.addAt(1, 42);
			self.assertEquals(a.get(1), 42);
			self.assertEquals(a.size(), 4);
		};
		
		def testRemoveAt() {
			a.addAll([42,43,44,45]);
			self.assertEquals(a.removeAt(2), 44);
			self.assertEquals(a.size(), 3);
		};
		
		def testIndexOf() {
			a.addAll([2,3,42,4,5,42,6,7]);
			self.assertEquals(a.indexOf(42), 2);
		};
		
		def testLastIndexOf() {
			a.addAll([2,3,42,4,5,42,6,7]);
			self.assertEquals(a.lastIndexOf(42), 5);
		};
		
		def testListIterator() {
			a.addAll(["a", "b", "c", "d", "e"]);
			def lit := a.listIterator();
			lit.next();
			lit.next();
			self.assertEquals(lit.next(), "c");
		};
		
		def testListIteratorAt() {
			a.addAll(["a", "b", "c", "d", "e"]);
			def lit := a.listIteratorAt(2);
			lit.next();
			self.assertEquals(lit.next(), "d");
		};
		
		def testSubList() {
			a.addAll([2,3,4,5,6,7,8,9,10,11,12,13,14,15]);
			def t := [5,6,7,8,9,10];
			def sl := a.subList(3, 9);
			self.assertTrue(sameElementsInOrder(t, sl.toTable()));
		};
		
		
	};
	
	def MapTest := extend: /.at.unit.test.UnitTest.new("MapTest") with: {
	
		def [a, b, c, d, e] := [nil, nil, nil, nil, nil];
		def t := [["a", 1],["b", 2],["c", 3],["d", 4],["e", 5]];
		
		def setUp() {
			def vt[5] { HashMap.new() };
			[a, b, c, d, e] := vt;
		};
		
		def tearDown() {
			[a, b, c, d, e].each: { |v| v.clear() };
		};
		
		def testConstructor() {
			a := HashMap.new(t);
			self.assertEquals(a.size(), 5);
			self.assertEquals(b.size(), 0);
		};
		
		def testClear() {
			a := HashMap.new(t);
			self.assertEquals(a.size(), 5);
			a.clear();
			self.assertEquals(a.size(), 0);
		};
		
		def testContainsKey() {
			a := HashMap.new(t);
			self.assertTrue(a.containsKey("d"));
			self.assertFalse(a.containsKey("z"));
		};
		
		def testContainsValue() {
			a := HashMap.new(t);
			self.assertTrue(a.containsValue(3));
			self.assertFalse(a.containsValue(42));
		};
		
		def testEntrySet() {
			a := HashMap.new(t);
			def es := a.entrySet();
			self.assertEquals(es.size(), 5);
			es.each: { |entry|
				if: (entry.getValue() == 2) then: {
					entry.setValue(42);
				};
				if: (entry.getKey() == "d") then: {
					entry.setValue(43);
				};
			};
			self.assertEquals(a.get("b"), 42);
			self.assertEquals(a.get("d"), 43);
		};
		
		def testGet() {
			a := HashMap.new(t);
			self.assertEquals(a.get("b"), 2);
			self.assertEquals(a.get("z"), nil);
		};
		
		def testIsEmpty() {
			a := HashMap.new(t);
			self.assertFalse(a.isEmpty());
			a.clear();
			self.assertTrue(a.isEmpty());
		};
		
		def testKeySet() {
			a := HashMap.new(t);
			def es := a.keySet();
			def kt := t.map: { |entry| entry[1] };
			self.assertTrue(sameElements(kt, es.toTable()));
			self.assertTrue(es.remove("b"));
			self.assertEquals(a.size(), 4);
			self.assertFalse(a.containsKey("b"));
		};
		
		def testPut() {
			a.put("x", "y");
			self.assertEquals(a.get("x"), "y");
		};
		
		def testPutAll() {
			a := HashMap.new(t);
			b.putAll(a);
			self.assertEquals(b.size(), 5);
		};
		
		def testRemove() {
			a := HashMap.new(t);
			self.assertEquals(a.remove("a"), 1);
			self.assertFalse(a.containsKey("a"));
		};
		
		def testSize() {
			a := HashMap.new(t);
			self.assertEquals(a.size(), 5);
		};
		
		def testValues() {
			a := HashMap.new(t);
			def vs := a.values();
			def vt := t.map: { |entry| entry[2] };
			self.assertTrue(sameElements(vt, vs.toTable()));
		};
		
	};
	
};

TraitsTestModule;