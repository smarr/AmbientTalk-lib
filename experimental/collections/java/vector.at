import ~.traits.list;
import ~.traits.table;

def JVector := jlobby.java.util.Vector;

def VectorModule := object: {
	
	def VectorMirror := mirror: {
		
		def print() {
			"<vector:" + (print: self.base.toTable()) + ">";
		};

		
		def asCode() {
			def elements := asCode: (self.base.toTable());
			"{ def elements := " + elements + " ; Vector.new(elements) }()";
		};
		
	};
	
	def Vector := object: {
		
		// wrapped java vector
		def jvector := JVector.new();
		
		// initialization
		def init(collection := []) { 
			// a collection that supports .each: {|e| ... }
			self.jvector := JVector.new();
			collection.each: { |e| self.add(e) };
			self;
		};
		
		def getList() {
			self.jvector;
		};
		
		def setList(list) {
			self.jvector := list;
		};
		
		import ListTrait;
		import TableListTrait;
		
		// java vector interface
		
		def addElement(object) {
			self.add(object); // returns bool instead of void
		};
		
		def capacity() {
			self.jvector.capacity;
		};
	
		def clone() {
			def vectorclone := Vector.new();
			vectorclone.addAll(self);
			vectorclone;
		};
		
		def copyInto(table) {
			def index := 0;
			self.each: { |e|
				index := index + 1;
				table[index] := e;
			};
			table; // returns table instead of void
		};
		
		def elementAt(index) {
			self.jvector.elementAt(index);
		};
		
		def elements() {
			self.jvector.elements();
		};
		
		def ensureCapacity(minCapacity) {
			self.jvector.ensureCapacity(minCapacity);
		};
	
		def firstElement() {
			self.elementAt(0);
		};
		
		def indexOfFrom(object, index) {
			self.jvector.indexOf(object, index);
		};
		
		def insertElementAt(object, index) {
			self.addAt(index, object); // return bool instead of void
		};
		
		def lastElement() {
			self.jvector.lastElement();
		};
		
		def lastIndexOfBefore(object, index) {
			self.jvector.lastIndexOf(object, index);
		};
	
		def removeAllElements() {
			self.jvector.removeAllElements();
		};
		
		def removeElement(object) {
			self.jvector.removeElement(object);
		};
		
		def removeElementAt(index) {
			self.removeAt(index); // returns removed obj instead of void
		};
		
		def removeRange(fromIndex, toIndex) {
			self.jvector.removeRange(fromIndex, toIndex);
		};
		
		def setElementAt(object, index) {
			self.jvector.setElementAt(object, index);
		};
		
		def setSize(newSize) {
			self.jvector.setSize(newSize);
		};
		
		def trimToSize() {
			self.jvector.trimToSize();
		};

		
	} mirroredBy: VectorMirror;

};

VectorModule;