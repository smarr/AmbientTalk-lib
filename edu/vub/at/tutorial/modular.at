/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * unit test for the modular programming tutorial chapter
 * @author tvcutsem
 */
extend: /.at.unit.test.UnitTest.new("ModularTutorial") with: {
  
  /* == Modules == */

  def mathModule := object: {
    def factorial(n) {
      if: (n = 0) then:  {
        1
      } else: {
        n*factorial(n-1)
      }
    };
    def fib(n) {
      if: (n <= 1) then: {
        n
      } else: {
        fib(n-1)+fib(n-2)
      }
    };
  };
  
  def testFac() {
    self.assertEquals(120, mathModule.factorial(5));
  };

  /* == Import and Traits == */
  
  def Enumerable := object: {
	  // map the closure over the collection
	  def collect: clo {
	    def result := [];
	    self.each: { |e| result := result + [clo(e)] };
	    result
	  };
	  // return an element in enumeration for which pred returns true
	  def detect: pred {
	    { |return|
	      self.each: { |e|
	        if: pred(e) then: return(e)
	      };
	      nil }.escape();
	  };
	  // return all elements for which pred returns false
	  def reject: pred {
	    def result := [];
	    self.each: { |e| if: !pred(e) then: { result := result + [e] } };
	    result
	  };
	};
		
	def testTraitComposition() {
		def Range := object: {
		  import Enumerable;
		  def start := 0;
		  def end := 0;
		  def init(from,to) {
		    start := from; end := to;
		  };
		  def each: clo {
		    start.to: end do: clo
		  };
		};
		self.assertEquals("[0, 3, 6, 9]", print: Range.new(0,10).reject: { |i| (i%3 != 0) });
	};
	
	def testTraitExclude() {
		def Range := object: {
		  
			// do not import the slots collect: and detect:
			import Enumerable exclude collect:, detect:;
		
		  def start := 0;
		  def end := 0;
		  def init(from,to) {
		    start := from; end := to;
		  };
		  def each: clo {
		    start.to: end do: clo
		  };
		};
		self.assertTrue((reflect: Range).respondsTo(`reject:));
		self.assertFalse((reflect: Range).respondsTo(`collect:));
		self.assertFalse((reflect: Range).respondsTo(`detect:));
	};
	
	def testTraitAliasExclude() {
		def Range := object: {
		  
			// do not import collect: and import reject: as remove
			import Enumerable alias reject: := remove exclude collect:;
		
		  def start := 0;
		  def end := 0;
		  def init(from,to) {
		    start := from; end := to;
		  };
		  def each: clo {
		    start.to: end do: clo
		  };
		};
		self.assertTrue((reflect: Range).respondsTo(`remove));
		self.assertFalse((reflect: Range).respondsTo(`reject:));
		self.assertFalse((reflect: Range).respondsTo(`collect:));
		self.assertTrue((reflect: Range).respondsTo(`detect:));
	};
	
	/* == Stripes == */
	
	def testStripeTest() {
		defstripe Indexable;
		defstripe Enumerable;
		defstripe Ordered;
		defstripe Sortable <: Enumerable, Ordered;
		defstripe Set;
		
		def Array := object: {
			nil
		} stripedWith: [ Indexable, Sortable ];
		
		self.assertTrue(is: Array stripedWith: Indexable);
		self.assertTrue(is: Array stripedWith: Ordered);
		self.assertFalse(is: Array stripedWith: Set);
		def arrayStripes := stripesOf: Array;
		self.assertEquals(2, arrayStripes.length);
		self.assertNotNil(arrayStripes.find: {|s| s == Indexable });
		self.assertNotNil(arrayStripes.find: {|s| s == Sortable });
	};
	
	def testNativeStripes() {
		self.assertTrue(is: 1 stripedWith: /.at.stripes.Number);
		self.assertTrue(is: "foo" stripedWith: /.at.stripes.Text);
	};

  /* == Exception Handling == */

	defstripe DivisionByZero <: lobby.at.stripes.Exception;
	def XDivisionByZero := lobby.at.exceptions.createException(DivisionByZero);

  def calculateSomething() {
	 	//if: (denominator == 0) then: {
		  raise: XDivisionByZero.new("division by zero");
		//}
  };

  // test standard exception handling
  def testBasicExceptionHandling() {
		try: {
		  calculateSomething();
		  self.assertFalse(true, "expected exception");
		} catch: DivisionByZero using: { |e|
		  self.assertEquals("division by zero", e.message);
		}
  };

  // test first-class exception handler
  def testFirstClassExceptionHandler() {
	  def test := self;
		try: {
		  calculateSomething();
		  self.assertFalse(true, "expected exception");
		} using: (object: {
		  // this is a first-class handler object
		  def canHandle(exc) {
		    is: exc stripedWith: DivisionByZero
		  };
		  def handle(exc) {
		    test.assertEquals("division by zero", exc.message);
		  };
		})
  };

  // test multitple catch blocks
  def testMultipleExceptions() {
	  defstripe NoSolution;
		try: {
		  calculateSomething();
		  self.assertFalse(true, "expected exception");
		} catch: DivisionByZero using: { |e|
		  self.assertEquals("division by zero", e.message);
		} catch: NoSolution using: { |e|
			nil;
		}
  };

};