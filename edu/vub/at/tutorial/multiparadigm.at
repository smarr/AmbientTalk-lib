/**
 * AmbientTalk/2 Project
 * (c) Programming Technology Lab, 2006 - 2007
 * Authors: Tom Van Cutsem & Stijn Mostinckx
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Unit test for the code fragments in the tutorial chapter
 * On Scoping, Closures, Methods and Messages
 * @author tvcutsem
 */
extend: /.at.unit.test.UnitTest.new("MultiParadigmTest") with: {
	def testLexvsObjectScope() {
		def o := object: {
		  def x := 5;
		  def getStatic() { x };
		  def getDynamic() { self.x };
		};

		def o2 := extend: o with: {
		  def x := 6;
		};

		self.assertEquals(5,o.getStatic());
		self.assertEquals(5,o.getDynamic());
		self.assertEquals(5,o2.getStatic());
		self.assertEquals(6,o2.getDynamic());
	};
	
  def testFacets() {
		def cell := object: {
		  def contents := nil;
		  def reader := object: {
		    def read() { contents }
		  };
		  def writer := object: {
		    def write(x) { contents := x }
		  };
		};

    def rd := cell.reader;
    def wr := cell.writer;
    self.assertEquals(42, wr.write(42));
    self.assertEquals(42, rd.read());
  };	

  def testInnerSend() {
    def theTest := self;
    def inner := object: {
      def compare(a,b) {
        theTest.assertEquals(a,b);
      }
    };
    inner.compare(1+1,1*2);
  };

  def testMethVsClo() {
		def o := object: {
		  def x := 5;
		  def meth(y) {
		    def clo(z) { self.x + y + z }
		  };
		};
		self.assertEquals(8, o.meth(2)(1));
  };

  def testExternalMethods() {
		def calc := object: {
		  def add(x,y) { x+y };
		}; 
		def offset := 0;
		def calc.sub(x,y) { offset + self.add(x,-y) };
		offset := 1;
		// 1 + 5 + (-3)
		self.assertEquals(3, calc.sub(5,3));
  };

  def testFirstClassMethod() {
		def Math := object: {
		  def square(x) { x*x };
		};

		def squareClo := Math.&square;
		self.assertEquals(4,squareClo(2));
		
		def Adder := object: {
		  def amount := 0;
		  def init(amnt) {
		    amount := amnt;
		  };
		  def addTo(x) {
		    x + self.amount
		  };
		};
		self.assertEquals(print: [2,3,4],
			                print: [1,2,3].map: Adder.new(1).&addTo);
  };

  def testFirstClassMessages() {
		def msg := .add(1,2);
		self.assertEquals(`add, msg.selector);
		self.assertEquals(print: [1,2], print: msg.arguments);
		def delegation := ^add(1,2);
		self.assertEquals(`add, delegation.selector);
		def calc := object: {
		  def add(x,y) { x + y}
		};
		self.assertEquals(3, msg.sendTo(calc, self));
		self.assertEquals(3, calc <+ msg);
		
		self.assertEquals(`+, .+(1).selector);
  };
}